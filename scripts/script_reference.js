!function e(t,a,n){function i(o,s){if(!a[o]){if(!t[o]){var l="function"==typeof require&&require;if(!s&&l)return l(o,!0);if(r)return r(o,!0);var c=new Error("Cannot find module '"+o+"'");throw c.code="MODULE_NOT_FOUND",c}var d=a[o]={exports:{}};t[o][0].call(d.exports,function(e){var a=t[o][1][e];return i(a||e)},d,d.exports,e,t,a,n)}return a[o].exports}for(var r="function"==typeof require&&require,o=0;o<n.length;o++)i(n[o]);return i}({1:[function(e,t,a){!function(e,a){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?a(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return a(e)}:a(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function a(e,t){var a=(t=t||te).createElement("script");a.text=e,t.head.appendChild(a).parentNode.removeChild(a)}function n(e){var t=!!e&&"length"in e&&e.length,a=ue.type(e);return"function"!==a&&!ue.isWindow(e)&&("array"===a||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function r(e,t,a){return ue.isFunction(t)?ue.grep(e,function(e,n){return!!t.call(e,n,e)!==a}):t.nodeType?ue.grep(e,function(e){return e===t!==a}):"string"!=typeof t?ue.grep(e,function(e){return oe.call(t,e)>-1!==a}):_e.test(t)?ue.filter(t,e,a):(t=ue.filter(t,e),ue.grep(e,function(e){return oe.call(t,e)>-1!==a&&1===e.nodeType}))}function o(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function s(e){var t={};return ue.each(e.match(Ge)||[],function(e,a){t[a]=!0}),t}function l(e){return e}function c(e){throw e}function d(e,t,a,n){var i;try{e&&ue.isFunction(i=e.promise)?i.call(e).done(t).fail(a):e&&ue.isFunction(i=e.then)?i.call(e,t,a):t.apply(void 0,[e].slice(n))}catch(e){a.apply(void 0,[e])}}function m(){te.removeEventListener("DOMContentLoaded",m),e.removeEventListener("load",m),ue.ready()}function p(){this.expando=ue.expando+p.uid++}function u(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Me.test(e)?JSON.parse(e):e)}function h(e,t,a){var n;if(void 0===a&&1===e.nodeType)if(n="data-"+t.replace(Ee,"-$&").toLowerCase(),"string"==typeof(a=e.getAttribute(n))){try{a=u(a)}catch(e){}De.set(e,t,a)}else a=void 0;return a}function f(e,t,a,n){var i,r=1,o=20,s=n?function(){return n.cur()}:function(){return ue.css(e,t,"")},l=s(),c=a&&a[3]||(ue.cssNumber[t]?"":"px"),d=(ue.cssNumber[t]||"px"!==c&&+l)&&Oe.exec(ue.css(e,t));if(d&&d[3]!==c){c=c||d[3],a=a||[],d=+l||1;do{d/=r=r||".5",ue.style(e,t,d+c)}while(r!==(r=s()/l)&&1!==r&&--o)}return a&&(d=+d||+l||0,i=a[1]?d+(a[1]+1)*a[2]:+a[2],n&&(n.unit=c,n.start=d,n.end=i)),i}function y(e){var t,a=e.ownerDocument,n=e.nodeName,i=We[n];return i||(t=a.body.appendChild(a.createElement(n)),i=ue.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),We[n]=i,i)}function v(e,t){for(var a,n,i=[],r=0,o=e.length;r<o;r++)(n=e[r]).style&&(a=n.style.display,t?("none"===a&&(i[r]=Re.get(n,"display")||null,i[r]||(n.style.display="")),""===n.style.display&&Be(n)&&(i[r]=y(n))):"none"!==a&&(i[r]="none",Re.set(n,"display",a)));for(r=0;r<o;r++)null!=i[r]&&(e[r].style.display=i[r]);return e}function b(e,t){var a;return a=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&i(e,t)?ue.merge([e],a):a}function g(e,t){for(var a=0,n=e.length;a<n;a++)Re.set(e[a],"globalEval",!t||Re.get(t[a],"globalEval"))}function V(e,t,a,n,i){for(var r,o,s,l,c,d,m=t.createDocumentFragment(),p=[],u=0,h=e.length;u<h;u++)if((r=e[u])||0===r)if("object"===ue.type(r))ue.merge(p,r.nodeType?[r]:r);else if(Xe.test(r)){for(o=o||m.appendChild(t.createElement("div")),s=(Ue.exec(r)||["",""])[1].toLowerCase(),l=ze[s]||ze._default,o.innerHTML=l[1]+ue.htmlPrefilter(r)+l[2],d=l[0];d--;)o=o.lastChild;ue.merge(p,o.childNodes),(o=m.firstChild).textContent=""}else p.push(t.createTextNode(r));for(m.textContent="",u=0;r=p[u++];)if(n&&ue.inArray(r,n)>-1)i&&i.push(r);else if(c=ue.contains(r.ownerDocument,r),o=b(m.appendChild(r),"script"),c&&g(o),a)for(d=0;r=o[d++];)qe.test(r.type||"")&&a.push(r);return m}function S(){return!0}function x(){return!1}function _(){try{return te.activeElement}catch(e){}}function w(e,t,a,n,i,r){var o,s;if("object"==typeof t){"string"!=typeof a&&(n=n||a,a=void 0);for(s in t)w(e,s,a,n,t[s],r);return e}if(null==n&&null==i?(i=a,n=a=void 0):null==i&&("string"==typeof a?(i=n,n=void 0):(i=n,n=a,a=void 0)),!1===i)i=x;else if(!i)return e;return 1===r&&(o=i,(i=function(e){return ue().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=ue.guid++)),e.each(function(){ue.event.add(this,t,i,n,a)})}function N(e,t){return i(e,"table")&&i(11!==t.nodeType?t:t.firstChild,"tr")?ue(">tbody",e)[0]||e:e}function T(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function C(e){var t=tt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function G(e,t){var a,n,i,r,o,s,l,c;if(1===t.nodeType){if(Re.hasData(e)&&(r=Re.access(e),o=Re.set(t,r),c=r.events)){delete o.handle,o.events={};for(i in c)for(a=0,n=c[i].length;a<n;a++)ue.event.add(t,i,c[i][a])}De.hasData(e)&&(s=De.access(e),l=ue.extend({},s),De.set(t,l))}}function A(e,t){var a=t.nodeName.toLowerCase();"input"===a&&He.test(e.type)?t.checked=e.checked:"input"!==a&&"textarea"!==a||(t.defaultValue=e.defaultValue)}function k(e,t,n,i){t=ie.apply([],t);var r,o,s,l,c,d,m=0,p=e.length,u=p-1,h=t[0],f=ue.isFunction(h);if(f||p>1&&"string"==typeof h&&!pe.checkClone&&et.test(h))return e.each(function(a){var r=e.eq(a);f&&(t[0]=h.call(this,a,r.html())),k(r,t,n,i)});if(p&&(r=V(t,e[0].ownerDocument,!1,e,i),o=r.firstChild,1===r.childNodes.length&&(r=o),o||i)){for(l=(s=ue.map(b(r,"script"),T)).length;m<p;m++)c=r,m!==u&&(c=ue.clone(c,!0,!0),l&&ue.merge(s,b(c,"script"))),n.call(e[m],c,m);if(l)for(d=s[s.length-1].ownerDocument,ue.map(s,C),m=0;m<l;m++)c=s[m],qe.test(c.type||"")&&!Re.access(c,"globalEval")&&ue.contains(d,c)&&(c.src?ue._evalUrl&&ue._evalUrl(c.src):a(c.textContent.replace(at,""),d))}return e}function I(e,t,a){for(var n,i=t?ue.filter(t,e):e,r=0;null!=(n=i[r]);r++)a||1!==n.nodeType||ue.cleanData(b(n)),n.parentNode&&(a&&ue.contains(n.ownerDocument,n)&&g(b(n,"script")),n.parentNode.removeChild(n));return e}function P(e,t,a){var n,i,r,o,s=e.style;return(a=a||rt(e))&&(""!==(o=a.getPropertyValue(t)||a[t])||ue.contains(e.ownerDocument,e)||(o=ue.style(e,t)),!pe.pixelMarginRight()&&it.test(o)&&nt.test(t)&&(n=s.width,i=s.minWidth,r=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=a.width,s.width=n,s.minWidth=i,s.maxWidth=r)),void 0!==o?o+"":o}function R(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function D(e){if(e in mt)return e;for(var t=e[0].toUpperCase()+e.slice(1),a=dt.length;a--;)if((e=dt[a]+t)in mt)return e}function M(e){var t=ue.cssProps[e];return t||(t=ue.cssProps[e]=D(e)||e),t}function E(e,t,a){var n=Oe.exec(t);return n?Math.max(0,n[2]-(a||0))+(n[3]||"px"):t}function F(e,t,a,n,i){var r,o=0;for(r=a===(n?"border":"content")?4:"width"===t?1:0;r<4;r+=2)"margin"===a&&(o+=ue.css(e,a+Le[r],!0,i)),n?("content"===a&&(o-=ue.css(e,"padding"+Le[r],!0,i)),"margin"!==a&&(o-=ue.css(e,"border"+Le[r]+"Width",!0,i))):(o+=ue.css(e,"padding"+Le[r],!0,i),"padding"!==a&&(o+=ue.css(e,"border"+Le[r]+"Width",!0,i)));return o}function O(e,t,a){var n,i=rt(e),r=P(e,t,i),o="border-box"===ue.css(e,"boxSizing",!1,i);return it.test(r)?r:(n=o&&(pe.boxSizingReliable()||r===e.style[t]),"auto"===r&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)]),(r=parseFloat(r)||0)+F(e,t,a||(o?"border":"content"),n,i)+"px")}function L(e,t,a,n,i){return new L.prototype.init(e,t,a,n,i)}function B(){ut&&(!1===te.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(B):e.setTimeout(B,ue.fx.interval),ue.fx.tick())}function j(){return e.setTimeout(function(){pt=void 0}),pt=ue.now()}function W(e,t){var a,n=0,i={height:e};for(t=t?1:0;n<4;n+=2-t)i["margin"+(a=Le[n])]=i["padding"+a]=e;return t&&(i.opacity=i.width=e),i}function H(e,t,a){for(var n,i=(q.tweeners[t]||[]).concat(q.tweeners["*"]),r=0,o=i.length;r<o;r++)if(n=i[r].call(a,t,e))return n}function U(e,t){var a,n,i,r,o;for(a in e)if(n=ue.camelCase(a),i=t[n],r=e[a],Array.isArray(r)&&(i=r[1],r=e[a]=r[0]),a!==n&&(e[n]=r,delete e[a]),(o=ue.cssHooks[n])&&"expand"in o){r=o.expand(r),delete e[n];for(a in r)a in e||(e[a]=r[a],t[a]=i)}else t[n]=i}function q(e,t,a){var n,i,r=0,o=q.prefilters.length,s=ue.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=pt||j(),a=Math.max(0,c.startTime+c.duration-t),n=1-(a/c.duration||0),r=0,o=c.tweens.length;r<o;r++)c.tweens[r].run(n);return s.notifyWith(e,[c,n,a]),n<1&&o?a:(o||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:ue.extend({},t),opts:ue.extend(!0,{specialEasing:{},easing:ue.easing._default},a),originalProperties:t,originalOptions:a,startTime:pt||j(),duration:a.duration,tweens:[],createTween:function(t,a){var n=ue.Tween(e,c.opts,t,a,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(n),n},stop:function(t){var a=0,n=t?c.tweens.length:0;if(i)return this;for(i=!0;a<n;a++)c.tweens[a].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),d=c.props;for(U(d,c.opts.specialEasing);r<o;r++)if(n=q.prefilters[r].call(c,e,d,c.opts))return ue.isFunction(n.stop)&&(ue._queueHooks(c.elem,c.opts.queue).stop=ue.proxy(n.stop,n)),n;return ue.map(d,H,c),ue.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),ue.fx.timer(ue.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}function z(e){return(e.match(Ge)||[]).join(" ")}function X(e){return e.getAttribute&&e.getAttribute("class")||""}function Y(e,t,a,n){var i;if(Array.isArray(t))ue.each(t,function(t,i){a||Nt.test(e)?n(e,i):Y(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,a,n)});else if(a||"object"!==ue.type(t))n(e,t);else for(i in t)Y(e+"["+i+"]",t[i],a,n)}function K(e){return function(t,a){"string"!=typeof t&&(a=t,t="*");var n,i=0,r=t.toLowerCase().match(Ge)||[];if(ue.isFunction(a))for(;n=r[i++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(a)):(e[n]=e[n]||[]).push(a)}}function Z(e,t,a,n){function i(s){var l;return r[s]=!0,ue.each(e[s]||[],function(e,s){var c=s(t,a,n);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(t.dataTypes.unshift(c),i(c),!1)}),l}var r={},o=e===Ft;return i(t.dataTypes[0])||!r["*"]&&i("*")}function $(e,t){var a,n,i=ue.ajaxSettings.flatOptions||{};for(a in t)void 0!==t[a]&&((i[a]?e:n||(n={}))[a]=t[a]);return n&&ue.extend(!0,e,n),e}function J(e,t,a){for(var n,i,r,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(i in s)if(s[i]&&s[i].test(n)){l.unshift(i);break}if(l[0]in a)r=l[0];else{for(i in a){if(!l[0]||e.converters[i+" "+l[0]]){r=i;break}o||(o=i)}r=r||o}if(r)return r!==l[0]&&l.unshift(r),a[r]}function Q(e,t,a,n){var i,r,o,s,l,c={},d=e.dataTypes.slice();if(d[1])for(o in e.converters)c[o.toLowerCase()]=e.converters[o];for(r=d.shift();r;)if(e.responseFields[r]&&(a[e.responseFields[r]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=d.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(o=c[l+" "+r]||c["* "+r]))for(i in c)if((s=i.split(" "))[1]===r&&(o=c[l+" "+s[0]]||c["* "+s[0]])){!0===o?o=c[i]:!0!==c[i]&&(r=s[0],d.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}var ee=[],te=e.document,ae=Object.getPrototypeOf,ne=ee.slice,ie=ee.concat,re=ee.push,oe=ee.indexOf,se={},le=se.toString,ce=se.hasOwnProperty,de=ce.toString,me=de.call(Object),pe={},ue=function(e,t){return new ue.fn.init(e,t)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,fe=/^-ms-/,ye=/-([a-z])/g,ve=function(e,t){return t.toUpperCase()};ue.fn=ue.prototype={jquery:"3.2.1",constructor:ue,length:0,toArray:function(){return ne.call(this)},get:function(e){return null==e?ne.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=ue.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return ue.each(this,e)},map:function(e){return this.pushStack(ue.map(this,function(t,a){return e.call(t,a,t)}))},slice:function(){return this.pushStack(ne.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,a=+e+(e<0?t:0);return this.pushStack(a>=0&&a<t?[this[a]]:[])},end:function(){return this.prevObject||this.constructor()},push:re,sort:ee.sort,splice:ee.splice},ue.extend=ue.fn.extend=function(){var e,t,a,n,i,r,o=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof o&&(c=o,o=arguments[s]||{},s++),"object"==typeof o||ue.isFunction(o)||(o={}),s===l&&(o=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)a=o[t],o!==(n=e[t])&&(c&&n&&(ue.isPlainObject(n)||(i=Array.isArray(n)))?(i?(i=!1,r=a&&Array.isArray(a)?a:[]):r=a&&ue.isPlainObject(a)?a:{},o[t]=ue.extend(c,r,n)):void 0!==n&&(o[t]=n));return o},ue.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ue.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=ue.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,a;return!(!e||"[object Object]"!==le.call(e))&&(!(t=ae(e))||"function"==typeof(a=ce.call(t,"constructor")&&t.constructor)&&de.call(a)===me)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?se[le.call(e)]||"object":typeof e},globalEval:function(e){a(e)},camelCase:function(e){return e.replace(fe,"ms-").replace(ye,ve)},each:function(e,t){var a,i=0;if(n(e))for(a=e.length;i<a&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var a=t||[];return null!=e&&(n(Object(e))?ue.merge(a,"string"==typeof e?[e]:e):re.call(a,e)),a},inArray:function(e,t,a){return null==t?-1:oe.call(t,e,a)},merge:function(e,t){for(var a=+t.length,n=0,i=e.length;n<a;n++)e[i++]=t[n];return e.length=i,e},grep:function(e,t,a){for(var n=[],i=0,r=e.length,o=!a;i<r;i++)!t(e[i],i)!==o&&n.push(e[i]);return n},map:function(e,t,a){var i,r,o=0,s=[];if(n(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,a))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,a))&&s.push(r);return ie.apply([],s)},guid:1,proxy:function(e,t){var a,n,i;if("string"==typeof t&&(a=e[t],t=e,e=a),ue.isFunction(e))return n=ne.call(arguments,2),i=function(){return e.apply(t||this,n.concat(ne.call(arguments)))},i.guid=e.guid=e.guid||ue.guid++,i},now:Date.now,support:pe}),"function"==typeof Symbol&&(ue.fn[Symbol.iterator]=ee[Symbol.iterator]),ue.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){se["[object "+t+"]"]=t.toLowerCase()});var be=function(e){function t(e,t,a,n){var i,r,o,s,l,d,p,u=t&&t.ownerDocument,h=t?t.nodeType:9;if(a=a||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return a;if(!n&&((t?t.ownerDocument||t:L)!==I&&k(t),t=t||I,R)){if(11!==h&&(l=fe.exec(e)))if(i=l[1]){if(9===h){if(!(o=t.getElementById(i)))return a;if(o.id===i)return a.push(o),a}else if(u&&(o=u.getElementById(i))&&F(t,o)&&o.id===i)return a.push(o),a}else{if(l[2])return Z.apply(a,t.getElementsByTagName(e)),a;if((i=l[3])&&V.getElementsByClassName&&t.getElementsByClassName)return Z.apply(a,t.getElementsByClassName(i)),a}if(V.qsa&&!U[e+" "]&&(!D||!D.test(e))){if(1!==h)u=t,p=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(ge,Ve):t.setAttribute("id",s=O),r=(d=w(e)).length;r--;)d[r]="#"+s+" "+m(d[r]);p=d.join(","),u=ye.test(e)&&c(t.parentNode)||t}if(p)try{return Z.apply(a,u.querySelectorAll(p)),a}catch(e){}finally{s===O&&t.removeAttribute("id")}}}return T(e.replace(re,"$1"),t,a,n)}function a(){function e(a,n){return t.push(a+" ")>S.cacheLength&&delete e[t.shift()],e[a+" "]=n}var t=[];return e}function n(e){return e[O]=!0,e}function i(e){var t=I.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var a=e.split("|"),n=a.length;n--;)S.attrHandle[a[n]]=t}function o(e,t){var a=t&&e,n=a&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(a)for(;a=a.nextSibling;)if(a===t)return-1;return e?1:-1}function s(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&xe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return n(function(t){return t=+t,n(function(a,n){for(var i,r=e([],a.length,t),o=r.length;o--;)a[i=r[o]]&&(a[i]=!(n[i]=a[i]))})})}function c(e){return e&&void 0!==e.getElementsByTagName&&e}function d(){}function m(e){for(var t=0,a=e.length,n="";t<a;t++)n+=e[t].value;return n}function p(e,t,a){var n=t.dir,i=t.next,r=i||n,o=a&&"parentNode"===r,s=j++;return t.first?function(t,a,i){for(;t=t[n];)if(1===t.nodeType||o)return e(t,a,i);return!1}:function(t,a,l){var c,d,m,p=[B,s];if(l){for(;t=t[n];)if((1===t.nodeType||o)&&e(t,a,l))return!0}else for(;t=t[n];)if(1===t.nodeType||o)if(m=t[O]||(t[O]={}),d=m[t.uniqueID]||(m[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[n]||t;else{if((c=d[r])&&c[0]===B&&c[1]===s)return p[2]=c[2];if(d[r]=p,p[2]=e(t,a,l))return!0}return!1}}function u(e){return e.length>1?function(t,a,n){for(var i=e.length;i--;)if(!e[i](t,a,n))return!1;return!0}:e[0]}function h(e,a,n){for(var i=0,r=a.length;i<r;i++)t(e,a[i],n);return n}function f(e,t,a,n,i){for(var r,o=[],s=0,l=e.length,c=null!=t;s<l;s++)(r=e[s])&&(a&&!a(r,n,i)||(o.push(r),c&&t.push(s)));return o}function y(e,t,a,i,r,o){return i&&!i[O]&&(i=y(i)),r&&!r[O]&&(r=y(r,o)),n(function(n,o,s,l){var c,d,m,p=[],u=[],y=o.length,v=n||h(t||"*",s.nodeType?[s]:s,[]),b=!e||!n&&t?v:f(v,p,e,s,l),g=a?r||(n?e:y||i)?[]:o:b;if(a&&a(b,g,s,l),i)for(c=f(g,u),i(c,[],s,l),d=c.length;d--;)(m=c[d])&&(g[u[d]]=!(b[u[d]]=m));if(n){if(r||e){if(r){for(c=[],d=g.length;d--;)(m=g[d])&&c.push(b[d]=m);r(null,g=[],c,l)}for(d=g.length;d--;)(m=g[d])&&(c=r?J(n,m):p[d])>-1&&(n[c]=!(o[c]=m))}}else g=f(g===o?g.splice(y,g.length):g),r?r(null,o,g,l):Z.apply(o,g)})}function v(e){for(var t,a,n,i=e.length,r=S.relative[e[0].type],o=r||S.relative[" "],s=r?1:0,l=p(function(e){return e===t},o,!0),c=p(function(e){return J(t,e)>-1},o,!0),d=[function(e,a,n){var i=!r&&(n||a!==C)||((t=a).nodeType?l(e,a,n):c(e,a,n));return t=null,i}];s<i;s++)if(a=S.relative[e[s].type])d=[p(u(d),a)];else{if((a=S.filter[e[s].type].apply(null,e[s].matches))[O]){for(n=++s;n<i&&!S.relative[e[n].type];n++);return y(s>1&&u(d),s>1&&m(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(re,"$1"),a,s<n&&v(e.slice(s,n)),n<i&&v(e=e.slice(n)),n<i&&m(e))}d.push(a)}return u(d)}function b(e,a){var i=a.length>0,r=e.length>0,o=function(n,o,s,l,c){var d,m,p,u=0,h="0",y=n&&[],v=[],b=C,g=n||r&&S.find.TAG("*",c),V=B+=null==b?1:Math.random()||.1,x=g.length;for(c&&(C=o===I||o||c);h!==x&&null!=(d=g[h]);h++){if(r&&d){for(m=0,o||d.ownerDocument===I||(k(d),s=!R);p=e[m++];)if(p(d,o||I,s)){l.push(d);break}c&&(B=V)}i&&((d=!p&&d)&&u--,n&&y.push(d))}if(u+=h,i&&h!==u){for(m=0;p=a[m++];)p(y,v,o,s);if(n){if(u>0)for(;h--;)y[h]||v[h]||(v[h]=Y.call(l));v=f(v)}Z.apply(l,v),c&&!n&&v.length>0&&u+a.length>1&&t.uniqueSort(l)}return c&&(B=V,C=b),y};return i?n(o):o}var g,V,S,x,_,w,N,T,C,G,A,k,I,P,R,D,M,E,F,O="sizzle"+1*new Date,L=e.document,B=0,j=0,W=a(),H=a(),U=a(),q=function(e,t){return e===t&&(A=!0),0},z={}.hasOwnProperty,X=[],Y=X.pop,K=X.push,Z=X.push,$=X.slice,J=function(e,t){for(var a=0,n=e.length;a<n;a++)if(e[a]===t)return a;return-1},Q="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ae="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ne=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ae+")*)|.*)\\)|)",ie=new RegExp(ee+"+","g"),re=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),oe=new RegExp("^"+ee+"*,"+ee+"*"),se=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ce=new RegExp(ne),de=new RegExp("^"+te+"$"),me={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ae),PSEUDO:new RegExp("^"+ne),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+Q+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},pe=/^(?:input|select|textarea|button)$/i,ue=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,fe=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),be=function(e,t,a){var n="0x"+t-65536;return n!==n||a?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},ge=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Ve=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Se=function(){k()},xe=p(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Z.apply(X=$.call(L.childNodes),L.childNodes),X[L.childNodes.length].nodeType}catch(e){Z={apply:X.length?function(e,t){K.apply(e,$.call(t))}:function(e,t){for(var a=e.length,n=0;e[a++]=t[n++];);e.length=a-1}}}V=t.support={},_=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},k=t.setDocument=function(e){var t,a,n=e?e.ownerDocument||e:L;return n!==I&&9===n.nodeType&&n.documentElement?(I=n,P=I.documentElement,R=!_(I),L!==I&&(a=I.defaultView)&&a.top!==a&&(a.addEventListener?a.addEventListener("unload",Se,!1):a.attachEvent&&a.attachEvent("onunload",Se)),V.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),V.getElementsByTagName=i(function(e){return e.appendChild(I.createComment("")),!e.getElementsByTagName("*").length}),V.getElementsByClassName=he.test(I.getElementsByClassName),V.getById=i(function(e){return P.appendChild(e).id=O,!I.getElementsByName||!I.getElementsByName(O).length}),V.getById?(S.filter.ID=function(e){var t=e.replace(ve,be);return function(e){return e.getAttribute("id")===t}},S.find.ID=function(e,t){if(void 0!==t.getElementById&&R){var a=t.getElementById(e);return a?[a]:[]}}):(S.filter.ID=function(e){var t=e.replace(ve,be);return function(e){var a=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return a&&a.value===t}},S.find.ID=function(e,t){if(void 0!==t.getElementById&&R){var a,n,i,r=t.getElementById(e);if(r){if((a=r.getAttributeNode("id"))&&a.value===e)return[r];for(i=t.getElementsByName(e),n=0;r=i[n++];)if((a=r.getAttributeNode("id"))&&a.value===e)return[r]}return[]}}),S.find.TAG=V.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):V.qsa?t.querySelectorAll(e):void 0}:function(e,t){var a,n=[],i=0,r=t.getElementsByTagName(e);if("*"===e){for(;a=r[i++];)1===a.nodeType&&n.push(a);return n}return r},S.find.CLASS=V.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&R)return t.getElementsByClassName(e)},M=[],D=[],(V.qsa=he.test(I.querySelectorAll))&&(i(function(e){P.appendChild(e).innerHTML="<a id='"+O+"'></a><select id='"+O+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&D.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||D.push("\\["+ee+"*(?:value|"+Q+")"),e.querySelectorAll("[id~="+O+"-]").length||D.push("~="),e.querySelectorAll(":checked").length||D.push(":checked"),e.querySelectorAll("a#"+O+"+*").length||D.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=I.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&D.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&D.push(":enabled",":disabled"),P.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&D.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),D.push(",.*:")})),(V.matchesSelector=he.test(E=P.matches||P.webkitMatchesSelector||P.mozMatchesSelector||P.oMatchesSelector||P.msMatchesSelector))&&i(function(e){V.disconnectedMatch=E.call(e,"*"),E.call(e,"[s!='']:x"),M.push("!=",ne)}),D=D.length&&new RegExp(D.join("|")),M=M.length&&new RegExp(M.join("|")),t=he.test(P.compareDocumentPosition),F=t||he.test(P.contains)?function(e,t){var a=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(a.contains?a.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},q=t?function(e,t){if(e===t)return A=!0,0;var a=!e.compareDocumentPosition-!t.compareDocumentPosition;return a||(a=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&a||!V.sortDetached&&t.compareDocumentPosition(e)===a?e===I||e.ownerDocument===L&&F(L,e)?-1:t===I||t.ownerDocument===L&&F(L,t)?1:G?J(G,e)-J(G,t):0:4&a?-1:1)}:function(e,t){if(e===t)return A=!0,0;var a,n=0,i=e.parentNode,r=t.parentNode,s=[e],l=[t];if(!i||!r)return e===I?-1:t===I?1:i?-1:r?1:G?J(G,e)-J(G,t):0;if(i===r)return o(e,t);for(a=e;a=a.parentNode;)s.unshift(a);for(a=t;a=a.parentNode;)l.unshift(a);for(;s[n]===l[n];)n++;return n?o(s[n],l[n]):s[n]===L?-1:l[n]===L?1:0},I):I},t.matches=function(e,a){return t(e,null,null,a)},t.matchesSelector=function(e,a){if((e.ownerDocument||e)!==I&&k(e),a=a.replace(le,"='$1']"),V.matchesSelector&&R&&!U[a+" "]&&(!M||!M.test(a))&&(!D||!D.test(a)))try{var n=E.call(e,a);if(n||V.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return t(a,I,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==I&&k(e),F(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==I&&k(e);var a=S.attrHandle[t.toLowerCase()],n=a&&z.call(S.attrHandle,t.toLowerCase())?a(e,t,!R):void 0;return void 0!==n?n:V.attributes||!R?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},t.escape=function(e){return(e+"").replace(ge,Ve)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,a=[],n=0,i=0;if(A=!V.detectDuplicates,G=!V.sortStable&&e.slice(0),e.sort(q),A){for(;t=e[i++];)t===e[i]&&(n=a.push(i));for(;n--;)e.splice(a[n],1)}return G=null,e},x=t.getText=function(e){var t,a="",n=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)a+=x(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[n++];)a+=x(t);return a},(S=t.selectors={cacheLength:50,createPseudo:n,match:me,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,be),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,be),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,a=!e[6]&&e[2];return me.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":a&&ce.test(a)&&(t=w(a,!0))&&(t=a.indexOf(")",a.length-t)-a.length)&&(e[0]=e[0].slice(0,t),e[2]=a.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,be).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,a,n){return function(i){var r=t.attr(i,e);return null==r?"!="===a:!a||(r+="","="===a?r===n:"!="===a?r!==n:"^="===a?n&&0===r.indexOf(n):"*="===a?n&&r.indexOf(n)>-1:"$="===a?n&&r.slice(-n.length)===n:"~="===a?(" "+r.replace(ie," ")+" ").indexOf(n)>-1:"|="===a&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,a,n,i){var r="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===n&&0===i?function(e){return!!e.parentNode}:function(t,a,l){var c,d,m,p,u,h,f=r!==o?"nextSibling":"previousSibling",y=t.parentNode,v=s&&t.nodeName.toLowerCase(),b=!l&&!s,g=!1;if(y){if(r){for(;f;){for(p=t;p=p[f];)if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=f="only"===e&&!h&&"nextSibling"}return!0}if(h=[o?y.firstChild:y.lastChild],o&&b){for(g=(u=(c=(d=(m=(p=y)[O]||(p[O]={}))[p.uniqueID]||(m[p.uniqueID]={}))[e]||[])[0]===B&&c[1])&&c[2],p=u&&y.childNodes[u];p=++u&&p&&p[f]||(g=u=0)||h.pop();)if(1===p.nodeType&&++g&&p===t){d[e]=[B,u,g];break}}else if(b&&(g=u=(c=(d=(m=(p=t)[O]||(p[O]={}))[p.uniqueID]||(m[p.uniqueID]={}))[e]||[])[0]===B&&c[1]),!1===g)for(;(p=++u&&p&&p[f]||(g=u=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++g||(b&&((d=(m=p[O]||(p[O]={}))[p.uniqueID]||(m[p.uniqueID]={}))[e]=[B,g]),p!==t)););return(g-=i)===n||g%n==0&&g/n>=0}}},PSEUDO:function(e,a){var i,r=S.pseudos[e]||S.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[O]?r(a):r.length>1?(i=[e,e,"",a],S.setFilters.hasOwnProperty(e.toLowerCase())?n(function(e,t){for(var n,i=r(e,a),o=i.length;o--;)e[n=J(e,i[o])]=!(t[n]=i[o])}):function(e){return r(e,0,i)}):r}},pseudos:{not:n(function(e){var t=[],a=[],i=N(e.replace(re,"$1"));return i[O]?n(function(e,t,a,n){for(var r,o=i(e,null,n,[]),s=e.length;s--;)(r=o[s])&&(e[s]=!(t[s]=r))}):function(e,n,r){return t[0]=e,i(t,null,r,a),t[0]=null,!a.pop()}}),has:n(function(e){return function(a){return t(e,a).length>0}}),contains:n(function(e){return e=e.replace(ve,be),function(t){return(t.textContent||t.innerText||x(t)).indexOf(e)>-1}}),lang:n(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,be).toLowerCase(),function(t){var a;do{if(a=R?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(a=a.toLowerCase())===e||0===a.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var a=e.location&&e.location.hash;return a&&a.slice(1)===t.id},root:function(e){return e===P},focus:function(e){return e===I.activeElement&&(!I.hasFocus||I.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!S.pseudos.empty(e)},header:function(e){return ue.test(e.nodeName)},input:function(e){return pe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,a){return[a<0?a+t:a]}),even:l(function(e,t){for(var a=0;a<t;a+=2)e.push(a);return e}),odd:l(function(e,t){for(var a=1;a<t;a+=2)e.push(a);return e}),lt:l(function(e,t,a){for(var n=a<0?a+t:a;--n>=0;)e.push(n);return e}),gt:l(function(e,t,a){for(var n=a<0?a+t:a;++n<t;)e.push(n);return e})}}).pseudos.nth=S.pseudos.eq;for(g in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})S.pseudos[g]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(g);for(g in{submit:!0,reset:!0})S.pseudos[g]=function(e){return function(t){var a=t.nodeName.toLowerCase();return("input"===a||"button"===a)&&t.type===e}}(g);return d.prototype=S.filters=S.pseudos,S.setFilters=new d,w=t.tokenize=function(e,a){var n,i,r,o,s,l,c,d=H[e+" "];if(d)return a?0:d.slice(0);for(s=e,l=[],c=S.preFilter;s;){n&&!(i=oe.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(r=[])),n=!1,(i=se.exec(s))&&(n=i.shift(),r.push({value:n,type:i[0].replace(re," ")}),s=s.slice(n.length));for(o in S.filter)!(i=me[o].exec(s))||c[o]&&!(i=c[o](i))||(n=i.shift(),r.push({value:n,type:o,matches:i}),s=s.slice(n.length));if(!n)break}return a?s.length:s?t.error(e):H(e,l).slice(0)},N=t.compile=function(e,t){var a,n=[],i=[],r=U[e+" "];if(!r){for(t||(t=w(e)),a=t.length;a--;)(r=v(t[a]))[O]?n.push(r):i.push(r);(r=U(e,b(i,n))).selector=e}return r},T=t.select=function(e,t,a,n){var i,r,o,s,l,d="function"==typeof e&&e,p=!n&&w(e=d.selector||e);if(a=a||[],1===p.length){if((r=p[0]=p[0].slice(0)).length>2&&"ID"===(o=r[0]).type&&9===t.nodeType&&R&&S.relative[r[1].type]){if(!(t=(S.find.ID(o.matches[0].replace(ve,be),t)||[])[0]))return a;d&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(i=me.needsContext.test(e)?0:r.length;i--&&(o=r[i],!S.relative[s=o.type]);)if((l=S.find[s])&&(n=l(o.matches[0].replace(ve,be),ye.test(r[0].type)&&c(t.parentNode)||t))){if(r.splice(i,1),!(e=n.length&&m(r)))return Z.apply(a,n),a;break}}return(d||N(e,p))(n,t,!R,a,!t||ye.test(e)&&c(t.parentNode)||t),a},V.sortStable=O.split("").sort(q).join("")===O,V.detectDuplicates=!!A,k(),V.sortDetached=i(function(e){return 1&e.compareDocumentPosition(I.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,a){if(!a)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),V.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,a){if(!a&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||r(Q,function(e,t,a){var n;if(!a)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),t}(e);ue.find=be,ue.expr=be.selectors,ue.expr[":"]=ue.expr.pseudos,ue.uniqueSort=ue.unique=be.uniqueSort,ue.text=be.getText,ue.isXMLDoc=be.isXML,ue.contains=be.contains,ue.escapeSelector=be.escape;var ge=function(e,t,a){for(var n=[],i=void 0!==a;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&ue(e).is(a))break;n.push(e)}return n},Ve=function(e,t){for(var a=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&a.push(e);return a},Se=ue.expr.match.needsContext,xe=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,_e=/^.[^:#\[\.,]*$/;ue.filter=function(e,t,a){var n=t[0];return a&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?ue.find.matchesSelector(n,e)?[n]:[]:ue.find.matches(e,ue.grep(t,function(e){return 1===e.nodeType}))},ue.fn.extend({find:function(e){var t,a,n=this.length,i=this;if("string"!=typeof e)return this.pushStack(ue(e).filter(function(){for(t=0;t<n;t++)if(ue.contains(i[t],this))return!0}));for(a=this.pushStack([]),t=0;t<n;t++)ue.find(e,i[t],a);return n>1?ue.uniqueSort(a):a},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&Se.test(e)?ue(e):e||[],!1).length}});var we,Ne=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(ue.fn.init=function(e,t,a){var n,i;if(!e)return this;if(a=a||we,"string"==typeof e){if(!(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ne.exec(e))||!n[1]&&t)return!t||t.jquery?(t||a).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof ue?t[0]:t,ue.merge(this,ue.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),xe.test(n[1])&&ue.isPlainObject(t))for(n in t)ue.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(i=te.getElementById(n[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):ue.isFunction(e)?void 0!==a.ready?a.ready(e):e(ue):ue.makeArray(e,this)}).prototype=ue.fn,we=ue(te);var Te=/^(?:parents|prev(?:Until|All))/,Ce={children:!0,contents:!0,next:!0,prev:!0};ue.fn.extend({has:function(e){var t=ue(e,this),a=t.length;return this.filter(function(){for(var e=0;e<a;e++)if(ue.contains(this,t[e]))return!0})},closest:function(e,t){var a,n=0,i=this.length,r=[],o="string"!=typeof e&&ue(e);if(!Se.test(e))for(;n<i;n++)for(a=this[n];a&&a!==t;a=a.parentNode)if(a.nodeType<11&&(o?o.index(a)>-1:1===a.nodeType&&ue.find.matchesSelector(a,e))){r.push(a);break}return this.pushStack(r.length>1?ue.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?oe.call(ue(e),this[0]):oe.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ue.uniqueSort(ue.merge(this.get(),ue(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ue.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ge(e,"parentNode")},parentsUntil:function(e,t,a){return ge(e,"parentNode",a)},next:function(e){return o(e,"nextSibling")},prev:function(e){return o(e,"previousSibling")},nextAll:function(e){return ge(e,"nextSibling")},prevAll:function(e){return ge(e,"previousSibling")},nextUntil:function(e,t,a){return ge(e,"nextSibling",a)},prevUntil:function(e,t,a){return ge(e,"previousSibling",a)},siblings:function(e){return Ve((e.parentNode||{}).firstChild,e)},children:function(e){return Ve(e.firstChild)},contents:function(e){return i(e,"iframe")?e.contentDocument:(i(e,"template")&&(e=e.content||e),ue.merge([],e.childNodes))}},function(e,t){ue.fn[e]=function(a,n){var i=ue.map(this,t,a);return"Until"!==e.slice(-5)&&(n=a),n&&"string"==typeof n&&(i=ue.filter(n,i)),this.length>1&&(Ce[e]||ue.uniqueSort(i),Te.test(e)&&i.reverse()),this.pushStack(i)}});var Ge=/[^\x20\t\r\n\f]+/g;ue.Callbacks=function(e){e="string"==typeof e?s(e):ue.extend({},e);var t,a,n,i,r=[],o=[],l=-1,c=function(){for(i=i||e.once,n=t=!0;o.length;l=-1)for(a=o.shift();++l<r.length;)!1===r[l].apply(a[0],a[1])&&e.stopOnFalse&&(l=r.length,a=!1);e.memory||(a=!1),t=!1,i&&(r=a?[]:"")},d={add:function(){return r&&(a&&!t&&(l=r.length-1,o.push(a)),function t(a){ue.each(a,function(a,n){ue.isFunction(n)?e.unique&&d.has(n)||r.push(n):n&&n.length&&"string"!==ue.type(n)&&t(n)})}(arguments),a&&!t&&c()),this},remove:function(){return ue.each(arguments,function(e,t){for(var a;(a=ue.inArray(t,r,a))>-1;)r.splice(a,1),a<=l&&l--}),this},has:function(e){return e?ue.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return i=o=[],r=a="",this},disabled:function(){return!r},lock:function(){return i=o=[],a||t||(r=a=""),this},locked:function(){return!!i},fireWith:function(e,a){return i||(a=[e,(a=a||[]).slice?a.slice():a],o.push(a),t||c()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!n}};return d},ue.extend({Deferred:function(t){var a=[["notify","progress",ue.Callbacks("memory"),ue.Callbacks("memory"),2],["resolve","done",ue.Callbacks("once memory"),ue.Callbacks("once memory"),0,"resolved"],["reject","fail",ue.Callbacks("once memory"),ue.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return ue.Deferred(function(t){ue.each(a,function(a,n){var i=ue.isFunction(e[n[4]])&&e[n[4]];r[n[1]](function(){var e=i&&i.apply(this,arguments);e&&ue.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[n[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,n,i){function r(t,a,n,i){return function(){var s=this,d=arguments,m=function(){var e,m;if(!(t<o)){if((e=n.apply(s,d))===a.promise())throw new TypeError("Thenable self-resolution");m=e&&("object"==typeof e||"function"==typeof e)&&e.then,ue.isFunction(m)?i?m.call(e,r(o,a,l,i),r(o,a,c,i)):(o++,m.call(e,r(o,a,l,i),r(o,a,c,i),r(o,a,l,a.notifyWith))):(n!==l&&(s=void 0,d=[e]),(i||a.resolveWith)(s,d))}},p=i?m:function(){try{m()}catch(e){ue.Deferred.exceptionHook&&ue.Deferred.exceptionHook(e,p.stackTrace),t+1>=o&&(n!==c&&(s=void 0,d=[e]),a.rejectWith(s,d))}};t?p():(ue.Deferred.getStackHook&&(p.stackTrace=ue.Deferred.getStackHook()),e.setTimeout(p))}}var o=0;return ue.Deferred(function(e){a[0][3].add(r(0,e,ue.isFunction(i)?i:l,e.notifyWith)),a[1][3].add(r(0,e,ue.isFunction(t)?t:l)),a[2][3].add(r(0,e,ue.isFunction(n)?n:c))}).promise()},promise:function(e){return null!=e?ue.extend(e,i):i}},r={};return ue.each(a,function(e,t){var o=t[2],s=t[5];i[t[1]]=o.add,s&&o.add(function(){n=s},a[3-e][2].disable,a[0][2].lock),o.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=o.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,a=t,n=Array(a),i=ne.call(arguments),r=ue.Deferred(),o=function(e){return function(a){n[e]=this,i[e]=arguments.length>1?ne.call(arguments):a,--t||r.resolveWith(n,i)}};if(t<=1&&(d(e,r.done(o(a)).resolve,r.reject,!t),"pending"===r.state()||ue.isFunction(i[a]&&i[a].then)))return r.then();for(;a--;)d(i[a],o(a),r.reject);return r.promise()}});var Ae=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ue.Deferred.exceptionHook=function(t,a){e.console&&e.console.warn&&t&&Ae.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,a)},ue.readyException=function(t){e.setTimeout(function(){throw t})};var ke=ue.Deferred();ue.fn.ready=function(e){return ke.then(e).catch(function(e){ue.readyException(e)}),this},ue.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--ue.readyWait:ue.isReady)||(ue.isReady=!0,!0!==e&&--ue.readyWait>0||ke.resolveWith(te,[ue]))}}),ue.ready.then=ke.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(ue.ready):(te.addEventListener("DOMContentLoaded",m),e.addEventListener("load",m));var Ie=function(e,t,a,n,i,r,o){var s=0,l=e.length,c=null==a;if("object"===ue.type(a)){i=!0;for(s in a)Ie(e,t,s,a[s],!0,r,o)}else if(void 0!==n&&(i=!0,ue.isFunction(n)||(o=!0),c&&(o?(t.call(e,n),t=null):(c=t,t=function(e,t,a){return c.call(ue(e),a)})),t))for(;s<l;s++)t(e[s],a,o?n:n.call(e[s],s,t(e[s],a)));return i?e:c?t.call(e):l?t(e[0],a):r},Pe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};p.uid=1,p.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Pe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,a){var n,i=this.cache(e);if("string"==typeof t)i[ue.camelCase(t)]=a;else for(n in t)i[ue.camelCase(n)]=t[n];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][ue.camelCase(t)]},access:function(e,t,a){return void 0===t||t&&"string"==typeof t&&void 0===a?this.get(e,t):(this.set(e,t,a),void 0!==a?a:t)},remove:function(e,t){var a,n=e[this.expando];if(void 0!==n){if(void 0!==t){a=(t=Array.isArray(t)?t.map(ue.camelCase):(t=ue.camelCase(t))in n?[t]:t.match(Ge)||[]).length;for(;a--;)delete n[t[a]]}(void 0===t||ue.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ue.isEmptyObject(t)}};var Re=new p,De=new p,Me=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ee=/[A-Z]/g;ue.extend({hasData:function(e){return De.hasData(e)||Re.hasData(e)},data:function(e,t,a){return De.access(e,t,a)},removeData:function(e,t){De.remove(e,t)},_data:function(e,t,a){return Re.access(e,t,a)},_removeData:function(e,t){Re.remove(e,t)}}),ue.fn.extend({data:function(e,t){var a,n,i,r=this[0],o=r&&r.attributes;if(void 0===e){if(this.length&&(i=De.get(r),1===r.nodeType&&!Re.get(r,"hasDataAttrs"))){for(a=o.length;a--;)o[a]&&0===(n=o[a].name).indexOf("data-")&&(n=ue.camelCase(n.slice(5)),h(r,n,i[n]));Re.set(r,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){De.set(this,e)}):Ie(this,function(t){var a;if(r&&void 0===t){if(void 0!==(a=De.get(r,e)))return a;if(void 0!==(a=h(r,e)))return a}else this.each(function(){De.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){De.remove(this,e)})}}),ue.extend({queue:function(e,t,a){var n;if(e)return t=(t||"fx")+"queue",n=Re.get(e,t),a&&(!n||Array.isArray(a)?n=Re.access(e,t,ue.makeArray(a)):n.push(a)),n||[]},dequeue:function(e,t){t=t||"fx";var a=ue.queue(e,t),n=a.length,i=a.shift(),r=ue._queueHooks(e,t);"inprogress"===i&&(i=a.shift(),n--),i&&("fx"===t&&a.unshift("inprogress"),delete r.stop,i.call(e,function(){ue.dequeue(e,t)},r)),!n&&r&&r.empty.fire()},_queueHooks:function(e,t){var a=t+"queueHooks";return Re.get(e,a)||Re.access(e,a,{empty:ue.Callbacks("once memory").add(function(){Re.remove(e,[t+"queue",a])})})}}),ue.fn.extend({queue:function(e,t){var a=2;return"string"!=typeof e&&(t=e,e="fx",a--),arguments.length<a?ue.queue(this[0],e):void 0===t?this:this.each(function(){var a=ue.queue(this,e,t);ue._queueHooks(this,e),"fx"===e&&"inprogress"!==a[0]&&ue.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ue.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var a,n=1,i=ue.Deferred(),r=this,o=this.length,s=function(){--n||i.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(a=Re.get(r[o],e+"queueHooks"))&&a.empty&&(n++,a.empty.add(s));return s(),i.promise(t)}});var Fe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Oe=new RegExp("^(?:([+-])=|)("+Fe+")([a-z%]*)$","i"),Le=["Top","Right","Bottom","Left"],Be=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ue.contains(e.ownerDocument,e)&&"none"===ue.css(e,"display")},je=function(e,t,a,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];i=a.apply(e,n||[]);for(r in t)e.style[r]=o[r];return i},We={};ue.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Be(this)?ue(this).show():ue(this).hide()})}});var He=/^(?:checkbox|radio)$/i,Ue=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,qe=/^$|\/(?:java|ecma)script/i,ze={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ze.optgroup=ze.option,ze.tbody=ze.tfoot=ze.colgroup=ze.caption=ze.thead,ze.th=ze.td;var Xe=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment().appendChild(te.createElement("div")),t=te.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),pe.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ye=te.documentElement,Ke=/^key/,Ze=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,$e=/^([^.]*)(?:\.(.+)|)/;ue.event={global:{},add:function(e,t,a,n,i){var r,o,s,l,c,d,m,p,u,h,f,y=Re.get(e);if(y)for(a.handler&&(a=(r=a).handler,i=r.selector),i&&ue.find.matchesSelector(Ye,i),a.guid||(a.guid=ue.guid++),(l=y.events)||(l=y.events={}),(o=y.handle)||(o=y.handle=function(t){return void 0!==ue&&ue.event.triggered!==t.type?ue.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(Ge)||[""]).length;c--;)u=f=(s=$e.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),u&&(m=ue.event.special[u]||{},u=(i?m.delegateType:m.bindType)||u,m=ue.event.special[u]||{},d=ue.extend({type:u,origType:f,data:n,handler:a,guid:a.guid,selector:i,needsContext:i&&ue.expr.match.needsContext.test(i),namespace:h.join(".")},r),(p=l[u])||((p=l[u]=[]).delegateCount=0,m.setup&&!1!==m.setup.call(e,n,h,o)||e.addEventListener&&e.addEventListener(u,o)),m.add&&(m.add.call(e,d),d.handler.guid||(d.handler.guid=a.guid)),i?p.splice(p.delegateCount++,0,d):p.push(d),ue.event.global[u]=!0)},remove:function(e,t,a,n,i){var r,o,s,l,c,d,m,p,u,h,f,y=Re.hasData(e)&&Re.get(e);if(y&&(l=y.events)){for(c=(t=(t||"").match(Ge)||[""]).length;c--;)if(s=$e.exec(t[c])||[],u=f=s[1],h=(s[2]||"").split(".").sort(),u){for(m=ue.event.special[u]||{},p=l[u=(n?m.delegateType:m.bindType)||u]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=r=p.length;r--;)d=p[r],!i&&f!==d.origType||a&&a.guid!==d.guid||s&&!s.test(d.namespace)||n&&n!==d.selector&&("**"!==n||!d.selector)||(p.splice(r,1),d.selector&&p.delegateCount--,m.remove&&m.remove.call(e,d));o&&!p.length&&(m.teardown&&!1!==m.teardown.call(e,h,y.handle)||ue.removeEvent(e,u,y.handle),delete l[u])}else for(u in l)ue.event.remove(e,u+t[c],a,n,!0);ue.isEmptyObject(l)&&Re.remove(e,"handle events")}},dispatch:function(e){var t,a,n,i,r,o,s=ue.event.fix(e),l=new Array(arguments.length),c=(Re.get(this,"events")||{})[s.type]||[],d=ue.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,s)){for(o=ue.event.handlers.call(this,s,c),t=0;(i=o[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,a=0;(r=i.handlers[a++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(r.namespace)||(s.handleObj=r,s.data=r.data,void 0!==(n=((ue.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,l))&&!1===(s.result=n)&&(s.preventDefault(),s.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,s),s.result}},handlers:function(e,t){var a,n,i,r,o,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],o={},a=0;a<l;a++)void 0===o[i=(n=t[a]).selector+" "]&&(o[i]=n.needsContext?ue(i,this).index(c)>-1:ue.find(i,this,null,[c]).length),o[i]&&r.push(n);r.length&&s.push({elem:c,handlers:r})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(ue.Event.prototype,e,{enumerable:!0,configurable:!0,get:ue.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[ue.expando]?e:new ue.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==_()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===_()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&i(this,"input"))return this.click(),!1},_default:function(e){return i(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ue.removeEvent=function(e,t,a){e.removeEventListener&&e.removeEventListener(t,a)},ue.Event=function(e,t){if(!(this instanceof ue.Event))return new ue.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?S:x,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&ue.extend(this,t),this.timeStamp=e&&e.timeStamp||ue.now(),this[ue.expando]=!0},ue.Event.prototype={constructor:ue.Event,isDefaultPrevented:x,isPropagationStopped:x,isImmediatePropagationStopped:x,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=S,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=S,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=S,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ue.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ke.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ze.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},ue.event.addProp),ue.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ue.event.special[e]={delegateType:t,bindType:t,handle:function(e){var a,n=this,i=e.relatedTarget,r=e.handleObj;return i&&(i===n||ue.contains(n,i))||(e.type=r.origType,a=r.handler.apply(this,arguments),e.type=t),a}}}),ue.fn.extend({on:function(e,t,a,n){return w(this,e,t,a,n)},one:function(e,t,a,n){return w(this,e,t,a,n,1)},off:function(e,t,a){var n,i;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,ue(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(a=t,t=void 0),!1===a&&(a=x),this.each(function(){ue.event.remove(this,e,a,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Qe=/<script|<style|<link/i,et=/checked\s*(?:[^=]|=\s*.checked.)/i,tt=/^true\/(.*)/,at=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ue.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,a){var n,i,r,o,s=e.cloneNode(!0),l=ue.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ue.isXMLDoc(e)))for(o=b(s),n=0,i=(r=b(e)).length;n<i;n++)A(r[n],o[n]);if(t)if(a)for(r=r||b(e),o=o||b(s),n=0,i=r.length;n<i;n++)G(r[n],o[n]);else G(e,s);return(o=b(s,"script")).length>0&&g(o,!l&&b(e,"script")),s},cleanData:function(e){for(var t,a,n,i=ue.event.special,r=0;void 0!==(a=e[r]);r++)if(Pe(a)){if(t=a[Re.expando]){if(t.events)for(n in t.events)i[n]?ue.event.remove(a,n):ue.removeEvent(a,n,t.handle);a[Re.expando]=void 0}a[De.expando]&&(a[De.expando]=void 0)}}}),ue.fn.extend({detach:function(e){return I(this,e,!0)},remove:function(e){return I(this,e)},text:function(e){return Ie(this,function(e){return void 0===e?ue.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return k(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||N(this,e).appendChild(e)})},prepend:function(){return k(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=N(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return k(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return k(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ue.cleanData(b(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ue.clone(this,e,t)})},html:function(e){return Ie(this,function(e){var t=this[0]||{},a=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Qe.test(e)&&!ze[(Ue.exec(e)||["",""])[1].toLowerCase()]){e=ue.htmlPrefilter(e);try{for(;a<n;a++)1===(t=this[a]||{}).nodeType&&(ue.cleanData(b(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return k(this,arguments,function(t){var a=this.parentNode;ue.inArray(this,e)<0&&(ue.cleanData(b(this)),a&&a.replaceChild(t,this))},e)}}),ue.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ue.fn[e]=function(e){for(var a,n=[],i=ue(e),r=i.length-1,o=0;o<=r;o++)a=o===r?this:this.clone(!0),ue(i[o])[t](a),re.apply(n,a.get());return this.pushStack(n)}});var nt=/^margin/,it=new RegExp("^("+Fe+")(?!px)[a-z%]+$","i"),rt=function(t){var a=t.ownerDocument.defaultView;return a&&a.opener||(a=e),a.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ye.appendChild(o);var t=e.getComputedStyle(s);a="1%"!==t.top,r="2px"===t.marginLeft,n="4px"===t.width,s.style.marginRight="50%",i="4px"===t.marginRight,Ye.removeChild(o),s=null}}var a,n,i,r,o=te.createElement("div"),s=te.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===s.style.backgroundClip,o.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",o.appendChild(s),ue.extend(pe,{pixelPosition:function(){return t(),a},boxSizingReliable:function(){return t(),n},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),r}}))}();var ot=/^(none|table(?!-c[ea]).+)/,st=/^--/,lt={position:"absolute",visibility:"hidden",display:"block"},ct={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],mt=te.createElement("div").style;ue.extend({cssHooks:{opacity:{get:function(e,t){if(t){var a=P(e,"opacity");return""===a?"1":a}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,a,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,r,o,s=ue.camelCase(t),l=st.test(t),c=e.style;if(l||(t=M(s)),o=ue.cssHooks[t]||ue.cssHooks[s],void 0===a)return o&&"get"in o&&void 0!==(i=o.get(e,!1,n))?i:c[t];"string"==(r=typeof a)&&(i=Oe.exec(a))&&i[1]&&(a=f(e,t,i),r="number"),null!=a&&a===a&&("number"===r&&(a+=i&&i[3]||(ue.cssNumber[s]?"":"px")),pe.clearCloneStyle||""!==a||0!==t.indexOf("background")||(c[t]="inherit"),o&&"set"in o&&void 0===(a=o.set(e,a,n))||(l?c.setProperty(t,a):c[t]=a))}},css:function(e,t,a,n){var i,r,o,s=ue.camelCase(t);return st.test(t)||(t=M(s)),(o=ue.cssHooks[t]||ue.cssHooks[s])&&"get"in o&&(i=o.get(e,!0,a)),void 0===i&&(i=P(e,t,n)),"normal"===i&&t in ct&&(i=ct[t]),""===a||a?(r=parseFloat(i),!0===a||isFinite(r)?r||0:i):i}}),ue.each(["height","width"],function(e,t){ue.cssHooks[t]={get:function(e,a,n){if(a)return!ot.test(ue.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?O(e,t,n):je(e,lt,function(){return O(e,t,n)})},set:function(e,a,n){var i,r=n&&rt(e),o=n&&F(e,t,n,"border-box"===ue.css(e,"boxSizing",!1,r),r);return o&&(i=Oe.exec(a))&&"px"!==(i[3]||"px")&&(e.style[t]=a,a=ue.css(e,t)),E(e,a,o)}}}),ue.cssHooks.marginLeft=R(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(P(e,"marginLeft"))||e.getBoundingClientRect().left-je(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ue.each({margin:"",padding:"",border:"Width"},function(e,t){ue.cssHooks[e+t]={expand:function(a){for(var n=0,i={},r="string"==typeof a?a.split(" "):[a];n<4;n++)i[e+Le[n]+t]=r[n]||r[n-2]||r[0];return i}},nt.test(e)||(ue.cssHooks[e+t].set=E)}),ue.fn.extend({css:function(e,t){return Ie(this,function(e,t,a){var n,i,r={},o=0;if(Array.isArray(t)){for(n=rt(e),i=t.length;o<i;o++)r[t[o]]=ue.css(e,t[o],!1,n);return r}return void 0!==a?ue.style(e,t,a):ue.css(e,t)},e,t,arguments.length>1)}}),ue.Tween=L,L.prototype={constructor:L,init:function(e,t,a,n,i,r){this.elem=e,this.prop=a,this.easing=i||ue.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=r||(ue.cssNumber[a]?"":"px")},cur:function(){var e=L.propHooks[this.prop];return e&&e.get?e.get(this):L.propHooks._default.get(this)},run:function(e){var t,a=L.propHooks[this.prop];return this.options.duration?this.pos=t=ue.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),a&&a.set?a.set(this):L.propHooks._default.set(this),this}},L.prototype.init.prototype=L.prototype,L.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ue.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){ue.fx.step[e.prop]?ue.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[ue.cssProps[e.prop]]&&!ue.cssHooks[e.prop]?e.elem[e.prop]=e.now:ue.style(e.elem,e.prop,e.now+e.unit)}}},L.propHooks.scrollTop=L.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ue.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ue.fx=L.prototype.init,ue.fx.step={};var pt,ut,ht=/^(?:toggle|show|hide)$/,ft=/queueHooks$/;ue.Animation=ue.extend(q,{tweeners:{"*":[function(e,t){var a=this.createTween(e,t);return f(a.elem,e,Oe.exec(t),a),a}]},tweener:function(e,t){ue.isFunction(e)?(t=e,e=["*"]):e=e.match(Ge);for(var a,n=0,i=e.length;n<i;n++)a=e[n],q.tweeners[a]=q.tweeners[a]||[],q.tweeners[a].unshift(t)},prefilters:[function(e,t,a){var n,i,r,o,s,l,c,d,m="width"in t||"height"in t,p=this,u={},h=e.style,f=e.nodeType&&Be(e),y=Re.get(e,"fxshow");a.queue||(null==(o=ue._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,p.always(function(){p.always(function(){o.unqueued--,ue.queue(e,"fx").length||o.empty.fire()})}));for(n in t)if(i=t[n],ht.test(i)){if(delete t[n],r=r||"toggle"===i,i===(f?"hide":"show")){if("show"!==i||!y||void 0===y[n])continue;f=!0}u[n]=y&&y[n]||ue.style(e,n)}if((l=!ue.isEmptyObject(t))||!ue.isEmptyObject(u)){m&&1===e.nodeType&&(a.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=y&&y.display)&&(c=Re.get(e,"display")),"none"===(d=ue.css(e,"display"))&&(c?d=c:(v([e],!0),c=e.style.display||c,d=ue.css(e,"display"),v([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===ue.css(e,"float")&&(l||(p.done(function(){h.display=c}),null==c&&(d=h.display,c="none"===d?"":d)),h.display="inline-block")),a.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=a.overflow[0],h.overflowX=a.overflow[1],h.overflowY=a.overflow[2]})),l=!1;for(n in u)l||(y?"hidden"in y&&(f=y.hidden):y=Re.access(e,"fxshow",{display:c}),r&&(y.hidden=!f),f&&v([e],!0),p.done(function(){f||v([e]),Re.remove(e,"fxshow");for(n in u)ue.style(e,n,u[n])})),l=H(f?y[n]:0,n,p),n in y||(y[n]=l.start,f&&(l.end=l.start,l.start=0))}}],prefilter:function(e,t){t?q.prefilters.unshift(e):q.prefilters.push(e)}}),ue.speed=function(e,t,a){var n=e&&"object"==typeof e?ue.extend({},e):{complete:a||!a&&t||ue.isFunction(e)&&e,duration:e,easing:a&&t||t&&!ue.isFunction(t)&&t};return ue.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in ue.fx.speeds?n.duration=ue.fx.speeds[n.duration]:n.duration=ue.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){ue.isFunction(n.old)&&n.old.call(this),n.queue&&ue.dequeue(this,n.queue)},n},ue.fn.extend({fadeTo:function(e,t,a,n){return this.filter(Be).css("opacity",0).show().end().animate({opacity:t},e,a,n)},animate:function(e,t,a,n){var i=ue.isEmptyObject(e),r=ue.speed(t,a,n),o=function(){var t=q(this,ue.extend({},e),r);(i||Re.get(this,"finish"))&&t.stop(!0)};return o.finish=o,i||!1===r.queue?this.each(o):this.queue(r.queue,o)},stop:function(e,t,a){var n=function(e){var t=e.stop;delete e.stop,t(a)};return"string"!=typeof e&&(a=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",r=ue.timers,o=Re.get(this);if(i)o[i]&&o[i].stop&&n(o[i]);else for(i in o)o[i]&&o[i].stop&&ft.test(i)&&n(o[i]);for(i=r.length;i--;)r[i].elem!==this||null!=e&&r[i].queue!==e||(r[i].anim.stop(a),t=!1,r.splice(i,1));!t&&a||ue.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,a=Re.get(this),n=a[e+"queue"],i=a[e+"queueHooks"],r=ue.timers,o=n?n.length:0;for(a.finish=!0,ue.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<o;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete a.finish})}}),ue.each(["toggle","show","hide"],function(e,t){var a=ue.fn[t];ue.fn[t]=function(e,n,i){return null==e||"boolean"==typeof e?a.apply(this,arguments):this.animate(W(t,!0),e,n,i)}}),ue.each({slideDown:W("show"),slideUp:W("hide"),slideToggle:W("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ue.fn[e]=function(e,a,n){return this.animate(t,e,a,n)}}),ue.timers=[],ue.fx.tick=function(){var e,t=0,a=ue.timers;for(pt=ue.now();t<a.length;t++)(e=a[t])()||a[t]!==e||a.splice(t--,1);a.length||ue.fx.stop(),pt=void 0},ue.fx.timer=function(e){ue.timers.push(e),ue.fx.start()},ue.fx.interval=13,ue.fx.start=function(){ut||(ut=!0,B())},ue.fx.stop=function(){ut=null},ue.fx.speeds={slow:600,fast:200,_default:400},ue.fn.delay=function(t,a){return t=ue.fx?ue.fx.speeds[t]||t:t,a=a||"fx",this.queue(a,function(a,n){var i=e.setTimeout(a,t);n.stop=function(){e.clearTimeout(i)}})},function(){var e=te.createElement("input"),t=te.createElement("select").appendChild(te.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=t.selected,(e=te.createElement("input")).value="t",e.type="radio",pe.radioValue="t"===e.value}();var yt,vt=ue.expr.attrHandle;ue.fn.extend({attr:function(e,t){return Ie(this,ue.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ue.removeAttr(this,e)})}}),ue.extend({attr:function(e,t,a){var n,i,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?ue.prop(e,t,a):(1===r&&ue.isXMLDoc(e)||(i=ue.attrHooks[t.toLowerCase()]||(ue.expr.match.bool.test(t)?yt:void 0)),void 0!==a?null===a?void ue.removeAttr(e,t):i&&"set"in i&&void 0!==(n=i.set(e,a,t))?n:(e.setAttribute(t,a+""),a):i&&"get"in i&&null!==(n=i.get(e,t))?n:(n=ue.find.attr(e,t),null==n?void 0:n))},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&i(e,"input")){var a=e.value;return e.setAttribute("type",t),a&&(e.value=a),t}}}},removeAttr:function(e,t){var a,n=0,i=t&&t.match(Ge);if(i&&1===e.nodeType)for(;a=i[n++];)e.removeAttribute(a)}}),yt={set:function(e,t,a){return!1===t?ue.removeAttr(e,a):e.setAttribute(a,a),a}},ue.each(ue.expr.match.bool.source.match(/\w+/g),function(e,t){var a=vt[t]||ue.find.attr;vt[t]=function(e,t,n){var i,r,o=t.toLowerCase();return n||(r=vt[o],vt[o]=i,i=null!=a(e,t,n)?o:null,vt[o]=r),i}});var bt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;ue.fn.extend({prop:function(e,t){return Ie(this,ue.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[ue.propFix[e]||e]})}}),ue.extend({prop:function(e,t,a){var n,i,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&ue.isXMLDoc(e)||(t=ue.propFix[t]||t,i=ue.propHooks[t]),void 0!==a?i&&"set"in i&&void 0!==(n=i.set(e,a,t))?n:e[t]=a:i&&"get"in i&&null!==(n=i.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=ue.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(ue.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ue.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ue.propFix[this.toLowerCase()]=this}),ue.fn.extend({addClass:function(e){var t,a,n,i,r,o,s,l=0;if(ue.isFunction(e))return this.each(function(t){ue(this).addClass(e.call(this,t,X(this)))});if("string"==typeof e&&e)for(t=e.match(Ge)||[];a=this[l++];)if(i=X(a),n=1===a.nodeType&&" "+z(i)+" "){for(o=0;r=t[o++];)n.indexOf(" "+r+" ")<0&&(n+=r+" ");i!==(s=z(n))&&a.setAttribute("class",s)}return this},removeClass:function(e){var t,a,n,i,r,o,s,l=0;if(ue.isFunction(e))return this.each(function(t){ue(this).removeClass(e.call(this,t,X(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ge)||[];a=this[l++];)if(i=X(a),n=1===a.nodeType&&" "+z(i)+" "){for(o=0;r=t[o++];)for(;n.indexOf(" "+r+" ")>-1;)n=n.replace(" "+r+" "," ");i!==(s=z(n))&&a.setAttribute("class",s)}return this},toggleClass:function(e,t){var a=typeof e;return"boolean"==typeof t&&"string"===a?t?this.addClass(e):this.removeClass(e):ue.isFunction(e)?this.each(function(a){ue(this).toggleClass(e.call(this,a,X(this),t),t)}):this.each(function(){var t,n,i,r;if("string"===a)for(n=0,i=ue(this),r=e.match(Ge)||[];t=r[n++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==a||((t=X(this))&&Re.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Re.get(this,"__className__")||""))})},hasClass:function(e){var t,a,n=0;for(t=" "+e+" ";a=this[n++];)if(1===a.nodeType&&(" "+z(X(a))+" ").indexOf(t)>-1)return!0;return!1}});var Vt=/\r/g;ue.fn.extend({val:function(e){var t,a,n,i=this[0];{if(arguments.length)return n=ue.isFunction(e),this.each(function(a){var i;1===this.nodeType&&(null==(i=n?e.call(this,a,ue(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=ue.map(i,function(e){return null==e?"":e+""})),(t=ue.valHooks[this.type]||ue.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=ue.valHooks[i.type]||ue.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(a=t.get(i,"value"))?a:(a=i.value,"string"==typeof a?a.replace(Vt,""):null==a?"":a)}}}),ue.extend({valHooks:{option:{get:function(e){var t=ue.find.attr(e,"value");return null!=t?t:z(ue.text(e))}},select:{get:function(e){var t,a,n,r=e.options,o=e.selectedIndex,s="select-one"===e.type,l=s?null:[],c=s?o+1:r.length;for(n=o<0?c:s?o:0;n<c;n++)if(((a=r[n]).selected||n===o)&&!a.disabled&&(!a.parentNode.disabled||!i(a.parentNode,"optgroup"))){if(t=ue(a).val(),s)return t;l.push(t)}return l},set:function(e,t){for(var a,n,i=e.options,r=ue.makeArray(t),o=i.length;o--;)((n=i[o]).selected=ue.inArray(ue.valHooks.option.get(n),r)>-1)&&(a=!0);return a||(e.selectedIndex=-1),r}}}}),ue.each(["radio","checkbox"],function(){ue.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=ue.inArray(ue(e).val(),t)>-1}},pe.checkOn||(ue.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var St=/^(?:focusinfocus|focusoutblur)$/;ue.extend(ue.event,{trigger:function(t,a,n,i){var r,o,s,l,c,d,m,p=[n||te],u=ce.call(t,"type")?t.type:t,h=ce.call(t,"namespace")?t.namespace.split("."):[];if(o=s=n=n||te,3!==n.nodeType&&8!==n.nodeType&&!St.test(u+ue.event.triggered)&&(u.indexOf(".")>-1&&(u=(h=u.split(".")).shift(),h.sort()),c=u.indexOf(":")<0&&"on"+u,t=t[ue.expando]?t:new ue.Event(u,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),a=null==a?[t]:ue.makeArray(a,[t]),m=ue.event.special[u]||{},i||!m.trigger||!1!==m.trigger.apply(n,a))){if(!i&&!m.noBubble&&!ue.isWindow(n)){for(l=m.delegateType||u,St.test(l+u)||(o=o.parentNode);o;o=o.parentNode)p.push(o),s=o;s===(n.ownerDocument||te)&&p.push(s.defaultView||s.parentWindow||e)}for(r=0;(o=p[r++])&&!t.isPropagationStopped();)t.type=r>1?l:m.bindType||u,(d=(Re.get(o,"events")||{})[t.type]&&Re.get(o,"handle"))&&d.apply(o,a),(d=c&&o[c])&&d.apply&&Pe(o)&&(t.result=d.apply(o,a),!1===t.result&&t.preventDefault());return t.type=u,i||t.isDefaultPrevented()||m._default&&!1!==m._default.apply(p.pop(),a)||!Pe(n)||c&&ue.isFunction(n[u])&&!ue.isWindow(n)&&((s=n[c])&&(n[c]=null),ue.event.triggered=u,n[u](),ue.event.triggered=void 0,s&&(n[c]=s)),t.result}},simulate:function(e,t,a){var n=ue.extend(new ue.Event,a,{type:e,isSimulated:!0});ue.event.trigger(n,null,t)}}),ue.fn.extend({trigger:function(e,t){return this.each(function(){ue.event.trigger(e,t,this)})},triggerHandler:function(e,t){var a=this[0];if(a)return ue.event.trigger(e,t,a,!0)}}),ue.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){ue.fn[t]=function(e,a){return arguments.length>0?this.on(t,null,e,a):this.trigger(t)}}),ue.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||ue.each({focus:"focusin",blur:"focusout"},function(e,t){var a=function(e){ue.event.simulate(t,e.target,ue.event.fix(e))};ue.event.special[t]={setup:function(){var n=this.ownerDocument||this,i=Re.access(n,t);i||n.addEventListener(e,a,!0),Re.access(n,t,(i||0)+1)},teardown:function(){var n=this.ownerDocument||this,i=Re.access(n,t)-1;i?Re.access(n,t,i):(n.removeEventListener(e,a,!0),Re.remove(n,t))}}});var xt=e.location,_t=ue.now(),wt=/\?/;ue.parseXML=function(t){var a;if(!t||"string"!=typeof t)return null;try{a=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){a=void 0}return a&&!a.getElementsByTagName("parsererror").length||ue.error("Invalid XML: "+t),a};var Nt=/\[\]$/,Tt=/\r?\n/g,Ct=/^(?:submit|button|image|reset|file)$/i,Gt=/^(?:input|select|textarea|keygen)/i;ue.param=function(e,t){var a,n=[],i=function(e,t){var a=ue.isFunction(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==a?"":a)};if(Array.isArray(e)||e.jquery&&!ue.isPlainObject(e))ue.each(e,function(){i(this.name,this.value)});else for(a in e)Y(a,e[a],t,i);return n.join("&")},ue.fn.extend({serialize:function(){return ue.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ue.prop(this,"elements");return e?ue.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ue(this).is(":disabled")&&Gt.test(this.nodeName)&&!Ct.test(e)&&(this.checked||!He.test(e))}).map(function(e,t){var a=ue(this).val();return null==a?null:Array.isArray(a)?ue.map(a,function(e){return{name:t.name,value:e.replace(Tt,"\r\n")}}):{name:t.name,value:a.replace(Tt,"\r\n")}}).get()}});var At=/%20/g,kt=/#.*$/,It=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Dt=/^(?:GET|HEAD)$/,Mt=/^\/\//,Et={},Ft={},Ot="*/".concat("*"),Lt=te.createElement("a");Lt.href=xt.href,ue.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:Rt.test(xt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ot,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":ue.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?$($(e,ue.ajaxSettings),t):$(ue.ajaxSettings,e)},ajaxPrefilter:K(Et),ajaxTransport:K(Ft),ajax:function(t,a){function n(t,a,n,s){var c,p,u,V,S,x=a;d||(d=!0,l&&e.clearTimeout(l),i=void 0,o=s||"",_.readyState=t>0?4:0,c=t>=200&&t<300||304===t,n&&(V=J(h,_,n)),V=Q(h,V,_,c),c?(h.ifModified&&((S=_.getResponseHeader("Last-Modified"))&&(ue.lastModified[r]=S),(S=_.getResponseHeader("etag"))&&(ue.etag[r]=S)),204===t||"HEAD"===h.type?x="nocontent":304===t?x="notmodified":(x=V.state,p=V.data,c=!(u=V.error))):(u=x,!t&&x||(x="error",t<0&&(t=0))),_.status=t,_.statusText=(a||x)+"",c?v.resolveWith(f,[p,x,_]):v.rejectWith(f,[_,x,u]),_.statusCode(g),g=void 0,m&&y.trigger(c?"ajaxSuccess":"ajaxError",[_,h,c?p:u]),b.fireWith(f,[_,x]),m&&(y.trigger("ajaxComplete",[_,h]),--ue.active||ue.event.trigger("ajaxStop")))}"object"==typeof t&&(a=t,t=void 0),a=a||{};var i,r,o,s,l,c,d,m,p,u,h=ue.ajaxSetup({},a),f=h.context||h,y=h.context&&(f.nodeType||f.jquery)?ue(f):ue.event,v=ue.Deferred(),b=ue.Callbacks("once memory"),g=h.statusCode||{},V={},S={},x="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(d){if(!s)for(s={};t=Pt.exec(o);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return d?o:null},setRequestHeader:function(e,t){return null==d&&(e=S[e.toLowerCase()]=S[e.toLowerCase()]||e,V[e]=t),this},overrideMimeType:function(e){return null==d&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(d)_.always(e[_.status]);else for(t in e)g[t]=[g[t],e[t]];return this},abort:function(e){var t=e||x;return i&&i.abort(t),n(0,t),this}};if(v.promise(_),h.url=((t||h.url||xt.href)+"").replace(Mt,xt.protocol+"//"),h.type=a.method||a.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Ge)||[""],null==h.crossDomain){c=te.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Lt.protocol+"//"+Lt.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=ue.param(h.data,h.traditional)),Z(Et,h,a,_),d)return _;(m=ue.event&&h.global)&&0==ue.active++&&ue.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Dt.test(h.type),r=h.url.replace(kt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(At,"+")):(u=h.url.slice(r.length),h.data&&(r+=(wt.test(r)?"&":"?")+h.data,delete h.data),!1===h.cache&&(r=r.replace(It,"$1"),u=(wt.test(r)?"&":"?")+"_="+_t+++u),h.url=r+u),h.ifModified&&(ue.lastModified[r]&&_.setRequestHeader("If-Modified-Since",ue.lastModified[r]),ue.etag[r]&&_.setRequestHeader("If-None-Match",ue.etag[r])),(h.data&&h.hasContent&&!1!==h.contentType||a.contentType)&&_.setRequestHeader("Content-Type",h.contentType),_.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ot+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)_.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(f,_,h)||d))return _.abort();if(x="abort",b.add(h.complete),_.done(h.success),_.fail(h.error),i=Z(Ft,h,a,_)){if(_.readyState=1,m&&y.trigger("ajaxSend",[_,h]),d)return _;h.async&&h.timeout>0&&(l=e.setTimeout(function(){_.abort("timeout")},h.timeout));try{d=!1,i.send(V,n)}catch(e){if(d)throw e;n(-1,e)}}else n(-1,"No Transport");return _},getJSON:function(e,t,a){return ue.get(e,t,a,"json")},getScript:function(e,t){return ue.get(e,void 0,t,"script")}}),ue.each(["get","post"],function(e,t){ue[t]=function(e,a,n,i){return ue.isFunction(a)&&(i=i||n,n=a,a=void 0),ue.ajax(ue.extend({url:e,type:t,dataType:i,data:a,success:n},ue.isPlainObject(e)&&e))}}),ue._evalUrl=function(e){return ue.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},ue.fn.extend({wrapAll:function(e){var t;return this[0]&&(ue.isFunction(e)&&(e=e.call(this[0])),t=ue(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return ue.isFunction(e)?this.each(function(t){ue(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ue(this),a=t.contents();a.length?a.wrapAll(e):t.append(e)})},wrap:function(e){var t=ue.isFunction(e);return this.each(function(a){ue(this).wrapAll(t?e.call(this,a):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){ue(this).replaceWith(this.childNodes)}),this}}),ue.expr.pseudos.hidden=function(e){return!ue.expr.pseudos.visible(e)},ue.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},ue.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Bt={0:200,1223:204},jt=ue.ajaxSettings.xhr();pe.cors=!!jt&&"withCredentials"in jt,pe.ajax=jt=!!jt,ue.ajaxTransport(function(t){var a,n;if(pe.cors||jt&&!t.crossDomain)return{send:function(i,r){var o,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)s[o]=t.xhrFields[o];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(o in i)s.setRequestHeader(o,i[o]);a=function(e){return function(){a&&(a=n=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?r(0,"error"):r(s.status,s.statusText):r(Bt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=a(),n=s.onerror=a("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){a&&n()})},a=a("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(a)throw e}},abort:function(){a&&a()}}}),ue.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),ue.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ue.globalEval(e),e}}}),ue.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ue.ajaxTransport("script",function(e){if(e.crossDomain){var t,a;return{send:function(n,i){t=ue("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",a=function(e){t.remove(),a=null,e&&i("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){a&&a()}}}});var Wt=[],Ht=/(=)\?(?=&|$)|\?\?/;ue.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Wt.pop()||ue.expando+"_"+_t++;return this[e]=!0,e}}),ue.ajaxPrefilter("json jsonp",function(t,a,n){var i,r,o,s=!1!==t.jsonp&&(Ht.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ht.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=ue.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ht,"$1"+i):!1!==t.jsonp&&(t.url+=(wt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return o||ue.error(i+" was not called"),o[0]},t.dataTypes[0]="json",r=e[i],e[i]=function(){o=arguments},n.always(function(){void 0===r?ue(e).removeProp(i):e[i]=r,t[i]&&(t.jsonpCallback=a.jsonpCallback,Wt.push(i)),o&&ue.isFunction(r)&&r(o[0]),o=r=void 0}),"script"}),pe.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),ue.parseHTML=function(e,t,a){if("string"!=typeof e)return[];"boolean"==typeof t&&(a=t,t=!1);var n,i,r;return t||(pe.createHTMLDocument?((n=(t=te.implementation.createHTMLDocument("")).createElement("base")).href=te.location.href,t.head.appendChild(n)):t=te),i=xe.exec(e),r=!a&&[],i?[t.createElement(i[1])]:(i=V([e],t,r),r&&r.length&&ue(r).remove(),ue.merge([],i.childNodes))},ue.fn.load=function(e,t,a){var n,i,r,o=this,s=e.indexOf(" ");return s>-1&&(n=z(e.slice(s)),e=e.slice(0,s)),ue.isFunction(t)?(a=t,t=void 0):t&&"object"==typeof t&&(i="POST"),o.length>0&&ue.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){r=arguments,o.html(n?ue("<div>").append(ue.parseHTML(e)).find(n):e)}).always(a&&function(e,t){o.each(function(){a.apply(this,r||[e.responseText,t,e])})}),this},ue.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ue.fn[t]=function(e){return this.on(t,e)}}),ue.expr.pseudos.animated=function(e){return ue.grep(ue.timers,function(t){return e===t.elem}).length},ue.offset={setOffset:function(e,t,a){var n,i,r,o,s,l,c=ue.css(e,"position"),d=ue(e),m={};"static"===c&&(e.style.position="relative"),s=d.offset(),r=ue.css(e,"top"),l=ue.css(e,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(o=(n=d.position()).top,i=n.left):(o=parseFloat(r)||0,i=parseFloat(l)||0),ue.isFunction(t)&&(t=t.call(e,a,ue.extend({},s))),null!=t.top&&(m.top=t.top-s.top+o),null!=t.left&&(m.left=t.left-s.left+i),"using"in t?t.using.call(e,m):d.css(m)}},ue.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ue.offset.setOffset(this,e,t)});var t,a,n,i,r=this[0];if(r)return r.getClientRects().length?(n=r.getBoundingClientRect(),t=r.ownerDocument,a=t.documentElement,i=t.defaultView,{top:n.top+i.pageYOffset-a.clientTop,left:n.left+i.pageXOffset-a.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,a=this[0],n={top:0,left:0};return"fixed"===ue.css(a,"position")?t=a.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),i(e[0],"html")||(n=e.offset()),n={top:n.top+ue.css(e[0],"borderTopWidth",!0),left:n.left+ue.css(e[0],"borderLeftWidth",!0)}),{top:t.top-n.top-ue.css(a,"marginTop",!0),left:t.left-n.left-ue.css(a,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===ue.css(e,"position");)e=e.offsetParent;return e||Ye})}}),ue.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var a="pageYOffset"===t;ue.fn[e]=function(n){return Ie(this,function(e,n,i){var r;if(ue.isWindow(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===i)return r?r[t]:e[n];r?r.scrollTo(a?r.pageXOffset:i,a?i:r.pageYOffset):e[n]=i},e,n,arguments.length)}}),ue.each(["top","left"],function(e,t){ue.cssHooks[t]=R(pe.pixelPosition,function(e,a){if(a)return a=P(e,t),it.test(a)?ue(e).position()[t]+"px":a})}),ue.each({Height:"height",Width:"width"},function(e,t){ue.each({padding:"inner"+e,content:t,"":"outer"+e},function(a,n){ue.fn[n]=function(i,r){var o=arguments.length&&(a||"boolean"!=typeof i),s=a||(!0===i||!0===r?"margin":"border");return Ie(this,function(t,a,i){var r;return ue.isWindow(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?ue.css(t,a,s):ue.style(t,a,i,s)},t,o?i:void 0,o)}})}),ue.fn.extend({bind:function(e,t,a){return this.on(e,null,t,a)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,a,n){return this.on(t,e,a,n)},undelegate:function(e,t,a){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",a)}}),ue.holdReady=function(e){e?ue.readyWait++:ue.ready(!0)},ue.isArray=Array.isArray,ue.parseJSON=JSON.parse,ue.nodeName=i,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ue});var Ut=e.jQuery,qt=e.$;return ue.noConflict=function(t){return e.$===ue&&(e.$=qt),t&&e.jQuery===ue&&(e.jQuery=Ut),ue},t||(e.jQuery=e.$=ue),ue})},{}],2:[function(e,t,a){t.exports=[{_id:0,functionName:"ActivateClientExploder",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Activates a client side exploder. This is sent as a reliable command, and will not work with killcam or demos.",example:"ActivateClientExploder( 101 )",variables:[{name:"exploder id",mandatory:!0,description:"id of exploder to activate"}]},{_id:1,functionName:"ActivateClientRadiantExploder",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Activates a client side radiant exploder",example:'ActivateClientRadiantExploder( "light_switch" )',variables:[{name:"exploder id",mandatory:!0,description:"string id of exploder to activate"}]},{_id:2,functionName:"ActorIKEnabled",returnValue:"bool",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Determines whether this actor can use IK functions. Returns true if IK is available, otherwise false.",example:"if (guy ActorIKEnabled()) ...",variables:[]},{_id:3,functionName:"AddAwarenessIndicator",returnValue:"void",referenceVariable:"",section:"hud",access:"Client",description:"Draw an awareness indicator",example:'AddAwarenessIndicator(ai.origin, "hit_material_green" )',variables:[{name:"pos",mandatory:!0,description:"awareness location"},{name:"material",mandatory:!0,description:"awareness material"}]},{_id:4,functionName:"AddBonusCardStat",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets the indicated stat for that bonus card",example:'self AddBonusCardStat( BONUSCARD_OVERKILL, "kills", 1, self.class_num )',variables:[{name:"bonuscard",mandatory:!0,description:"Bonus Card define from _bonuscards.gsh"},{name:"statname",mandatory:!0,description:"The name of the stat you wish to set"},{name:"statincrease",mandatory:!0,description:"The amount you would like to increase the stat"},{name:"currentclassnum",mandatory:!0,description:"The loadout the player is using"}]},{_id:5,functionName:"AddDemoBookmark",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"adds the information to the demo bookmarking system",example:"AddDemoBookmark( bookmark_string, gettime(), self GetEntityNumber(), 255, 0, inflictorEntNum, inflictorEntType, inflictorBirthTime, false, self.grenade_multiattack_ent GetEntityNumber() )",variables:[{name:"type",mandatory:!0,description:"the type of bookmark"},{name:"time",mandatory:!0,description:"the time of recording the bookmark"},{name:"client1",mandatory:!0,description:"the client related to the bookmark"},{name:"client2",mandatory:!0,description:"other client which is associated with the bookmark"},{name:"scoreEventPriority",mandatory:!0,description:""},{name:"entityNumber",mandatory:!0,description:"The entity number"},{name:"eType",mandatory:!0,description:"Entity type"},{name:"birthTime",mandatory:!0,description:"Birth Time"},{name:"overrideEntityCamera",mandatory:!0,description:"Whether to override Entity Camera"},{name:"actorEntityNumber",mandatory:!1,description:""}]},{_id:6,functionName:"AddEntityInfluencer",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Adds a new influencer of <name> attached to <entity>",example:"influencer_id = AddEntityInfluencer( name, player, allies_mask )",variables:[{name:"name",mandatory:!0,description:"valid spawn influencer preset name."},{name:"entity",mandatory:!0,description:"Attached to entity. Goes away when entity is deleted. Unless a time is set."},{name:"team mask",mandatory:!0,description:"teams that this influencer will affect"}]},{_id:7,functionName:"AddFriendlyScrambler",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Adds new friendly scrambler to the compass",example:"player AddFriendlyScrambler( scrambler.origin[0], scrambler.origin[1], scrambler.handle )",variables:[{name:"x",mandatory:!0,description:"X coord (float)"},{name:"y",mandatory:!0,description:"Y coord (float)"},{name:"handle",mandatory:!0,description:"will be used to remove the scrambler (integer)"}]},{_id:8,functionName:"AddInfluencer",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Adds a new influencer of <name> at <origin>",example:"influencer_id = AddInfluencer( name, origin, allies_mask )",variables:[{name:"name",mandatory:!0,description:"valid spawn influencer preset name."},{name:"origin",mandatory:!0,description:"center point of the influencer"},{name:"team mask",mandatory:!0,description:"teams that this influencer will affect"}]},{_id:9,functionName:"AddOrientedInfluencer",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Adds a new influencer of <name> at <origin> and <angles>",example:"influencer_id = AddOrientedInfluencer( name, origin, angles, allies_mask )",variables:[{name:"name",mandatory:!0,description:"valid spawn influencer preset name."},{name:"origin",mandatory:!0,description:"center point of the influencer"},{name:"angles",mandatory:!0,description:"angles of entity"},{name:"team mask",mandatory:!0,description:"teams that this influencer will affect"}]},{_id:10,functionName:"AddSensorGrenadeArea",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Adds new sensor grenade radius indicator to the compass",example:"player AddSensorGrenadeArea( sensor.origin, sensor.handle )",variables:[{name:"position",mandatory:!0,description:"origin"},{name:"handle",mandatory:!0,description:"will be used to remove the sensor"}]},{_id:11,functionName:"AddSpawnPoints",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Adds spawnpoints to the spawn system",example:'AddSpawnPoints( "allies", "mp_tdm_spawn" )',variables:[{name:"team",mandatory:!0,description:"The team"},{name:"parentID",mandatory:!0,description:""}]},{_id:12,functionName:"AddTestClient",returnValue:"entity",referenceVariable:"",section:"debug",access:"Server",description:"Adds a test client to the map and returns a reference to that client.",example:"ent[i] = AddTestClient()",variables:[]},{_id:13,functionName:"AddToInterestPool",returnValue:"void",referenceVariable:"",section:"ai",access:"Server",description:"Add a script event to the sentient's interest pool.",example:"point = self AddToInterestPool( 500, 10, 5, ai.origin, ai )",variables:[{name:"value",mandatory:!0,description:"Amount the event adds to the pool. (integer)"},{name:"priority",mandatory:!0,description:"How important is the event. (integer)"},{name:"lifespan",mandatory:!0,description:"Time the event stays in the pool. (float)"},{name:"point of interest",mandatory:!0,description:"Position the AI will investigate. (vector3)"},{name:"originator",mandatory:!0,description:"Entity that caused the event."},{name:"unique",mandatory:!1,description:"Only one of this type can exist in the pool. (integer)"}]},{_id:14,functionName:"AddZombieBoxWeapon",returnValue:"void",referenceVariable:"",section:"zombie",access:"Client",description:"Adds a zombie box weapon",example:"AddZombieBoxWeapon( weapon, weapon.worldModel, weapon.isDualWield )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to add"},{name:"weaponModelName",mandatory:!0,description:"The model name of the weapon"},{name:"isDualWield",mandatory:!0,description:"True if the weapon is dual wield, false otherwise"}]},{_id:15,functionName:"AimAtEntityIK",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set this actor to aim at the specified entity. Call this function without any entity specified to turn it off.",example:"guy AimAtEntityIK( otherguy )",variables:[{name:"otherguy",mandatory:!1,description:"the other guy to aim at"}]},{_id:16,functionName:"AimAtPosIK",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set this actor to aim at the specified position. Call this function without any position specified to turn it off.",example:"guy AimAtPosIK( pos )",variables:[{name:"pos",mandatory:!1,description:"the position to aim at"}]},{_id:17,functionName:"AimingAtFriendly",returnValue:"bool",referenceVariable:"",section:"player",access:"Client",description:"Returns true if localclient 0 has crosshairs on friendly",example:"isFriend = AimingAtFriendly()",variables:[]},{_id:18,functionName:"AllClientsPrint",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Cause all clients to print the localized version of this string.",example:'AllClientsPrint( "Game Complete" )',variables:[{name:"string",mandatory:!0,description:"the string to print"}]},{_id:19,functionName:"AllocateSoundRandoms",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Allocate a pool of random sounds",example:"AllocateSoundRandoms(randoms.size - nScriptThreadedRandoms)",variables:[{name:"num randoms",mandatory:!0,description:"number of randoms"}]},{_id:20,functionName:"AllowActionSlotInput",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"always allow action slot input",example:"AllowActionSlotInput(localclientnum)",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the controller you to enable the action slots"}]},{_id:21,functionName:"AllowBotTargetting",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"If false, disallows bots targetting this entity.",example:"my_trigger AllowBotTargetting( false )",variables:[{name:"allow",mandatory:!0,description:"true or false"}]},{_id:22,functionName:"AllowedStances",returnValue:"void",referenceVariable:"<actor_or_player>",section:"ai",access:"Server",description:"Sets the list of the actor's allowed stances.",example:'self AllowedStances( "crouch", "prone" )',variables:[{name:"stance",mandatory:!0,description:"(string) A stance, can be 'prone', 'crouch', 'stand'. Any number of stances may be added."}]},{_id:23,functionName:"AllowRoundAnimation",returnValue:"void",referenceVariable:"",section:"animation",access:"Client",description:"sets the allow round animation flag to enabled or disabled",example:"AllowRoundAnimation( 1 )",variables:[{name:"flag",mandatory:!0,description:"1 to allow, 0 to disallow"}]},{_id:24,functionName:"AllowScoreboard",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"allow scoreboard or not",example:"AllowScoreboard(localclientnum)",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the controller you to enable the action slots"}]},{_id:25,functionName:"AllowTacticalInsertion",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"If false, disallows tactical insertions in the bounding area of this entity. Allows tactical insertions otherwise",example:"my_trigger AllowTacticalInsertion( false )",variables:[{name:"allow",mandatory:!0,description:"true or false"}]},{_id:26,functionName:"AllWeaponAttachmentsUnlocked",returnValue:"bool",referenceVariable:"",section:"weapons",access:"Server",description:"Are all the weapon attachments unlocked for this weapon?",example:"player AllWeaponAttachmentsUnlocked( weapon )",variables:[{name:"weapon",mandatory:!0,description:"weapon"}]},{_id:27,functionName:"AnimHasNotetrack",returnValue:"bool",referenceVariable:"",section:"animation",access:"Server",description:"queries the given animation for a note track",example:'if ( IsDefined( facialanim ) && AnimHasNotetrack( facialanim, "dialogue" ) ) ...',variables:[{name:"animation",mandatory:!0,description:"an animation"},{name:"note track",mandatory:!0,description:"a constant string with the name of the note track"}]},{_id:28,functionName:"AnimMappingSearch",returnValue:"string",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Searches animation mapping table to return a animation name when given a animation mapping alias name.",example:'self AnimMappingSearch("anim_arrive_cover_left_crouch")',variables:[{name:"animation_alias_name",mandatory:!0,description:""}]},{_id:29,functionName:"AnimRelative",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Runs an animscript on an entity.",example:'driver AnimRelative( "germantruck_driver_closedoor", org , angles, driver.closedooranim )',variables:[{name:"notify",mandatory:!0,description:"The notify to send"},{name:"origin",mandatory:!0,description:"The starting position of the anim script"},{name:"angles",mandatory:!0,description:"The starting angle of the anim script"},{name:"animation",mandatory:!0,description:"The animation"},{name:"mode",mandatory:!1,description:'Valid modes are "normal" and "deathplant"'},{name:"root",mandatory:!1,description:"The root animation"}]},{_id:30,functionName:"AnimScripted",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Runs an animscript on an entity.",example:'driver AnimScripted( "germantruck_driver_closedoor", org , angles, driver.closedooranim )',variables:[{name:"notify",mandatory:!0,description:"The notify to send"},{name:"origin",mandatory:!0,description:"The starting position of the anim script"},{name:"angles",mandatory:!0,description:"The starting angle of the anim script"},{name:"animation",mandatory:!0,description:"The animation"},{name:"mode",mandatory:!1,description:'Valid modes are "normal" and "deathplant"'},{name:"root",mandatory:!1,description:"The root animation"},{name:"rate",mandatory:!1,description:"The playback rate of animation"},{name:"blend",mandatory:!1,description:"The blend time for the animation"},{name:"lerp",mandatory:!1,description:"The lerp time for an aligned animation"},{name:"animation time",mandatory:!1,description:"The starting animation time in 0-1 range"},{name:"is_scene_animation",mandatory:!1,description:"Should be true for player scene animations or scripted animations where the player has no control, can be ignored for non-players"},{name:"showPlayerWeaponInFirstPerson",mandatory:!1,description:"determines if the first person player should have his weapon during cinematics"}]},{_id:31,functionName:"Announcement",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Sends an announcement to all clients.",example:null,variables:[{name:"string",mandatory:!0,description:"The announcement."},{name:"duration",mandatory:!0,description:"How long, in seconds, to display the announcement."}]},{_id:32,functionName:"ApplyBallisticTarget",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Launch a vehicle with just enough force at a target.",example:"dropRaps ApplyBallisticTarget( (50,50,10) )",variables:[{name:"targetPos",mandatory:!0,description:"The position to launch the vehicle towards"}]},{_id:33,functionName:"AreAllMissionsAtScore",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if all missions are at the score specified",example:"is_score_achieved = self AreAllMissionsAtScore( 10000 )",variables:[{name:"score",mandatory:!0,description:"A score that all missions must be at to return true (integer)"}]},{_id:34,functionName:"AreMeshesStreamed",returnValue:"bool",referenceVariable:"<entity>",section:"string",access:"Client",description:"Returns true if this entity's meshes are streamed in",example:"thing areMeshesStreamed()",variables:[]},{_id:35,functionName:"ArenaGetCurrentSeason",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Returns the current arena season",example:"ArenaGetCurrentSeason()",variables:[]},{_id:36,functionName:"ArenaGetSlot",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns the current arena slot",example:"ArenaGetSlot()",variables:[]},{_id:37,functionName:"AreTexturesLoaded",returnValue:"bool",referenceVariable:"",section:"level",access:"Server",description:"Check to see if start-of-level textures are loaded - if they're not, the streamer forces a black screen.",example:"while( !areTexturesLoaded() ) { wait(0.05); }",variables:[]},{_id:38,functionName:"AreTexturesStreamed",returnValue:"bool",referenceVariable:"<entity>",section:"string",access:"Client",description:"Returns true if this entity's textures are streamed in",example:"thing areTexturesStreamed()",variables:[]},{_id:39,functionName:"ArraySort",returnValue:"void",referenceVariable:"",section:"variables",access:"Server",description:"Returns a sorted array of entities by closest or farthest distance from <origin>",example:null,variables:[{name:"array",mandatory:!0,description:"array to sort"},{name:"origin",mandatory:!0,description:"the origin from which to compare"},{name:"closest",mandatory:!1,description:"if set to true the array will be sorted by distance closest to <origin>, if false by distance farthest from <origin>"},{name:"max",mandatory:!1,description:"if set then only the first <max> count of entities will be returned"},{name:"range",mandatory:!1,description:"if set then only the entities within <range> will be considered"}]},{_id:40,functionName:"ArraySortClosest",returnValue:"void",referenceVariable:"",section:"variables",access:"Server",description:"Returns a sorted array of entities by closest from <origin>",example:null,variables:[{name:"array",mandatory:!0,description:"array to sort"},{name:"origin",mandatory:!0,description:"the origin from which to compare"},{name:"<maxReturnCount",mandatory:!1,description:"if set then only the first <max> count of entities will be returned"},{name:"minDist",mandatory:!1,description:"if set then only the entities further than <minDist> will be considered"},{name:"maxDist",mandatory:!1,description:"if set then only the entities closer then <maxDist will be considered"}]},{_id:41,functionName:"ArtilleryIconLocation",returnValue:"void",referenceVariable:"",section:"hud",access:"Server",description:"Set the artillery icon location",example:"ArtilleryIconLocation( self.origin, 1, true )",variables:[{name:"position",mandatory:!0,description:"Position of icon"},{name:"teamNum",mandatory:!0,description:"Team number"},{name:"isActive",mandatory:!0,description:"Whether the icon is active or not"},{name:"isMortar",mandatory:!1,description:"Whether the artillery is a mortar"},{name:"clientNum",mandatory:!1,description:"The client number"}]},{_id:42,functionName:"ASMSetAnimationRate",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"change the delta animation rate for the entity using ASM.",example:"self ASMSetAnimationRate( 0.3 )",variables:[{name:"rate",mandatory:!0,description:"(float)"}]},{_id:43,functionName:"Attach",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Attach a model to an entity.",example:'self Attach( "panzerflak_ammo", "tag_weapon_left" )',variables:[{name:"modelname",mandatory:!0,description:"The model name to attach (string)."},{name:"tagname",mandatory:!1,description:"The tag to attach the model to (string)."},{name:"ignoreCollision",mandatory:!1,description:"flag to ignore collision. Defaults to false (integer)."}]},{_id:44,functionName:"AttachShieldModel",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Attach a shield model to a player.",example:'self AttachShieldModel( "weapon_riot_shield", "tag_weapon_left" )',variables:[{name:"modelname",mandatory:!0,description:"The model name to attach (string)."},{name:"tagname",mandatory:!1,description:"The tag to attach the model to (string)."},{name:"ignoreCollision",mandatory:!1,description:"flag to ignore collision. Defaults to false (integer)."}]},{_id:45,functionName:"AttachWeapon",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Client",description:"Attaches a weapon to the entity.",example:"self AttachWeapon( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to attach."},{name:"renderoptions",mandatory:!1,description:"The render options for the weapon"},{name:"acvi",mandatory:!1,description:"The attachment cosmetic variations"}]},{_id:46,functionName:"BadPlace_Box",returnValue:"void",referenceVariable:"",section:"badplaces",access:"Server",description:"Creates a bad place box. AI will flee this position if they can, and will not go into it if they can avoid it.",example:'BadPlace_Box( "moody", -1, level.moodyfall_mn, level.moodyfall_halfSize, "neutral" )',variables:[{name:"name",mandatory:!0,description:'The name of the bad place. If name is not "", the bad place can be moved or deleted by using the unique name.'},{name:"duration",mandatory:!0,description:"If duration > 0, the bad place will automatically delete itself after this time. If duration <= 0, the bad place must have a name and will last until manually deleted."},{name:"origin",mandatory:!0,description:"The origin of the box."},{name:"halfSize",mandatory:!0,description:"The halfSize of the box."},{name:"team",mandatory:!0,description:"You must specify at least one team for which this place is bad, but can give several. The allowed teams are 'axis', 'allies', and 'neutral'."}]},{_id:47,functionName:"BadPlace_Cylinder",returnValue:"void",referenceVariable:"",section:"badplaces",access:"Server",description:"Creates a bad place cylinder. AI will flee this position if they can, and will not go into it if they can avoid it.",example:'BadPlace_Cylinder( "moody", -1, level.moodyfall_mn, level.moodyfall_radius, "neutral" )',variables:[{name:"name",mandatory:!0,description:'The name of the bad place. If name is not "", the bad place can be moved or deleted by using the unique name.'},{name:"duration",mandatory:!0,description:"If duration > 0, the bad place will automatically delete itself after this time. If duration <= 0, the bad place must have a name and will last until manually deleted."},{name:"origin",mandatory:!0,description:"The origin of the cylinder."},{name:"radius",mandatory:!0,description:"The radius of the cylinder."},{name:"height",mandatory:!0,description:"The height of the cylinder."},{name:"team",mandatory:!0,description:"You must specify at least one team for which this place is bad, but can give several. The allowed teams are 'axis', 'allies', and 'neutral'."}]},{_id:48,functionName:"BadPlace_Delete",returnValue:"void",referenceVariable:"",section:"badplaces",access:"Server",description:'Deletes a bad place. It is okay to delete a bad place name that doesn\'t exist. It is not okay to delete the special name "".',example:'BadPlace_Delete( "bpFlak1" )',variables:[{name:"bad place identifier",mandatory:!0,description:"The bad place to delete"}]},{_id:49,functionName:"BallSetTarget",returnValue:"void",referenceVariable:"<ball>",section:"entity",access:"Server",description:"Sets the target of the ball to the given entity, and resets if no entity is specified.",example:"self BallSetTarget( player )",variables:[{name:"target",mandatory:!0,description:"The target of the missile"},{name:"targetOffset",mandatory:!1,description:"Offset to the target location (vector3)"}]},{_id:50,functionName:"Ban",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Bans the specified player.",example:"Ban( 2 )",variables:[{name:"clientnum",mandatory:!0,description:"The client number of the player to ban."}]},{_id:51,functionName:"BeamTrace",returnValue:"entity",referenceVariable:"",section:"trace",access:"Server",description:"Performs a bullet trace between two points and returns an array of information about the trace result.",example:"a_trace = BeamTrace( org1, org2 )",variables:[{name:"start_pos",mandatory:!0,description:"(point) The start position for the trace.[MANDATORY]"},{name:"hit_characters",mandatory:!0,description:"(bool) Tell the trace to hit characters or not."},{name:"ignore_ent",mandatory:!0,description:"(entity) Entity to ingore for trace.[OPTIONAL]"},{name:"ignore_glass",mandatory:!1,description:"(bool) Ignore glass - defaults to false."},{name:"ignore_ent2",mandatory:!1,description:"(entity) Second entity to ingore for trace."}]},{_id:52,functionName:"BloodImpact",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets the blood impact type on the character",example:'guy BloodImpact ( "none" )',variables:[{name:"value",mandatory:!0,description:"Has to be one of"}]},{_id:53,functionName:"BlurAndTint_FX",returnValue:"void",referenceVariable:"<entity>",section:"effect",access:"Client",description:"Plays RadioActive/Fire FX",example:"entity blurandtint_fx(0, true, 1)",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"},{name:"bool",mandatory:!1,description:"true/false. Default is true."},{name:"level",mandatory:!1,description:"0 - 1"}]},{_id:54,functionName:"Bobbing",returnValue:"void",referenceVariable:"",section:"movement",access:"Server",description:"Causes a script entity to bob around its origin, along a given vector dir",example:"self Bobbing( directionVir, 0.3, 0.4, 0.0f )",variables:[{name:"direction vector",mandatory:!0,description:"The direction of the bobbing"},{name:"amplitude",mandatory:!0,description:"The amount of the bobbing in units"},{name:"period",mandatory:!0,description:"The period of the bobbing in seconds"},{name:"phase",mandatory:!1,description:"The phase offset of the bobbing"}]},{_id:55,functionName:"BonusCardActiveCount",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns how many bonus cards are active, cannot be called on a larry",example:"cardCount = self BonusCardActiveCount( self.class_num )",variables:[{name:"classnum",mandatory:!0,description:"The current class num of the player"}]},{_id:56,functionName:"BotReleaseManualControl",returnValue:"void",referenceVariable:"<bot>",section:"bot",access:"Server",description:"Releases manual control and passes control back to the Havok system",example:"bot ReleaseManualControl( )",variables:[]},{_id:57,functionName:"BoundsWouldTelefrag",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Returns true if the passed in bounding box would telefrag a player if another player was spawned there.",example:"if ( BoundsWouldTelefrag( vehicle GetAbsMins(), vehicle GetAbsmaxs() ) ) ...",variables:[{name:"mins",mandatory:!0,description:"Mins of bounding box"},{name:"maxs",mandatory:!0,description:"Maxs of bounding box"}]},{_id:58,functionName:"BulletSpread",returnValue:"vector",referenceVariable:"",section:"weapons",access:"Server",description:"uses spread to return a new end position",example:"endpos = BulletSpread( self.origin, target.origin, 1.0 )",variables:[{name:"start",mandatory:!0,description:"The bullet starting point"},{name:"end",mandatory:!0,description:"The bullet ending point"},{name:"spread",mandatory:!0,description:"Amount of spread"}]},{_id:59,functionName:"BulletTrace",returnValue:"string[]",referenceVariable:"",section:"trace",access:"Server",description:"Performs a bullet trace between two points and returns an array of information about the trace result.",example:"a_trace = BulletTrace( org1, org2 )",variables:[{name:"start_pos",mandatory:!0,description:"(point) The start position for the trace."},{name:"end_pos",mandatory:!0,description:"(point) The end position for the trace."},{name:"hit_characters",mandatory:!0,description:"(bool) Tell the trace to hit characters or not."},{name:"ignore_ent",mandatory:!0,description:"(entity) Entity to ingore for trace."},{name:"ignore_water",mandatory:!1,description:"(bool) Ignore water - defaults to false."},{name:"ignore_glass",mandatory:!1,description:"(bool) Ignore glass - defaults to false."},{name:"ignore_ent2",mandatory:!1,description:"(entity) Second entity to ingore for trace."}]},{_id:60,functionName:"BulletTracePassed",returnValue:"bool",referenceVariable:"",section:"trace",access:"Server",description:"Allows script to do a bullet point trace with ( MASK_SHOT & ~CONTENTS_SKY ) returns true if the trace does not hit anything",example:"passed = BulletTracePassed( grenade.origin, self.origin + (0,0,TROPHY_TRACE_Z), false, self )",variables:[{name:"start",mandatory:!0,description:"The bullet start point"},{name:"end",mandatory:!0,description:"The bullet end point"},{name:"hit characters",mandatory:!0,description:"An entity to ignore"},{name:"ignore entity",mandatory:!0,description:"An entity to ignore"},{name:"ignore entity 2",mandatory:!1,description:"An entity to ignore"},{name:"fx vis",mandatory:!1,description:"check against fx visibility also"},{name:"ignore water",mandatory:!1,description:"mask contents_water"}]},{_id:61,functionName:"CamAnimScripted",returnValue:"void",referenceVariable:"",section:"animation",access:"Server",description:"Plays the camera script on a player.",example:'CamAnimScripted( player, "proto_melee_cam", gettime(), origin, angles )',variables:[{name:"player",mandatory:!0,description:"The player to play animation on"},{name:"cam_anim",mandatory:!0,description:"The animation to play"},{name:"start_time",mandatory:!0,description:"The start time of the animation"},{name:"align_origin",mandatory:!0,description:"The origin to align to"},{name:"align_angles",mandatory:!0,description:"The angles to align to"},{name:"lerp_duration",mandatory:!1,description:"The lerp duration"},{name:"camera_name",mandatory:!1,description:"The camera name"},{name:"ignoreProcessingInitialNoteTracks",mandatory:!1,description:"Ignores processing the initial notetracks if the camera time starts earlier"}]},{_id:62,functionName:"CameraSetLensId",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:null,example:"entity CameraSetLensId(0)",variables:[{name:"id",mandatory:!0,description:"int"}]},{_id:63,functionName:"CameraForceDisableScriptCam",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Disable the script cam from client script.",example:"player ScriptCamForceDisable( true )",variables:[]},{_id:64,functionName:"CameraSetUpdateCallback",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Set the function that will get called during the camera update",example:"player ScriptCamSetUpdateCallback( &function )",variables:[{name:"function",mandatory:!1,description:"a function pointer to a function that will get called during the camera update, the function should set the scr cam"}]},{_id:65,functionName:"CanClaimNode",returnValue:"bool",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns true if the node is unclaimed, false otherwise.",example:"if ( CanClaimNode( cover, team ) )",variables:[{name:"node",mandatory:!0,description:"pathnode to check"},{name:"team",mandatory:!0,description:""}]},{_id:66,functionName:"CanPath",returnValue:"bool",referenceVariable:"",section:"ai",access:"Server",description:"Check if a path can be found between these positions.",example:"if ( self CanPath( self.origin, targetpos ) )",variables:[{name:"start",mandatory:!0,description:""},{name:"end",mandatory:!0,description:""}]},{_id:67,functionName:"ChangeAdvertisedStatus",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Changes the advertised status",example:"changeAdvertisedStatus( onOff )",variables:[{name:"onOff",mandatory:!0,description:"(boolean)"}]},{_id:68,functionName:"CheckIfSongUnlocked",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:null,example:'self CheckIfSongUnlocked( "frag_out" )',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play (string)"}]},{_id:69,functionName:"CheckNavMeshDirection",returnValue:"vector",referenceVariable:"",section:"level",access:"Server",description:"Run a trace on NavMesh to get the furthest position a character can move in that direction",example:"pos = CheckNavMeshDirection( (10,20,30), ( 1, 1, 0 ), 25 )",variables:[{name:"start",mandatory:!0,description:"start of the trace"},{name:"dir",mandatory:!0,description:"direction to trace"},{name:"dist",mandatory:!0,description:"distance to trace"},{name:"characterRadius",mandatory:!1,description:"the radius of the capsule used in trace. default to 0."},{name:"materialFlags",mandatory:!1,description:"the flags marking whether a face type can be used"}]},{_id:70,functionName:"CleanupSpawnedDynEnts",returnValue:"void",referenceVariable:"",section:"spawn",access:"Client",description:"Removed all dyn ents that were dynamically spawned (gib pieces, destructible parts, etc)",example:"CleanupSpawnedDynEnts()",variables:[]},{_id:71,functionName:"ClearAlternateAimParams",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Forces the local player to use default values for aim assist. Only works in zombie/campaign mode. Can only be called on players",example:"self ClearAlternateAimParams()",variables:[]},{_id:72,functionName:"ClearAnim",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Sets an animation's goal weight (and the goal weights of all of its descendents) to zero over the specified time.",example:"self ClearAnim( %root, 0)",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to clear"},{name:"time",mandatory:!0,description:"The blending time for the clear"}]},{_id:73,functionName:"ClearAnimLimited",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Sets an animation's goal weight to zero over the specified time.",example:"self ClearAnimLimited( %root, 0)",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to clear"},{name:"time",mandatory:!0,description:"The blending time for the clear"}]},{_id:74,functionName:"ClearMaterialOverride",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Clears the material override",example:"self ClearMaterialOverride()",variables:[]},{_id:75,functionName:"ClearLastUpdatedCollectibles",returnValue:"void",referenceVariable:"",section:"objective",access:"Client",description:null,example:null,variables:[]},{_id:76,functionName:"ClearNearestEnemyScrambler",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"clears closest enemy scrambler from the compass",example:"player ClearNearestEnemyScrambler( )",variables:[]},{_id:77,functionName:"ClearPlayerCorpses",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Removes all player corpses from the level",example:"ClearPlayerCorpses( )",variables:[]},{_id:78,functionName:"ClearPlayerGravity",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Clears the gravity override for the player.",example:"player ClearPlayerGravity()",variables:[]},{_id:79,functionName:"ClearSpawnPoints",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Clears all spawnpoints out of the system",example:"ClearSpawnPoints()",variables:[{name:"list",mandatory:!1,description:"which list of spawnpoints to clear"}]},{_id:80,functionName:"ClearSpawnPointsBaseWeight",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Clears the objective base weights set in the spawn points",example:"ClearSpawnPointsBaseWeight( team_mask )",variables:[{name:"team mask",mandatory:!0,description:"teams that this command will affect"}]},{_id:81,functionName:"ClearStepTriggerSound",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Client",description:"Clears the sound triggered by steps",example:"trigPlayer ClearStepTriggerSound()",variables:[]},{_id:82,functionName:"ClearStowedWeapon",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Clears the stowed weapon for the player",example:"self ClearStowedWeapon()",variables:[]},{_id:83,functionName:"ClearStreamerRequest",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Clear a hint from a request slot (0-7)",example:"clearStreamerRequest(0)",variables:[{name:"slot",mandatory:!0,description:"Request slot"}]},{_id:84,functionName:"ClearTargetEntity",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Clears the current target for this vehicle or turret.",example:"roof_turret ClearTargetEntity()",variables:[]},{_id:85,functionName:"ClearTopScorers",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Clears the top scorer for the end game screen.",example:"ClearTopScorers()",variables:[]},{_id:86,functionName:"ClientAnnouncement",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Sends an announcement to a single client.",example:null,variables:[{name:"clientnum",mandatory:!0,description:"The client number that the announcement is sent to."},{name:"string",mandatory:!0,description:"The announcement."},{name:"duration",mandatory:!0,description:"How long, in seconds, to display the announcement."}]},{_id:87,functionName:"ClientClaimTrigger",returnValue:"void",referenceVariable:"<client>",section:"triggers",access:"Server",description:"Claim a single user trigger.",example:"other ClientClaimTrigger( self )",variables:[{name:"trigger",mandatory:!0,description:"A trigger entity."}]},{_id:88,functionName:"ClientPrint",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Print a localized version of this string for a given client",example:null,variables:[{name:"client",mandatory:!0,description:"A client entity."},{name:"string",mandatory:!0,description:"A message to print."}]},{_id:89,functionName:"ClientReleaseTrigger",returnValue:"void",referenceVariable:"<client>",section:"triggers",access:"Server",description:"Release a single user trigger.",example:"other ClientReleaseTrigger( self )",variables:[{name:"trigger",mandatory:!0,description:"A trigger entity."}]},{_id:90,functionName:"ClientSysRegister",returnValue:"int",referenceVariable:"",section:"client",access:"Server",description:"Declares a system who's state will be communicated over to the client script system when it changes. Takes a unique name, and returns the id of the system.",example:'index = ClientSysRegister("FakeFire")',variables:[{name:"name",mandatory:!0,description:"The unique name of the system to be registered"}]},{_id:91,functionName:"ClientSysSetState",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Sets the state of a pre registered client system for all clients. The state will be communicated to the client script system.",example:'ClientSysSetState(level._ClientSys["FakeFire"], "Event1Phase1")',variables:[{name:"id",mandatory:!0,description:"The integer id of the client system. Returned from call to ClientSysRegister."},{name:"state",mandatory:!0,description:"Arbitrary string state. Will be sent to the client script system."}]},{_id:92,functionName:"CloneAndRemoveEntity",returnValue:"entity",referenceVariable:"",section:"entity",access:"Server",description:"Creates a new entity at the position/orientation/pose of the original, and kills the original",example:"CloneAndRemoveEntity( ent )",variables:[{name:"entity",mandatory:!0,description:"entity field"}]},{_id:93,functionName:"CODCasterKeyline_Enable",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Enable or disable the CODCaster Keyline effect",example:"entity CODCasterKeyline_Enable( 0 )",variables:[{name:"type",mandatory:!0,description:"0-disable 1-enable"}]},{_id:94,functionName:"CodeGetClientField",returnValue:"float",referenceVariable:"",section:"client",access:"Server",description:"Gets the value for a given client field.",example:'val = CodeGetClientField(ent, "my_field")',variables:[{name:"entity",mandatory:!0,description:"The entity to search the name in"},{name:"name",mandatory:!0,description:"Unique name to identify the field."}]},{_id:95,functionName:"CodeGetPlayerStateClientField",returnValue:"float",referenceVariable:"",section:"client",access:"Server",description:"Gets the value for a given player state client field.",example:'val = CodeGetPlayerStateClientField(ent, "my_field")',variables:[{name:"player",mandatory:!0,description:"A player"},{name:"name",mandatory:!0,description:"Unique name to identify the field."}]},{_id:96,functionName:"CodeGetUIModelClientField",returnValue:"float",referenceVariable:"",section:"client",access:"Server",description:"Gets the value for a given player uimodel client field.",example:'val = CodeGetUIModelClientField(ent, "my_field")',variables:[{name:"player",mandatory:!0,description:"A player"},{name:"name",mandatory:!0,description:"Unique name to identify the field."}]},{_id:97,functionName:"CodeGetWorldClientField",returnValue:"float",referenceVariable:"",section:"client",access:"Server",description:"Gets the value for a given client field.",example:'val = CodeGetWorldClientField("my_field")',variables:[{name:"name",mandatory:!0,description:"Unique name to identify the field."}]},{_id:98,functionName:"CodeIncrementClientField",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Increments the value for a given client field.",example:'CodeIncrementClientField(ent, "my_field")',variables:[{name:"entity",mandatory:!0,description:"An entity"},{name:"name",mandatory:!0,description:"Unique name to identify the field."}]},{_id:99,functionName:"CodeIncrementPlayerStateClientField",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Increments the value for a given player state client field.",example:'CodeIncrementPlayerStateClientField(ent, "my_field")',variables:[{name:"player",mandatory:!0,description:"A player"},{name:"name",mandatory:!0,description:"Unique name to identify the field."}]},{_id:100,functionName:"CodeIncrementUIModelClientField",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Increments the value for a given client field.",example:'CodeIncrementUIModelClientField(ent, "my_field")',variables:[{name:"entity",mandatory:!0,description:"An entity"},{name:"name",mandatory:!0,description:"Unique name to identify the field."}]},{_id:101,functionName:"CodeIncrementWorldClientField",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Increments the value for a given world client field.",example:'CodeIncrementWorldClientField("my_field")',variables:[{name:"name",mandatory:!0,description:"Unique name to identify the field."}]},{_id:102,functionName:"CodeSetClientField",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Sets the value for a given client field.",example:'CodeSetClientField(ent, "my_field", 1)',variables:[{name:"entity",mandatory:!0,description:"An entity"},{name:"name",mandatory:!0,description:"Unique name to identify the field."},{name:"value",mandatory:!0,description:"Value to transmit."}]},{_id:103,functionName:"CodeSetPlayerStateClientField",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Sets the value for a given player state client field.",example:'CodeSetPlayerStateClientField(ent, "my_field", 1)',variables:[{name:"player",mandatory:!0,description:"A player"},{name:"name",mandatory:!0,description:"Unique name to identify the field."},{name:"value",mandatory:!0,description:"Value to transmit."}]},{_id:104,functionName:"CodeSetUIModelClientField",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Sets the value for a given player uimodel client field.",example:'CodeSetUIModelClientField(ent, "my_field", 1)',variables:[{name:"player",mandatory:!0,description:"A player"},{name:"name",mandatory:!0,description:"Unique name to identify the field."},{name:"value",mandatory:!0,description:"Value to transmit."}]},{_id:105,functionName:"CodeSetWorldClientField",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Sets the value for a given world client field.",example:'CodeSetWorldClientField("my_field", 1)',variables:[{name:"name",mandatory:!0,description:"Unique name to identify the field."},{name:"value",mandatory:!0,description:"Value to transmit."}]},{_id:106,functionName:"CollisionTestPointsInBox",returnValue:"vector[]",referenceVariable:"",section:"debug",access:"Server",description:null,example:null,variables:[]},{_id:107,functionName:"CollisionTestPointsInCone",returnValue:"vector[]",referenceVariable:"",section:"debug",access:"Server",description:null,example:null,variables:[]},{_id:108,functionName:"CollisionTestPointsInCylinder",returnValue:"vector[]",referenceVariable:"",section:"debug",access:"Server",description:null,example:null,variables:[]},{_id:109,functionName:"CollisionTestPointsInPill",returnValue:"vector[]",referenceVariable:"",section:"debug",access:"Server",description:null,example:null,variables:[]},{_id:110,functionName:"CollisionTestPointsInSphere",returnValue:"vector[]",referenceVariable:"",section:"debug",access:"Server",description:"Returns an array of collision result structures",example:null,variables:[]},{_id:111,functionName:"ConnectPaths",returnValue:"void",referenceVariable:"<entity>",section:"ai",access:"Server",description:"Connects the paths that intersect with the entity. If the entity is a script_brushmodel then it must have DYNAMICPATH set to connect paths.",example:"vehicle ConnectPaths()",variables:[]},{_id:112,functionName:"ConsumableDecrement",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Decrement a specified consumable for the player by the specified amount",example:'self ConsumableDecrement( "blackjack", "awarded", 1 )',variables:[]},{_id:113,functionName:"ConsumableGet",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns the value of the specified consumable for the player",example:'self ConsumableGet( "blackjack", "awarded" )',variables:[]},{_id:114,functionName:"ConsumableIncrement",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Increment a specified consumable for the player by the specified amount",example:'self ConsumableIncrement( "blackjack", "awarded", 1 )',variables:[]},{_id:115,functionName:"ConsumableSet",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set a specified consumable for the player to the specified amount",example:'self ConsumableSet( "blackjack", "awarded", 1 )',variables:[]},{_id:116,functionName:"CountPlayers",returnValue:"int",referenceVariable:"",section:"player",access:"Server",description:"Returns a count of the current players, even if they are still connecting to the game.",example:"count = CountPlayers()",variables:[{name:"team",mandatory:!1,description:'- if specifed, returns lists of players on different teams, in team based game modes. Valid values "allies", "axis", "neutral" & "all"'}]},{_id:117,functionName:"CreateDynEntAndLaunch",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Creates and launches a dynent.",example:'CreateDynEntAndLaunch( spawn_models[i], origin, angles, origin, velocity, anim._effect["animscript_gibtrail_fx"] )',variables:[{name:"model",mandatory:!0,description:""},{name:"pos",mandatory:!0,description:"position to spawn at."},{name:"angles",mandatory:!0,description:"angles to spawn at."},{name:"hitpos",mandatory:!0,description:"the hit position"},{name:"force",mandatory:!0,description:"The force of the launch"},{name:"fx",mandatory:!1,description:"particle effects to play on this dynent"}]},{_id:118,functionName:"CreateSoundRandom",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Create sound random at the position",example:"CreateSoundRandom(randSound.origin, randSound.script_sound, randSound.script_wait_min, randSound.script_wait_max)",variables:[{name:"position",mandatory:!0,description:"The position"},{name:"name",mandatory:!0,description:"The sound name"},{name:"min wait",mandatory:!0,description:"The minimum wait time"},{name:"max wait",mandatory:!0,description:"The maximum wait time"}]},{_id:119,functionName:"CreateStreamerHint",returnValue:"entity",referenceVariable:"",section:"string",access:"Server",description:"Allows scripter to create a streamer hint entity viewpoint to the player's viewpoint.",example:"streamHintEnt = createStreamerHint( level.player.origin, 0.333 )",variables:[{name:"origin",mandatory:!0,description:"Location at which to spawn the streamer hint."},{name:"factor",mandatory:!0,description:"The relative importance of this entity's viewpoint to the main viewpoint."},{name:"lightingState",mandatory:!1,description:"The lighting state to stream"}]},{_id:120,functionName:"CurrentSessionMode",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Returns the current session mode index",example:"sessionMode = CurrentSessionMode()",variables:[]},{_id:121,functionName:"CylinderDamage",returnValue:"void",referenceVariable:"",section:"damage",access:"Server",description:"cylinder_dir_vector should contains the direction and the length of the cylinder relative to the base origin",example:null,variables:[{name:"cylinder_vec",mandatory:!0,description:"contains the direction and the length of the cylinder relative to the base origin"},{name:"origin",mandatory:!0,description:"Origin of damage"},{name:"near_radius",mandatory:!0,description:"Radius of the damage at the near end"},{name:"far_radius",mandatory:!0,description:"Radius of the damage at the far end"},{name:"max_damage",mandatory:!0,description:"Max damage, this is the damage at the origin"},{name:"min_damage",mandatory:!0,description:"Max damage, this is the damage at the edge of the radius"},{name:"attacker",mandatory:!1,description:"Attacker the dealt the damage"},{name:"means_of_death",mandatory:!1,description:"Means of death of the damage"},{name:"weapon",mandatory:!1,description:"Weapon used to damage"}]},{_id:122,functionName:"DamageConeTrace",returnValue:"void",referenceVariable:"<entity>",section:"trace",access:"Server",description:"Determines how much the entity can be seen from the given position. Performs multiple traces and returns an approximation to how much of the entity is visible from the given point (between 0 and 1). In SinglePlayer this will always be 1 if the entity is partially visible.",example:"turretDamageFraction = entity damageConeTrace( turret.origin + (0,0,40), turret )",variables:[{name:"damage position",mandatory:!0,description:"The point the sight starts at"},{name:"ignore entity",mandatory:!1,description:"An entity to ignore when doing the traces"},{name:"damage angles",mandatory:!1,description:"The forward direction of the cone, whose base is at the <damage position>. Must be normalized."},{name:"cone angle",mandatory:!1,description:"Angle in degrees from the line of sight to the edge of the cone. Defaults to 65."}]},{_id:123,functionName:"DeactivateClientExploder",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Deactivates a client side exploder",example:"DeactivateClientExploder( 101 )",variables:[{name:"exploder id",mandatory:!0,description:"id of exploder to deactivate"}]},{_id:124,functionName:"DeactivateClientRadiantExploder",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Deactivates a client side radiant exploder",example:'DeactivateClientRadiantExploder( "light_switch" )',variables:[{name:"exploder id",mandatory:!0,description:"string id of exploder to deactivate"}]},{_id:125,functionName:"Delete",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Removes an entity from the game in the same manner as a trigger_kill",example:"self Delete()",variables:[]},{_id:126,functionName:"DeletePathNode",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Delete a dynamically created path node or cover node",example:"DeletePathNode( node )",variables:[{name:"node",mandatory:!0,description:"The node to delete"}]},{_id:127,functionName:"DemoIsAnyFreeMoveCamera",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:null,example:null,variables:[]},{_id:128,functionName:"DemoIsDollyCamera",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:null,example:null,variables:[]},{_id:129,functionName:"DemoIsEditCamera",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:null,example:null,variables:[]},{_id:130,functionName:"DemoIsMovieCamera",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:null,example:null,variables:[]},{_id:131,functionName:"DeployRiotShield",returnValue:"entity",referenceVariable:"",section:"weapons",access:"Server",description:"Gets the index in a particular class",example:"DeployRiotShield( owner, shield )",variables:[{name:"owner",mandatory:!0,description:""},{name:"shield_ent",mandatory:!0,description:""}]},{_id:132,functionName:"DepthInWater",returnValue:"float",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns the depth (in inches) that the entity is in water. Returns depth in inches, or 0 if the entity isn't in water. Will work for all water types.",example:"depth = get_players()[0] DepthInWater()",variables:[]},{_id:133,functionName:"DepthOfPlayerInWater",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns the depth (in inches) that the player is in water. Returns depth in inches, or 0 if the entity isn't in water. Will work for all water types. More effecient than depthinwater but will only work for players",example:"depth = get_players()[0] DepthOfPlayerInWater()",variables:[]},{_id:134,functionName:"Detach",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"detaches an attached model from an entity",example:'self Detach( "explosivepack", "tag_weapon_right" )',variables:[{name:"modelname",mandatory:!0,description:"The model name to detach (string)"},{name:"tagname",mandatory:!1,description:"The tag to detach the model from (string)"}]},{_id:135,functionName:"DetachAll",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"detaches all attached models from an entity",example:"self DetachAll()",variables:[]},{_id:136,functionName:"DetachShieldModel",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Detaches an attached shield model from a player.",example:'self DetachShieldModel( "weapon_riot_shield", "tag_weapon_left" )',variables:[{name:"modelname",mandatory:!0,description:"The model name to detach (string)"},{name:"tagname",mandatory:!1,description:"The tag to detach the model from (string)"}]},{_id:137,functionName:"Detonate",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Detonate the entity and set the owner to the player which is specified.",example:"self Detonate( attacker )",variables:[{name:"player",mandatory:!1,description:"The player who owns the entity"}]},{_id:138,functionName:"DirectionalHitIndicator",returnValue:"void",referenceVariable:"",section:"hud",access:"Server",description:"Create a directional hit indicator",example:"attacker DirectionalHitIndicator( victimArray0, victimArray1 )",variables:[{name:"victims0",mandatory:!0,description:"A bit array of entities 0-31 that got hit"},{name:"victims1",mandatory:!1,description:"A bit array of entities 32-63 that got hit"}]},{_id:139,functionName:"DisableAimAssist",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Disables Aim assist on the entity. Entity has to be either a brush model or an actor or a vehicle or a script_model.",example:"player DisableAimAssist()",variables:[]},{_id:140,functionName:"DisableDestructiblePieces",returnValue:"void",referenceVariable:"",section:"string",access:"Server",description:"Disables all destructible pieces that have this label set in the destructible gdt",example:'DisableDestructiblePieces( "heavy_armor" )',variables:[{name:"label",mandatory:!0,description:"the name of the field listed in the destructible gdt to disable"}]},{_id:141,functionName:"DisableGrenadeSuicide",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Stops cooked grenades from killing the player.",example:null,variables:[]},{_id:142,functionName:"DisableGrenadeTouchDamage",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Resets the grenade touch damage flag of the entity",example:"self DisableGrenadeTouchDamage()",variables:[]},{_id:143,functionName:"DisableOffhandSpecial",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Disable the ability to activate a player's special offhand weapons",example:"player DisableOffhandSpecial()",variables:[]},{_id:144,functionName:"DisableOnRadar",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Sets the icon to be shown on the minimap",example:"actor DisableOnRadar()",variables:[]},{_id:145,functionName:"DisableSpawnPointList",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"disables spawn point list for a the team_mask",example:"ClearSpawnPoints()",variables:[{name:"team mask",mandatory:!0,description:"teams that this command will affect"},{name:"team mask",mandatory:!0,description:"teams that this command will affect"}]},{_id:146,functionName:"DisableSpeedBlur",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"REmoves a speed blur on on the screen",example:"DisableSpeedBlur( <localClientNum> )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"}]},{_id:147,functionName:"DisableVehicleSounds",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Disables all sounds from a vehicle",example:"self DisableVehicleSound()",variables:[]},{_id:148,functionName:"DisconnectPaths",returnValue:"void",referenceVariable:"<entity>",section:"ai",access:"Server",description:"Disconnects the paths that intersect with the entity. If the entity is a script_brushmodel then it must have DYNAMICPATH set to disconnect paths.",example:"level.ArmoredCar DisconnectPaths()",variables:[{name:"detailLevel",mandatory:!1,description:"how detailed the cut part matches the entity. 0 or omitted"},{name:"moveAllowed",mandatory:!1,description:"sets whether the silhouette moves with the entity (defaults to true)"}]},{_id:149,functionName:"DoDamage",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Does damage to this entity",example:'player DoDamage(25, gasEffectArea.origin, player.lastPoisonedBy, grenade_obj, 0, "MOD_EXPLOSIVE", 0, GetWeapon("tabun_gas_mp"), -1, false)',variables:[{name:"health",mandatory:!0,description:"The amount of damage to do"},{name:"source position",mandatory:!0,description:"The position that the damage comes from"},{name:"attacker",mandatory:!1,description:"The entity that dealt the damage (such as an AI or player)"},{name:"inflictor",mandatory:!1,description:"The entity that the damage came from (such as a grenade or turret)"},{name:"hitloc",mandatory:!1,description:"The location of the damage, default is none; one of"},{name:"mod",mandatory:!1,description:". The means of death string. Otherwise, the means of death will be 'MOD_UNKNOWN'."},{name:"dflags",mandatory:!1,description:". Damage flags."},{name:"weapon",mandatory:!1,description:". Weapon used."},{name:"infdestructible_piece_indexlictor",mandatory:!1,description:'The destructible piece index from the destructible def gdt"'},{name:"forcePain",mandatory:!1,description:'true/false; If true, actor->painDeath.iPainTime will be reset to zero"'}]},{_id:150,functionName:"DoesWeaponReplaceSpawnWeapon",returnValue:"bool",referenceVariable:"",section:"spawn",access:"Server",description:"Returns true if the new weapon is an alt mode of the spawn weapon. Only certain alt variations are valid (not-gl)",example:"if ( DoesWeaponReplaceSpawnWeapon( self.spawnWeapon, newWeapon ) )",variables:[{name:"weapon name",mandatory:!0,description:""}]},{_id:151,functionName:"DontInterpolate",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"pop the entity's position instantaneously to where it moves this time step, rather than smoothly moving there from the previous position",example:"entity DontInterpolate()",variables:[]},{_id:152,functionName:"DoubleXPTimerFired",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Used to decrement consumable double xp promotions",example:null,variables:[]},{_id:153,functionName:"DragonStrike_Enable",returnValue:"void",referenceVariable:"<entity>",section:"string",access:"Client",description:"Enable or disable the DragonStrike effect",example:"entity DragonStrike_enable( 0 )",variables:[{name:"type",mandatory:!0,description:"0-disable 1-enable"}]},{_id:154,functionName:"DragonStrike_SetColorRadiusSpinPulse",returnValue:"void",referenceVariable:"<entity>",section:"string",access:"Client",description:"Set Dragon Strike Cicle position",example:"entity DragonStrike_SetColorRadiusSpinPulse( 1.0, 0.5, 0.25, 100.0, 0.5, 1.0 )",variables:[{name:"red",mandatory:!0,description:""},{name:"green",mandatory:!0,description:""},{name:"blue",mandatory:!0,description:""},{name:"UNK",mandatory:!0,description:""},{name:"UNK",mandatory:!0,description:""},{name:"UNK",mandatory:!0,description:""}]},{_id:155,functionName:"DragonStrike_SetPosition",returnValue:"void",referenceVariable:"<entity>",section:"string",access:"Client",description:"Set Dragon Strike Cicle position",example:"entity DragonStrike_SetPosition( vec3 )",variables:[{name:"position",mandatory:!0,description:"position vector"}]},{_id:156,functionName:"DrawNode",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Draws a node",example:"DrawNode( self.node)",variables:[{name:"node",mandatory:!0,description:"pathnode"}]},{_id:157,functionName:"DropNodEToFloor",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Drop the node to the floor.",example:"DropNodeToFloor( node )",variables:[{name:"node",mandatory:!0,description:"node to drop"}]},{_id:158,functionName:"EACPathSet",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Sets the value of a eac path drone.",example:"SetEACPATH( origin )",variables:[{name:"vec3",mandatory:!0,description:"The value."}]},{_id:159,functionName:"Earthquake",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Create an earthquake",example:"Earthquake( 0.22, 7, player.origin, 150 )",variables:[{name:"scale",mandatory:!0,description:"scale of the earthquake. Must be greater than 0."},{name:"duration",mandatory:!0,description:"The duration of the earthquake. Must be greater than 0."},{name:"radius",mandatory:!0,description:"The radius of the earthquake. Must be greater than 0."},{name:"target",mandatory:!1,description:"Target is given if earthquake is to be shown to particular client"}]},{_id:160,functionName:"EnableAimAssist",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Enables Aim assist on the entity. Entity has to be either a brush model or an actor or a vehicle or a script_model.",example:"player EnableAimAssist()",variables:[]},{_id:161,functionName:"EnableAllDestructiblePieces",returnValue:"void",referenceVariable:"",section:"string",access:"Server",description:"Enables all destructible pieces that were previously disabled",example:"EnableAllDestructiblePieces()",variables:[]},{_id:162,functionName:"EnableGrenadeSuicide",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Enables cooked grenades killing the player.",example:null,variables:[]},{_id:163,functionName:"EnableGrenadeTouchDamage",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Sets the grenade touch damage flag of the entity",example:"self EnableGrenadeTouchDamage()",variables:[]},{_id:164,functionName:"EnableInfluencer",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Enables or disables the given influencer",example:"EnableInfluencer( influencer_id, true )",variables:[{name:"influencer id",mandatory:!0,description:"The influencer to enable/disable"},{name:"enable",mandatory:!0,description:"True to enable. False to disable"}]},{_id:165,functionName:"EnableLinkTo",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"enables linkto for an entity",example:"self.bombtrigger EnableLinkTo()",variables:[]},{_id:166,functionName:"EnableNavMeshTrigger",returnValue:"void",referenceVariable:"",section:"trigger",access:"Server",description:"Enables/disables a given navmesh trigger",example:'EnableNavMeshTrigger( "some_trigger", true )',variables:[{name:"targetname",mandatory:!0,description:"The targetname of the trigger entity."},{name:"enable",mandatory:!0,description:"Whether to enable disable the given volume for pathfinding."}]},{_id:167,functionName:"EnableObstacle",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Enables or disables the hkai obstacle associated with a given entity.",example:"ent EnableObstacle( true )",variables:[{name:"enable",mandatory:!0,description:"Whether to enable or disable the obstacle"}]},{_id:168,functionName:"EnableOccluder",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Enables/disables a named occluder.",example:"EnableOccluder( occluder_name, true )",variables:[{name:"string",mandatory:!0,description:"name of the occluder"},{name:"bool",mandatory:!0,description:"True to enable and false to disable"}]},{_id:169,functionName:"EnableOffhandSpecial",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Enable the ability to activate a player's special offhand weapons",example:"player EnableOffhandSpecial()",variables:[]},{_id:170,functionName:"EnableOnRadar",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Sets the icon to be shown on the minimap",example:"actor EnableOnRadar()",variables:[]},{_id:171,functionName:"EnableSpawnPointList",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"enables spawn point list for a the team_mask",example:"ClearSpawnPoints()",variables:[{name:"team mask",mandatory:!0,description:"teams that this command will affect"},{name:"team mask",mandatory:!0,description:"teams that this command will affect"}]},{_id:172,functionName:"EnableSpeedBlur",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Sets a speed blur on on the screen with parameters",example:"EnableSpeedBlur( localClientNum, .02, .5, .75, true, 300.0 )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"},{name:"amount",mandatory:!0,description:"Blur Amount ( 0.0 - 1.0 )"},{name:"inner radius",mandatory:!0,description:"The size of the inner radius ( 0.0 - 1.0 )"},{name:"inner outerradius",mandatory:!0,description:"The size of the inner radius ( 0.0 - 1.0 )"},{name:"velocityShouldScale",mandatory:!1,description:"false don't scale with velocity, true scale"},{name:"velocityScale",mandatory:!1,description:"Specify the velocity when the scale is 1.0"},{name:"blurInTime",mandatory:!1,description:"Specify the time it takes to complete a blur in"},{name:"blurOutTime",mandatory:!1,description:"Specify the time it takes to complete a blur out"},{name:"shouldOffset",mandatory:!1,description:"Specify whether the blur should change as you move left/right or up/down"}]},{_id:173,functionName:"EnableVehicleSounds",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Enables all sounds from a vehicle",example:"self EnableVehicleSound()",variables:[]},{_id:174,functionName:"EndCamAnimScripted",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Ends the camera script on a player.",example:"EndCamAnimScripted( player )",variables:[{name:"player",mandatory:!0,description:""}]},{_id:175,functionName:"EndExtraCamAnimScripted",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Ends the extracam camera script on a player.",example:"EndExtraCamAnimScripted( player, 0 )",variables:[{name:"player",mandatory:!0,description:"The player to play animation on"},{name:"extra_cam_index",mandatory:!0,description:"The extra camera index"}]},{_id:176,functionName:"EVSetRanges",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"Sets the visual range for EV mode",example:"evSetRanges( localclientnum, geometryRange, targetRange )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."},{name:"geometryRange",mandatory:!0,description:"geometry draw distance."},{name:"targetRange",mandatory:!0,description:"target object draw distance."}]},{_id:177,functionName:"ExitLevel",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"exits the current level",example:"ExitLevel( false )",variables:[{name:"save persistent",mandatory:!1,description:"if true then player info is retained"}]},{_id:178,functionName:"ExperimentsGetVariant",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Gets the variant for a user for an experiment",example:"variant = player ExperimentsGetVariant( experimentName )",variables:[]},{_id:179,functionName:"ExtraCamAnimScripted",returnValue:"void",referenceVariable:"",section:"animation",access:"Server",description:"Plays the camera script on an extracam player.",example:'ExtraCamAnimScripted( player, 0, "proto_melee_cam", gettime(), origin, angles )',variables:[{name:"player",mandatory:!0,description:"The player to play animation on"},{name:"extra_cam_index",mandatory:!0,description:"The extra camera index"},{name:"cam_anim",mandatory:!0,description:"The animation to play"},{name:"start_time",mandatory:!0,description:"The start time of the animation"},{name:"align_origin",mandatory:!0,description:"The origin to align to"},{name:"align_angles",mandatory:!0,description:"The angles to align to"},{name:"lerp_duration",mandatory:!1,description:"The lerp duration"},{name:"camera_name",mandatory:!1,description:"The camera name"},{name:"ignoreProcessingInitialNoteTracks",mandatory:!1,description:"Ignores processing the initial notetracks if the camera time starts earlier"}]},{_id:180,functionName:"FakeFire",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Simulates gun fire. Sound and radar blip.",example:'decoy FakeFire( player, position, "turret_mp", 20 )',variables:[{name:"owner",mandatory:!0,description:"The player who fakes fire"},{name:"origin",mandatory:!0,description:"the origin of the fake fire"},{name:"weapon",mandatory:!0,description:"The weapon used"},{name:"shot count",mandatory:!0,description:"Number of shots fired"}]},{_id:181,functionName:"FindAnimByName",returnValue:"anim",referenceVariable:"",section:"animation",access:"Server",description:"Find specified animation( using animation name ) in a specified animtree( using atr name).",example:'animnamehash = FindAnimByName("generic_human", "chicken_dance")',variables:[{name:"tree",mandatory:!0,description:"Anim tree name"},{name:"anim",mandatory:!0,description:"Name of anim"}]},{_id:182,functionName:"FindDRFilter",returnValue:"object",referenceVariable:"<entity>",section:"entity",access:"Client",description:"optimized code replacement for find_dr_filter",example:"object FindDRFilter( filterset )",variables:[{name:"object",mandatory:!0,description:"entity to check for flags on"},{name:"filterset",mandatory:!0,description:"filterset to use"}]},{_id:183,functionName:"FindPath",returnValue:"bool",referenceVariable:"",section:"pathnode",access:"Server",description:"Check if a path can be found between these positions.",example:"if ( self FindPath( self.origin, potentialpos ) )",variables:[{name:"start",mandatory:!0,description:""},{name:"end",mandatory:!0,description:""}]},{_id:184,functionName:"FlashbackFinish",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Finishes the flashback",example:"self FlashbackFinish()",variables:[]},{_id:185,functionName:"FlashbackStart",returnValue:"vector",referenceVariable:"",section:"level",access:"Server",description:"Starts the flashback and returns the new origin",example:"newpos = self FlashbackStart( <weapon> )",variables:[{name:"weapon",mandatory:!0,description:"The weapon in the player loadout."}]},{_id:186,functionName:"FlushSubtitles",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"Flush and clear any current subtitles on the screen for this specific client",example:"FlushSubtitles(0)",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum to flush the subtitles for"}]},{_id:187,functionName:"FootstepDoEverything",returnValue:"void",referenceVariable:"",section:"effect",access:"Client",description:"Set the footsteps to play sound and play the footstep fx",example:"FootstepDoEverything()",variables:[]},{_id:188,functionName:"FootstepDoFootstepFX",returnValue:"void",referenceVariable:"",section:"effect",access:"Client",description:"Set the footsteps to play the effect",example:"FootstepDoFootstepFX()",variables:[]},{_id:189,functionName:"FootstepDoNothing",returnValue:"void",referenceVariable:"",section:"effect",access:"Client",description:"Set the footsteps to do nothing. Not to play sound or play any fx",example:"FootstepDoNothing()",variables:[]},{_id:190,functionName:"FootstepDoSound",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Set the footsteps to play sound",example:"FootstepDoSound()",variables:[]},{_id:191,functionName:"ForceAmbientRoom",returnValue:"void",referenceVariable:"",section:"entity",access:"Client",description:"Force play an ambient sound",example:'ForceAmbientRoom( "sndHealth_LowHealth" )',variables:[{name:"name",mandatory:!0,description:"The sound name"}]},{_id:192,functionName:"ForceDelete",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Forces Removal of a entity. Does not wait till next snapshot to remove it. Will cause crash if called on animated entity",example:"thing forcedelete()",variables:[]},{_id:193,functionName:"ForceGameModeMappings",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"Forces the users controller mappings for a specific game mode (or resets to user defaults)",example:'ForceGameModeMappings( localClientNum, "default" )',variables:[{name:"localClientNum",mandatory:!0,description:"Client number to play the animation on"},{name:"modeName",mandatory:!0,description:'Name of the mode to switch to or "default" for user defaults'}]},{_id:194,functionName:"ForcePainOn",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"toggles pain.forcePain to true; next damage reaction guarenteed",example:"ai ForcePainOn()",variables:[]},{_id:195,functionName:"ForceStreamBundle",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Force the assets in a script bundle to stream in",example:'ForceStreamBundle( "cin_ram_02_03_ai" )',variables:[{name:"name",mandatory:!0,description:"Name of the script bundle to stream"}]},{_id:196,functionName:"ForceStreamMaterial",returnValue:"bool",referenceVariable:"",section:"string",access:"Client",description:"Forces the streamer to load texture LODs for a material even if it isn't yet visible. Returns true when all levels are loaded. Call StopForceStreamingMaterial when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",example:"areAllForcedLodsLoaded = ForceStreamMaterial( material, mipsToNotForce )",variables:[{name:"material",mandatory:!0,description:"Material to force stream"},{name:"textureLods",mandatory:!1,description:"Texture LODs to not force"}]},{_id:197,functionName:"ForceStreamWeaponRenderOptions",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Forces all materials for the combination of weapon and render options to stream in",example:"ForceStreamWeaponRenderOptions( localClientNum, weapon, weaponOptions )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"weapon",mandatory:!0,description:"Weapon to look up the materials to stream with"},{name:"weaponOptions",mandatory:!0,description:"Render Options to look up the materials to stream with"}]},{_id:198,functionName:"ForceStreamWeapons",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Forces all weapon materials to stream in",example:"forceStreamWeapons()",variables:[]},{_id:199,functionName:"ForceStreamXModel",returnValue:"bool",referenceVariable:"",section:"string",access:"Client",description:"Forces the streamer to load model and texture LODs for a model even if it isn't yet visible. Returns true when all levels are loaded. Call StopForceStreamingXModel when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",example:"areAllForcedLodsLoaded = CScr_ForceStreamXModel( model, meshLodsToNotForce, textureLodsToNotForce, alsoStreamLowerLods=true )",variables:[{name:"model",mandatory:!0,description:"The model to force stream"},{name:"meshLodsToForce",mandatory:!1,description:"The mesh LODs to force ( Default is 0 )"},{name:"textureLodsToForce",mandatory:!1,description:"The texture LODs to force ( Default is 0 )"}]},{_id:200,functionName:"ForceTModeVisible",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"Forces an entity to be visible as if a player was seeing it via tmode",example:"ForceTModeVisible( aiGuy, true )",variables:[{name:"entity",mandatory:!0,description:"The entity the value is being set for"},{name:"visible",mandatory:!1,description:"If the entity should be considered always visible or not (default true)"}]},{_id:201,functionName:"FXBlockSight",returnValue:"void",referenceVariable:"",section:"effect",access:"Server",description:"Uses a general entity and a radius to set a line of sight blocker on the server for some AI. Destroyed when the entity is freed.",example:"FXBlockSight( fxent, 64 )",variables:[{name:"entity",mandatory:!0,description:"the entity to use for the origin for tje line of sight blocker"},{name:"radius",mandatory:!0,description:"the radius of the 'smoke screen' blocker"}]},{_id:202,functionName:"GadgetActivate",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"turns gadget on in slot.",example:"self GadgetActivate( slot )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot to activate. (integer)"},{name:"weapon",mandatory:!0,description:"The gadget weapon"}]},{_id:203,functionName:"GadgetCharging",returnValue:"bool",referenceVariable:"",section:"weapons",access:"Server",description:"Sets the gadget charging state.",example:"self GadgetCharging( slot, true )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot. (integer)"},{name:"value",mandatory:!1,description:"undefined to get current state, true to set or false to unset. (boolean)"}]},{_id:204,functionName:"GadgetDeactivate",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"turns gadget off in slot.",example:"self GadgetDeactivate( slot, weapon, GADGET_OFF_PENALTY_SHUT_OFF )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot to deactivate. (integer)"},{name:"weapon",mandatory:!0,description:"The gadget weapon"},{name:"penalty",mandatory:!1,description:"The power penalty type"}]},{_id:205,functionName:"GadgetFlickering",returnValue:"bool",referenceVariable:"",section:"weapons",access:"Server",description:"Tests a gadget is flickering and can optionally set flickering.",example:"self GadgetFlickering( slot, true, 200 )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot to test or apply flickering state. (integer)"},{name:"flicker",mandatory:!1,description:"Set gadget to flickering state if true (boolean)"},{name:"length",mandatory:!1,description:"Set gadget flickering length (integer)"}]},{_id:206,functionName:"GadgetGetSlot",returnValue:"int",referenceVariable:"",section:"weapons",access:"Server",description:"Get gadget slot for weapon.",example:"self GadgetGetSlot( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon in the player loadout."}]},{_id:207,functionName:"GadgetIsActive",returnValue:"bool",referenceVariable:"",section:"weapons",access:"Server",description:"Returns true if the gadget is active.",example:"self GadgetIsActive( slot )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot to test. (integer)"}]},{_id:208,functionName:"GadgetIsPrimed",returnValue:"bool",referenceVariable:"",section:"weapons",access:"Server",description:"Returns true if the gadget is primed.",example:"self GadgetIsPrimed( slot )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot to test. (integer)"}]},{_id:209,functionName:"GadgetIsReady",returnValue:"bool",referenceVariable:"",section:"weapons",access:"Server",description:"Returns true if the gadget is ready.",example:"self GadgetIsReady( slot )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot to test. (integer)"}]},{_id:210,functionName:"GadgetPowerChange",returnValue:"float",referenceVariable:"",section:"weapons",access:"Server",description:"Applies a power change to the gadget power.",example:"self GadgetPowerChange( slot, -20 )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot apply the power change. (integer)"},{name:"change",mandatory:!0,description:"The amount to change the power by. (float)"}]},{_id:211,functionName:"GadgetPowerGet",returnValue:"float",referenceVariable:"",section:"weapons",access:"Server",description:"Gets the power remaining for gadget.",example:"power = self GadgetPowerGet( slot )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot (integer)"}]},{_id:212,functionName:"GadgetPowerReset",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Applies a power reset.",example:"self GadgetPowerReset( slot )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot apply the power reset. (integer)"}]},{_id:213,functionName:"GadgetPowerSet",returnValue:"float",referenceVariable:"",section:"weapons",access:"Server",description:"Sets the power override to value. Works always.",example:"self GadgetPowerSet( slot, 100 )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot apply the power change. (integer)"},{name:"value",mandatory:!0,description:"The amount to set power to. (float)"}]},{_id:214,functionName:"GadgetPulseGetOwner",returnValue:"entity",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns the owner of the vision pulse you an entity is pulsed by if it exists",example:"entity GadgetPulseGetOwner(<localclientnum>)",variables:[]},{_id:215,functionName:"GadgetPulseResetReveal",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Resets the reveal on an entity for this player",example:"entity GadgetPulseResetRevealed()",variables:[]},{_id:216,functionName:"GadgetPulseRevealed",returnValue:"bool",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Tests whether an enemy is currently revealed for this player",example:"reveal = entity GadgetPulseRevealed()",variables:[]},{_id:217,functionName:"GadgetSetActivateTime",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Set the activation time of this gadget.",example:"self GadgetSetActivateTime( slot, time )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot. (integer)"},{name:"time",mandatory:!0,description:"The activation time. (integer)"}]},{_id:218,functionName:"GadgetSetEntity",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Set the entity used by this gadget.",example:"self GadgetSetEntity( slot, ent )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot."},{name:"entity",mandatory:!0,description:"The entity used by the gadget."}]},{_id:219,functionName:"GadgetSetInfrared",returnValue:"void",referenceVariable:"",section:"weapons",access:"Client",description:"Enables or disables infrared for the gadget",example:"GadgetSetInfrared( localclientnum, newVal )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."},{name:"bool",mandatory:!0,description:"0 disables infrared, 1 enables it."}]},{_id:220,functionName:"GadgetStateChange",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"changes the gadget state in a slot.",example:"self GadgetStateChange( slot )",variables:[{name:"slot",mandatory:!0,description:"The gadget slot to activate. (integer)"},{name:"weapon",mandatory:!0,description:"The gadget weapon"},{name:"state",mandatory:!0,description:"The state to change it to"}]},{_id:221,functionName:"GadgetTargetResult",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:null,example:"GadgetTargetResult(true)",variables:[{name:"hit_miss",mandatory:!0,description:"hit or miss"}]},{_id:222,functionName:"GameModeIsMode",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true/false if the current game mode is the given mode",example:"if ( GameModeIsMode( level.GAMEMODE_WAGER_MATCH ) )",variables:[{name:"gamemode",mandatory:!0,description:"(int)"}]},{_id:223,functionName:"GeneratePointsAroundCenter",returnValue:"vector[]",referenceVariable:"",section:"entity",access:"Server",description:"generate uniformly distributed points around a center in 2D (XY) plane",example:"array = GeneratePointsAroundCenter( enemy.origin, 500, 80, 100, 40, (-0.3,0,0) )",variables:[{name:"origin",mandatory:!0,description:"Position to start the search around."},{name:"maxSearchRadius",mandatory:!0,description:"the maximum radius away from origin."},{name:"innerSpacing",mandatory:!0,description:"the distance between points at the minRadius."},{name:"minRadius",mandatory:!1,description:"the minimum radius away from origin. should be between 0 and maxRadius (both inclusive)."},{name:"outerSpacing",mandatory:!1,description:"if defined, the distance between points will be Lerped from <innerSpacing> to [outerSpacing], to create a gradual distribution from minRadius to maxRadius."},{name:"distributionBias",mandatory:!1,description:"(vec2) if defined, the density of the points will be changed gradually along the direction of this vector. the magnitude will be use as scalar, with 1 being the norm scale."}]},{_id:224,functionName:"GenerateScriptEvent",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Creates a script event at the actor's origin, with default radius",example:"self GenerateScriptEvent()",variables:[{name:"origin",mandatory:!1,description:"Source position of the event."},{name:"radius",mandatory:!1,description:"Size of the event."},{name:"name",mandatory:!1,description:"Name of the event."}]},{_id:225,functionName:"GetAbsMaxs",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get absolute maximum bounds of the entity in world space.",example:"absMaxs = wallModel GetAbsMaxs()",variables:[]},{_id:226,functionName:"GetAbsMins",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get absolute minimum bounds of the entity in world space.",example:"absMins = wallModel GetAbsMins()",variables:[]},{_id:227,functionName:"GetActiveLocalClients",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Get the number of active local clients",example:"active_clients = GetActiveLocalClients()",variables:[]},{_id:228,functionName:"GetActorArray",returnValue:"void",referenceVariable:"",section:"ai",access:"Server",description:"Returns an array of the human AI",example:'aiarray = GetActorArray( "ralph", "targetname" )',variables:[{name:"name",mandatory:!1,description:"Name to search for."},{name:"key",mandatory:!1,description:"The key to search for."}]},{_id:229,functionName:"GetActorSpawnerArray",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Returns an array of all of the actor spawners in a level.",example:"spawners = GetSpawnerArray()",variables:[{name:"name",mandatory:!1,description:"Name to search for."},{name:"key",mandatory:!1,description:"The key to search for."}]},{_id:230,functionName:"GetActorSpawnerTeamArray",returnValue:"entity[]",referenceVariable:"",section:"spawn",access:"Server",description:"Returns an array of all of the spawners in a level",example:'enemies = GetActorSpawnerTeamArray( "axis", "neutral" )',variables:[{name:"team",mandatory:!0,description:"a team name, either 'axis', 'allies', or 'neutral'"},{name:"team",mandatory:!1,description:"any number of additional team names may be added, either 'axis', 'allies', or 'neutral'"}]},{_id:231,functionName:"GetActorTeamArray",returnValue:"entity[]",referenceVariable:"",section:"ai",access:"Server",description:"Returns an array of the human AI",example:'aiarray = GetActorTeamArray( "axis", "neutral" )',variables:[{name:"team",mandatory:!0,description:"a team name, either 'axis', 'allies', or 'neutral'"},{name:"team",mandatory:!1,description:"any number of additional team names may be added, either 'axis', 'allies', or 'neutral'"}]},{_id:232,functionName:"GetActorTeamCountRadius",returnValue:"void",referenceVariable:"",section:"ai",access:"Server",description:"Returns number of human actor AI within a sphere on a given set of teams",example:'nearbyOthersCount = GetActorTeamCountRadius( self.origin, 500, "axis", "neutral" )',variables:[{name:"origin",mandatory:!0,description:"Center of sphere[MANDATORY]"},{name:"team",mandatory:!1,description:"any number of team names may be added, either 'axis', 'allies', or 'neutral' (no team implies all teams)"}]},{_id:233,functionName:"GetActorWeaponOptions",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Return's the actors current weapon options, ex",example:"self GetActorWeaponOptions()",variables:[]},{_id:234,functionName:"GetAIArchetypeArray",returnValue:"entity[]",referenceVariable:"",section:"variables",access:"Server",description:"Returns an array of the AI for the given archetype and optionally given team",example:'aiarray = GetAIArchetypeArray( "human" )',variables:[{name:"team",mandatory:!1,description:"a team name, either 'axis', 'allies', 'neutral', or 'all'. Defaults to 'all'."}]},{_id:235,functionName:"GetAIArray",returnValue:"void",referenceVariable:"",section:"sentient",access:"Server",description:"Returns an array of the human AI",example:'aiarray = GetAIArray( "my_ai", "targetname" )',variables:[{name:"name",mandatory:!1,description:"Name to search for."},{name:"key",mandatory:!1,description:"The key to search for."}]},{_id:236,functionName:"GetAICount",returnValue:"int",referenceVariable:"",section:"sentient",access:"Server",description:"Returns the current ai count.",example:"aicount = GetAICount()",variables:[]},{_id:237,functionName:"GetAIFxName",returnValue:"string",referenceVariable:"<entity>",section:"effect",access:"Client",description:"Returns a FX name corresponding to the AI's aiFxBundle key/value pair.",example:"fxName = self GetAIFxName( localClientNum, surfaceTable )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client to check"},{name:"aiFxBundleKey",mandatory:!0,description:"Script bundle key defined within the AI's aiFxTable."}]},{_id:238,functionName:"GetAILimit",returnValue:"int",referenceVariable:"",section:"sentient",access:"Server",description:"Returns the max ai count set by script.",example:"ailimit = GetAILimit()",variables:[]},{_id:239,functionName:"GetAimAngles",returnValue:"string[]",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns an array with the angles of the aimTag and the relative aiming delta angles from this orientation.",example:'aim_angles = ent GetAimAngles( shootPos, "tag_aim", (0, 30, 0), (15, 10, 0), (60, 60, 0), (5, 5, 0), 11 )',variables:[{name:"targetPos",mandatory:!0,description:""},{name:"aimTag",mandatory:!0,description:""},{name:"prevAimTagAngles",mandatory:!0,description:""},{name:"prevAimAngles",mandatory:!0,description:""},{name:"maxAngles",mandatory:!0,description:""},{name:"maxAimDeltas",mandatory:!0,description:""},{name:"maxTagDelta",mandatory:!0,description:""}]},{_id:240,functionName:"GetAISpeciesArray",returnValue:"entity[]",referenceVariable:"",section:"sentient",access:"Server",description:"Returns an array of the AI",example:'aiarray = GetAISpeciesArray( "axis", "all" )',variables:[{name:"team",mandatory:!1,description:"a team name, either 'axis', 'allies', 'neutral', or 'all'. Defaults to 'all'."},{name:"species",mandatory:!1,description:"species of AI to get, 'human', 'dog', 'robot' or 'all'. Defaults to 'human'."}]},{_id:241,functionName:"GetAITeamArray",returnValue:"entity[]",referenceVariable:"",section:"teams",access:"Server",description:"Returns an array of the human AI and vehicle AI",example:'aiarray = GetAITeamArray( "axis", "neutral" )',variables:[{name:"team",mandatory:!0,description:"a team name, either 'axis', 'allies', or 'neutral'"},{name:"team",mandatory:!1,description:"any number of additional team names may be added, either 'axis', 'allies', or 'neutral'"}]},{_id:242,functionName:"GetAITriggerFlags",returnValue:"int",referenceVariable:"",section:"trigger",access:"Server",description:"Returns the spawn flags that will allow AI to activate triggers",example:'spawn("trigger_radius", (0,0,0), GetAITriggerFlags())',variables:[]},{_id:243,functionName:"GetAllCharacterBodies",returnValue:"int[]",referenceVariable:"",section:"player",access:"Both",description:"Returns all character indices, even disabled ones, for the current session mode (or specified session mode)",example:"heroIndices = GetAllCharacters()",variables:[{name:"sessionMode",mandatory:!0,description:"Session Mode Index"}]},{_id:244,functionName:"GetAllCharacterHeads",returnValue:"int[]",referenceVariable:"",section:"player",access:"Both",description:"Returns all character indices, even disabled ones, for the current session mode (or specified session mode)",example:"heroIndices = GetAllCharacterHeads()",variables:[{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:245,functionName:"GetAllNodes",returnValue:"pathnode[]",referenceVariable:"",section:"level",access:"Server",description:"Gets all of the nodes in a level",example:"nodes = GetAllNodes()",variables:[]},{_id:246,functionName:"GetAmmoCount",returnValue:"int",referenceVariable:"",section:"weapons",access:"Server",description:"Returns the count of ammo left",example:"n_ammo = self GetAmmoCount( w_weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon for which we need ammo count"}]},{_id:247,functionName:"GetAngleDelta",returnValue:"float",referenceVariable:"",section:"animation",access:"Server",description:"Get the angle delta of the animation",example:"angleDelta = getAngleDelta( arrivalAnim, 0, normalizedLength )",variables:[{name:"animation name",mandatory:!0,description:"Name of the animation"},{name:"start time",mandatory:!1,description:"Start time of the animation"},{name:"end time",mandatory:!1,description:"End time of the animation"}]},{_id:248,functionName:"GetAngleFromBits",returnValue:"float",referenceVariable:"",section:"entity",access:"Server",description:"Gets the angle (0 - 360) from the (compressed) bits",example:"yaw = GetAngleFromBits( bits, 3 )",variables:[]},{_id:249,functionName:"GetAngles",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get the rotation of the entity",example:"angles = self GetAngles()",variables:[]},{_id:250,functionName:"GetAnimCurrFrameCount",returnValue:"int",referenceVariable:"<entity>",section:"animation",access:"Client",description:"Get current frame for the given animation when its running.",example:"CurrFrameNum = GetAnimCurrFrameCount(climbAnim)",variables:[{name:"animation",mandatory:!0,description:"a primitive animation"}]},{_id:251,functionName:"GetAnimForCharacter",returnValue:"string",referenceVariable:"",section:"animation",access:"Both",description:"Returns the name of the animation to use for the character pose in the frontend",example:'frontendVignetteAnim = GetAnimForCharacter( characterIndex, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:252,functionName:"GetAnimFrameCount",returnValue:"int",referenceVariable:"",section:"animation",access:"Server",description:"Get total number of frames for the given animation.",example:"FrameNum = GetAnimFrameCount(climbAnim)",variables:[{name:"animation",mandatory:!0,description:"a primitive animation"}]},{_id:253,functionName:"GetAnimLength",returnValue:"float",referenceVariable:"",section:"animation",access:"Server",description:"Gets the length of an animation",example:"cycleTime = GetAnimLength( climbAnim )",variables:[{name:"animation",mandatory:!0,description:"a primitive animation"}]},{_id:254,functionName:"GetAnimStateCategory",returnValue:"string",referenceVariable:"",section:"animation",access:"Client",description:"Returns the current anim state category for an Actor.",example:"category = GetAnimStateCategory( )",variables:[]},{_id:255,functionName:"GetAnimTagOrigin",returnValue:"void",referenceVariable:"",section:"animation",access:"Server",description:"Returns the local tag position within the animation at the specified normalized time, has no consideration to bone hierarchy.",example:'tagPosition = GetAnimTagOrigin( arrivalAnim, 0, "tag_sync" )',variables:[{name:"animation name",mandatory:!0,description:"Name of the animation.[MANDATORY]"},{name:"tag name",mandatory:!0,description:"Name of the tag to look up within the animation."}]},{_id:256,functionName:"GetAnimTime",returnValue:"float",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Get the normalized animation time for the given animation.",example:"if ( (self GetAnimTime( %walk_and_run_loops ) ) < 0.5 )",variables:[{name:"animation",mandatory:!0,description:"animation to manipulate"}]},{_id:257,functionName:"GetArchetypeFromClassname",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Given classname, returns archetype name if its an AITYPE or VEHICLE.",example:'GetArchetypeFromClassname("spawner_enemy_54i_human_sniper_sniperrifle")',variables:[]},{_id:258,functionName:"GetAnyNodeArray",returnValue:"pathnode[]",referenceVariable:"",section:"pathnode",access:"Server",description:"Gets an array of nodes within given radius",example:"node = GetCoverNodeArray( self.origin, 256 )",variables:[{name:"pos",mandatory:!0,description:"search origin"},{name:"radius",mandatory:!0,description:"radius to search within"}]},{_id:259,functionName:"GetAssignedTeam",returnValue:"void",referenceVariable:"",section:"teams",access:"Server",description:"returns the player's team as assigned by matchmaking. 0 = No Team, 1 = OpFor, 2 = Allies, 3 = Spectator.",example:"team = GetAssignedTeam( player )",variables:[{name:"player",mandatory:!0,description:"The player"}]},{_id:260,functionName:"GetAssignedTeamName",returnValue:"string",referenceVariable:"",section:"teams",access:"Server",description:"returns the player's team as assigned by matchmaking. 0 = No Team, 1 = OpFor, 2 = Allies, 3 = Spectator.",example:"team = GetAssignedTeam( player )",variables:[{name:"player",mandatory:!0,description:"The player"}]},{_id:261,functionName:"GetAtrLoaded",returnValue:"string[]",referenceVariable:"",section:"animation",access:"Server",description:"return an array of anim tree name loaded onto the server.",example:"trees = GetAtrLoaded()",variables:[]},{_id:262,functionName:"GetAttachIgnoreCollision",returnValue:"bool",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns the ignore collision flag of the attached model at the given attachment slot",example:"model_ignore_collision = self GetAttachIgnoreCollision( index )",variables:[{name:"modelindex",mandatory:!0,description:"The index of the model attached to the entity, starting at 0, so for instance 3 will get the fourth model attached. (integer)"}]},{_id:263,functionName:"GetAttachmentCosmeticVariantForWeapon",returnValue:"int",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Get the AttachmentCosmeticVariantIndexes data to be passed in to GetWeapon",example:'acvi = self GetAttachmentCosmeticVariantForWeapon( class_num, "primary" )',variables:[{name:"custom Class",mandatory:!0,description:"Class Num"},{name:"loadoutSlot",mandatory:!0,description:"Loadout Slot (primary or secondary)"}]},{_id:264,functionName:"GetAttachmentCosmeticVariantIndexes",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Get the AttachmentCosmeticVariantIndexes data to be passed in to GetWeapon",example:'GetAttachmentCosmeticVariantIndexes( "mp7_mp", "acog", 2, "grip", 1 )',variables:[{name:"weaponname",mandatory:!0,description:"the name of the base weapon to return[OPTIONAL]"},{name:"variantindex_1",mandatory:!1,description:"the index of the cosmetic variant to use for the first attachment"},{name:"attachmentname_2",mandatory:!1,description:"the name of the second attachment[OPTIONAL]"},{name:"attachmentname_3",mandatory:!1,description:"the name of the third attachment"},{name:"variantindex_3",mandatory:!1,description:"the index of the cosmetic variant to use for the third attachment[OPTIONAL]"},{name:"variantindex_4",mandatory:!1,description:"the index of the cosmetic variant to use for the fourth attachment"},{name:"attachmentname_5",mandatory:!1,description:"the name of the fifth attachment[OPTIONAL]"},{name:"attachmentname_6",mandatory:!1,description:"the name of the sixth attachment"},{name:"variantindex_6",mandatory:!1,description:"the index of the cosmetic variant to use for the sixth attachment[OPTIONAL]"},{name:"variantindex_7",mandatory:!1,description:"the index of the cosmetic variant to use for the seventh attachment"},{name:"attachmentname_8",mandatory:!1,description:"the name of the eighth attachment[OPTIONAL]"}]},{_id:265,functionName:"GetAttachmentNames",returnValue:"string[]",referenceVariable:"",section:"entity",access:"Server",description:"Returns array containing the names for each type of attachment.",example:"attachmentNames = GetAttachmentNames()",variables:[]},{_id:266,functionName:"GetAttachModelName",returnValue:"string",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns the name of the attached model at the given attachment slot",example:"model_name = self GetAttachModelName( index )",variables:[{name:"modelindex",mandatory:!0,description:"The index of the model attached to the entity, starting at 0, so for instance 3 will get the fourth model attached. (integer)"}]},{_id:267,functionName:"GetAttachSize",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns the number of attached models for this entity.",example:"size = self GetAttachSize()",variables:[]},{_id:268,functionName:"GetAttachTagName",returnValue:"string",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns the tagname of the attached model at the given attachment slot",example:"tag_name = self GetAttachTagName( index )",variables:[{name:"modelindex",mandatory:!0,description:"The index of the model attached to the entity, starting at 0, so for instance 3 will get the fourth model attached. (integer)"}]},{_id:269,functionName:"GetBaseWeaponItemIndex",returnValue:"int",referenceVariable:"",section:"weapons",access:"Server",description:"Returns the base weapon item index from the statstable",example:'baseWeaponName = GetBaseWeaponItemIndex( "m16_acog_mp" )',variables:[{name:"weaponName",mandatory:!0,description:"full weapon name e.g. m16_acog_mp."}]},{_id:270,functionName:"GetBestInfluencepos",returnValue:"vector",referenceVariable:"<ai>",section:"ai",access:"Server",description:"returns the influence map position for ai, this is custom logic to return the closest posistion between the passed in thresholds",example:"dir = self GetBestInfluencePos( index, low, high)",variables:[{name:"index",mandatory:!0,description:"which influence map to use"},{name:"low",mandatory:!0,description:"the low threshold value to check against"},{name:"high",mandatory:!0,description:"the high threshold value to check against"}]},{_id:271,functionName:"GetBestSpawnPoint",returnValue:"string[]",referenceVariable:"",section:"spawn",access:"Server",description:"Returns a sorted array of spawnpoints in order from best to worst for the given team",example:"GetSortedSpawnPoints()",variables:[{name:"point team",mandatory:!0,description:"Team that we need the points for"},{name:"influencer team",mandatory:!0,description:"Influencer teams to compare the points against"},{name:"vis team",mandatory:!0,description:"Team mask to use for enemy vis tests"},{name:"player",mandatory:!1,description:"Player that we want the points for. The first parameter will still be used for the team."},{name:"predictedSpawn",mandatory:!1,description:"true if this is a predicted spawn request (used by texture streaming)."}]},{_id:272,functionName:"GetBGBRemaining",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Used to get how many of the given bgb the player has left, returns 0 if not found",example:'player GetBGBRemaining( "zm_bgb_perkaholic" )',variables:[{name:"item_name",mandatory:!0,description:"The name of the bgb to get the remaining count for"}]},{_id:273,functionName:"GetBitsForAngle",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Gets the compressed bits for an angle with <num bits> granularity",example:"bits = GetBitsForAngle( angle, 3 )",variables:[]},{_id:274,functionName:"GetBodyAccentColorCountForHero",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns the number of accents for the specified body model of a specific hero",example:"modelName = GetBodyAccentColorCountForHero( localClientNum, 0, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"sessionMode",mandatory:!0,description:"The character's sessionMode"},{name:"heroIndex",mandatory:!0,description:"The index of the hero in the current game-mode's character table"},{name:"bodyIndex",mandatory:!0,description:"The index of the body for the specific hero"}]},{_id:275,functionName:"GetBodyRenderOptionsPacked",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Gets the packed value of body render options (body type, style, colors)",example:"gibEntity GetBodyRenderOptionsPacked()",variables:[]},{_id:276,functionName:"GetBrushModelCenter",returnValue:"vector",referenceVariable:"",section:"level",access:"Server",description:"Get the center of the Brush Model entity",example:"center = GetBrushModelCenter( self )",variables:[{name:"entity",mandatory:!0,description:"The brush model entity"}]},{_id:277,functionName:"GetBubbleGumPack",returnValue:"string[]",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the player's bubblegum pack",example:"self.bgb_pack = self GetBubbleGumPack()",variables:[]},{_id:278,functionName:"GetBuildKitAttachmentCosmeticVariantIndexes",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Get attachment cosmetic variant indexes for the weapon from the player's build kit",example:"acvi = self GetBuildKitAttachmentCosmeticVariantIndexes( ar_standard )",variables:[{name:"weapon",mandatory:!0,description:"weapon object"},{name:"upgraded",mandatory:!1,description:"bool whether this should be the upgraded version. If so extclip and fmj will be added"}]},{_id:279,functionName:"GetBuildKitWeapon",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Get weapon object (including attachments) for the weapon from the player's build kit",example:"weapon = self GetBuildKitWeapon( ar_standard )",variables:[{name:"weapon",mandatory:!0,description:"weapon object"},{name:"upgraded",mandatory:!1,description:"bool whether this should be the upgraded version. If so extclip and fmj will be added"}]},{_id:280,functionName:"GetBuildKitWeaponOptions",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Get weapon options for the weapon from the player's build kit",example:"weapon_options = self GetBuildKitWeaponOptions( ar_standard, packapunch_camo_index )",variables:[{name:"weapon",mandatory:!0,description:"weapon object"},{name:"camo_index",mandatory:!1,description:"camo index to override the one from the build kit, typically a packapunch camo index"}]},{_id:281,functionName:"GetCamAngles",returnValue:"vector",referenceVariable:"",section:"entity",access:"Client",description:"Returns the camera view angles",example:"player GetCamPos()",variables:[]},{_id:282,functionName:"GetCamAnglesByLocalClientNum",returnValue:"vector",referenceVariable:"",section:"client",access:"Client",description:"Get the camera angles of the local client given",example:"cam_angles = GetCamAnglesByLocalClientNum( 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."}]},{_id:283,functionName:"GetCamAnimTime",returnValue:"int",referenceVariable:"",section:"animation",access:"Server",description:"Gets the duration of an xcam in milliseconds.",example:'GetCamAnimTime( "proto_melee_cam" )',variables:[{name:"cam_anim",mandatory:!0,description:"The animation to play"}]},{_id:284,functionName:"GetCamPos",returnValue:"vector",referenceVariable:"",section:"entity",access:"Client",description:"Returns the camera position",example:"player GetCamPos()",variables:[]},{_id:285,functionName:"GetCamPosByLocalClientNum",returnValue:"vector",referenceVariable:"",section:"client",access:"Client",description:"Get the camera position of the local client given",example:"cam_origin = GetCamPosByLocalClientNum( 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."}]},{_id:286,functionName:"GetCentroid",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Gets the centroid of an entity",example:"centroid = self GetCentroid()",variables:[]},{_id:287,functionName:"GetCharacterAssetName",returnValue:"string",referenceVariable:"",section:"player",access:"Both",description:"Returns the asset name for a character for the current session mode",example:'heroName = GetCharacterAssetName( characterIndex, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:288,functionName:"GetCharacterBodyModelColorCount",returnValue:"int",referenceVariable:"",section:"player",access:"Both",description:"Returns the body model count for a character for the current session mode",example:'heroBodyModelCount = GetCharacterBodyModelCount( characterIndex, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"bodyStyleIndex",mandatory:!0,description:"The index of the body style in the character"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:289,functionName:"GetCharacterBodyModelCount",returnValue:"int",referenceVariable:"",section:"player",access:"Both",description:"Returns the body model count for a character for the current session mode",example:'heroBodyModelCount = GetCharacterBodyModelCount( characterIndex, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"sessionMode",mandatory:!0,description:"Session Mode Index"}]},{_id:290,functionName:"GetCharacterBodyStyleIndex",returnValue:"int",referenceVariable:"",section:"player",access:"Both",description:"Returns the index of the body style designated by the given display name",example:'bodyStyleIndex = GetCharacterBodyStyleIndex( true, "Technomancer" )',variables:[{name:"gender",mandatory:!0,description:"Whether or not to use the male bodytype"},{name:"bodyStyleDisplayName",mandatory:!0,description:"The name of the body style"}]},{_id:291,functionName:"GetCharacterCustomizationForXUID",returnValue:"void",referenceVariable:"",section:"player",access:"Client",description:null,example:"GetCharacterCustomizationForXUID( <xuid>)",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"xuid",mandatory:!0,description:"The xuid of the player to get customization for"}]},{_id:292,functionName:"GetCharacterDisplayName",returnValue:"string",referenceVariable:"",section:"player",access:"Both",description:"Returns the display name for a character for the current session mode",example:'heroName = GetCharacterDisplayName( characterIndex, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:293,functionName:"GetCharacterFields",returnValue:"void",referenceVariable:"",section:"player",access:"Both",description:"Returns info for the character pose playerbodytype",example:'heroFields = GetCharacterFields( characterIndex, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:294,functionName:"GetCharacterHeadRenderOptions",returnValue:"void",referenceVariable:"",section:"player",access:"Both",description:"Calculates the packed helmet render option - to be passed to SetBodyRenderOptions()",example:"helmetRenderOptions = GetCharacterHeadRenderOptions( 0 )",variables:[{name:"headIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"}]},{_id:295,functionName:"GetCharacterHelmetHidesHead",returnValue:"bool",referenceVariable:"",section:"player",access:"Both",description:"Returns whether or not the characters head should be hidden based on the helmet",example:"hideHead = GetCharacterHelmetHidesHead( 0, 0, 0 )",variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"helmetIndex",mandatory:!0,description:"The index of the helmet belonging to that character"},{name:"sessionMode",mandatory:!0,description:"The session mode ( mp cp zm )"}]},{_id:296,functionName:"GetCharacterHelmetModelColorCount",returnValue:"int",referenceVariable:"",section:"player",access:"Both",description:"Returns the helmet model count for a character for the current session mode",example:'heroHelmetModelCount = GetCharacterHelmetModelCount( characterIndex, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"helmetStyleIndex",mandatory:!0,description:"The index of the helmet style in the character"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:297,functionName:"GetCharacterHelmetModelCount",returnValue:"int",referenceVariable:"",section:"player",access:"Both",description:"Returns the helmet model count for a character for the current session mode",example:'heroHelmetModelCount = GetCharacterHelmetModelCount( characterIndex, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:298,functionName:"GetCharacterHelmetRenderOptions",returnValue:"void",referenceVariable:"",section:"player",access:"Both",description:"Calculates the packed helmet render option - to be passed to SetBodyRenderOptions()",example:"helmetRenderOptions = GetCharacterHelmetRenderOptions( 0, 1, 1, 2, 3 )",variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"helmetIndex",mandatory:!0,description:"The index of the helmet belonging to that character"},{name:"colorIndex1",mandatory:!0,description:"The index of accent color 1"},{name:"colorIndex2",mandatory:!0,description:"The index of accent color 2"},{name:"colorIndex3",mandatory:!0,description:"The index of accent color 3"}]},{_id:299,functionName:"GetCharacterIndex",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Gets the character index",example:"index = self GetCharacterIndex()",variables:[]},{_id:300,functionName:"GetCharacterModeRenderOptions",returnValue:"void",referenceVariable:"",section:"player",access:"Both",description:"Calculates the packed mode render option - to be passed to SetBodyRenderOptions()",example:"modeRenderOptions = GetCharacterModeRenderOptions( SESSIONMODE_MULTIPLAYER )",variables:[{name:"session_mode",mandatory:!0,description:"Session Mode enum index"}]},{_id:301,functionName:"GetClassIndexFromName",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Gets the index in a particular class",example:'GScr_GetClassIndexFromName( "CLASS_SMG" )',variables:[{name:"className",mandatory:!0,description:""}]},{_id:302,functionName:"GetClientFieldVersion",returnValue:"int",referenceVariable:"",section:"client",access:"Server",description:"Returns the version of the specifiec client field, in the specified client field set - or 0 if the field isn't registered.",example:'if(GetClientFieldVersion( "world", "fog_volume_active" ))',variables:[]},{_id:303,functionName:"GetClientTime",returnValue:"int",referenceVariable:"<entity>",section:"client",access:"Client",description:"Gets the current client time in milliseconds",example:"currTime = ent GetClientTime()",variables:[]},{_id:304,functionName:"GetClones",returnValue:"entity[]",referenceVariable:"",section:"entity",access:"Client",description:"Get an array of all the clones",example:"clones = GetClones( localClientNum )",variables:[{name:"local client num",mandatory:!0,description:"local client"}]},{_id:305,functionName:"GetClosestPointOnNavMesh",returnValue:"vector",referenceVariable:"",section:"level",access:"Server",description:"Get a point on NavMesh that's closest to the given position within radius. Returns the adjusted position if found one, or undefined if not found. If distFromBoundary is defined, the point found on NavMesh will then be moved again to get it away from boundary",example:"posOnNavMesh = GetClosestPointOnNavMesh( (10,20,30), 25, 15 )",variables:[{name:"position",mandatory:!0,description:"Position to start the search around."},{name:"searchRadius",mandatory:!1,description:"Radius to search within. If not provided, a default value proximately equal to player size will be used."},{name:"distFromBoundary",mandatory:!1,description:"Distance to keep away from NavMesh boundary. This distance can NOT be guaranteed. If not provided, it will be treated as 15 (AI default radius)."},{name:"materialFlags",mandatory:!1,description:"the flags marking whether a face type can be used"}]},{_id:306,functionName:"GetClosestPointOnNavVolume",returnValue:"vector",referenceVariable:"<flying_ai>",section:"level",access:"Server",description:"Get a point on nav volume that's closest to the given position within radius. Returns the adjusted position if found one, or undefined if not found.",example:"posOnNavVolume = self GetClosestPointOnNavVolume( (10,20,30), 25 )",variables:[{name:"position",mandatory:!0,description:"Position to start the search around."},{name:"searchRadius",mandatory:!1,description:"Radius to search within. If not provided, a default value proximately equal to player size will be used."}]},{_id:307,functionName:"GetContractName",returnValue:"string",referenceVariable:"",section:"objective",access:"Server",description:"Gets the name of the specified contract",example:"contractName = GetContractName( contractIndex )",variables:[{name:"contractIndex",mandatory:!0,description:"Contract ID"}]},{_id:308,functionName:"GetContractRequiredCount",returnValue:"int",referenceVariable:"",section:"objective",access:"Server",description:"Gets the required count for the specified contract",example:"contractName = GetContractRequiredCount( contractIndex )",variables:[{name:"contractIndex",mandatory:!0,description:"Contract ID"}]},{_id:309,functionName:"GetContractRequirements",returnValue:"string[]",referenceVariable:"",section:"entity",access:"Server",description:"Returns an array of contract requirements. Each requirement takes up two indices, 'reqType' and 'reqData'.",example:"mapNames = GetContractRequirements( contractIndex )",variables:[{name:"contractIndex",mandatory:!0,description:"The index of the contract"}]},{_id:310,functionName:"GetContractResetConditions",returnValue:"string",referenceVariable:"",section:"objective",access:"Server",description:"Gets the reset conditions of the specified contract",example:"resetConditions = GetContractResetConditions( contractIndex )",variables:[{name:"contractIndex",mandatory:!0,description:"Contract ID"}]},{_id:311,functionName:"GetControllerPosition",returnValue:"string[]",referenceVariable:"",section:"client",access:"Client",description:'get current deflection of control, returns values via an array with vector values for "look" and "move" which correspond to those controls. Values are -1 to 1 and represent the given axis on the vector',example:"pos = self GetControllerPosition() ...",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the controller you want the position of"}]},{_id:312,functionName:"GetControllerType",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"returns the controller type of the player",example:"player GetControllerType()",variables:[]},{_id:313,functionName:"GetCorpseAnim",returnValue:"anim",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the animation that the corpse will play",example:"deathAnim = self GetCorpseAnim()",variables:[]},{_id:314,functionName:"GetCorpseArray",returnValue:"entity[]",referenceVariable:"",section:"variables",access:"Server",description:"Returns an array of all of the items in a level.",example:"origins = GetCorpseArray()",variables:[]},{_id:315,functionName:"GetCounterTotal",returnValue:"string",referenceVariable:"",section:"level",access:"Server",description:"Gets the counter count for the given counter",example:'count = GetCounterTotal( "global_comebacks" )',variables:[{name:"counterType",mandatory:!0,description:"The counter type"}]},{_id:316,functionName:"GetCoverNodeArray",returnValue:"pathnode[]",referenceVariable:"",section:"pathnode",access:"Server",description:"Gets an array of cover nodes within given radius",example:"node = GetCoverNodeArray( self.origin, 256 )",variables:[{name:"pos",mandatory:!0,description:"search origin"},{name:"radius",mandatory:!0,description:"radius to search within"}]},{_id:317,functionName:"GetCrateHeadObjective",returnValue:"istring",referenceVariable:"",section:"objective",access:"Server",description:"Returns the equipment head objective as described in the grenadeweapon gdt.",example:"crateObjective = GetCrateHeadObjective( uav )",variables:[{name:"weapon",mandatory:!0,description:""}]},{_id:318,functionName:"GetCurrentAnimScriptedName",returnValue:"string",referenceVariable:"<entity>",section:"animation",access:"Client",description:"Get current frame for the given animation when its running.",example:"animName = CScr_GetCurrentAnimScriptedName()",variables:[]},{_id:319,functionName:"GetCurrentEventId",returnValue:"int",referenceVariable:"<ai_or_player>",section:"ai",access:"Server",description:"Gets the id from the current event.",example:"eventId = self GetCurrentEventId()",variables:[]},{_id:320,functionName:"GetCurrentEventName",returnValue:"string",referenceVariable:"<ai_or_player>",section:"ai",access:"Server",description:"Gets the name of the current event.",example:"eventId = self GetCurrentEventName()",variables:[]},{_id:321,functionName:"GetCurrentEventOriginator",returnValue:"entity",referenceVariable:"<ai_or_player>",section:"ai",access:"Server",description:"Gets the originator from the current event if any",example:"target = self GetCurrentEventOriginator()",variables:[]},{_id:322,functionName:"GetCurrentEventType",returnValue:"int",referenceVariable:"<ai_or_player>",section:"ai",access:"Server",description:"Gets the type from the current event.",example:"type = self GetCurrentEventType()",variables:[]},{_id:323,functionName:"GetCurrentEventTypeName",returnValue:"string",referenceVariable:"<ai_or_player>",section:"ai",access:"Server",description:"Gets the type string name from the current event.",example:"type = self GetCurrentEventTypeName()",variables:[]},{_id:324,functionName:"GetCurrentGunRank",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the gun current rank",example:"rank - GetCurrentGunRank(0)",variables:[{name:"index",mandatory:!0,description:"the index of the gun to get"}]},{_id:325,functionName:"GetCurrentWeaponIncludingMelee",returnValue:"void",referenceVariable:"",section:"weapons",access:"Client",description:"Returns the name of the weapon being used by the specified local client, and will return the melee weapon if the client is in a melee state",example:"currentWeapon = GetCurrentWeapon( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client number of the player"}]},{_id:326,functionName:"GetCustomTeamName",returnValue:"string",referenceVariable:"",section:"teams",access:"Server",description:"Get the team name",example:"name = GetCustomTeamName( teamid )",variables:[{name:"teamid",mandatory:!0,description:"TeamID"}]},{_id:327,functionName:"GetCyberComAbilityName",returnValue:"string",referenceVariable:"",section:"weapons",access:"Server",description:"Gets the cybercom ability name given the flag, type",example:"GetCyberComAbilityName( flag, type )",variables:[{name:"flag",mandatory:!0,description:"flag field"}]},{_id:328,functionName:"GetCybercomType",returnValue:"int",referenceVariable:"",section:"weapons",access:"Client",description:"Gets the active cybercom type",example:"cybercom_type = player getCybercomType()",variables:[]},{_id:329,functionName:"GetCyberComWeapon",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Gets the cybercom gadget weapon given the flag, type, and if upgraded",example:"GetCyberComWeapon( flag, type, upgraded )",variables:[{name:"flag",mandatory:!0,description:"flag field"},{name:"type",mandatory:!0,description:"type of weapon"},{name:"upgraded",mandatory:!0,description:"true if the weapon is upgraded"}]},{_id:330,functionName:"GetDamageableEntArray",returnValue:"entity[]",referenceVariable:"",section:"variables",access:"Server",description:"Returns the entities that can be damaged. Can optionally take an origin, radius, and a flag to check 3D.",example:"entities = GetDamageableEntArray( maxDist, true )",variables:[{name:"origin",mandatory:!1,description:"origin to check against"},{name:"radius",mandatory:!1,description:"max distance to origin"},{name:"checkZ",mandatory:!1,description:"if true then check distance in 3d"}]},{_id:331,functionName:"GetDebugEye",returnValue:"vector",referenceVariable:"",section:"debug",access:"Server",description:"Gets the debug position of the eye for an AI or Player",example:"eyePos = player GetDebugEye()",variables:[]},{_id:332,functionName:"GetDecorations",returnValue:"bool[]",referenceVariable:"<player>",section:"player",access:"Server",description:"Gets an array of booleans that represents all the decorations the player has earned",example:"medals = e_player GetDecorationsEarned()",variables:[{name:" only_decorations_earned ",mandatory:!1,description:"Only get the decorations that the player has earned"}]},{_id:333,functionName:"GetDefaultClassSlot",returnValue:"string",referenceVariable:"",section:"weapons",access:"Server",description:"Gets the item in a particular default class slot",example:'GetDefaultClassSlot( "cqb", "primary" ); // Returns primary weapon reference',variables:[{name:"classname",mandatory:!0,description:"the classname of the item"},{name:"slotname",mandatory:!0,description:"The slot to check"}]},{_id:334,functionName:"GetDemoVersion",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns the demo version value",example:"if ( GetDemoVersion() )",variables:[]},{_id:335,functionName:"GetDistanceFromScreenCenter",returnValue:"float",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Get the distance from the screen center to the entity",example:"ent GetDistanceFromScreenCenter( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client to check"}]},{_id:336,functionName:"GetDroppedWeapons",returnValue:"entity[]",referenceVariable:"",section:"weapons",access:"Server",description:"Returns an array containing all the dropped weapons in the level",example:null,variables:[]},{_id:337,functionName:"GetDynEnt",returnValue:"dynentity",referenceVariable:"",section:"entity",access:"Client",description:"Get the dynent with the specified targetname",example:'twig = getdynent("twig")',variables:[{name:"targetname",mandatory:!0,description:""}]},{_id:338,functionName:"GetDynEntArray",returnValue:"void",referenceVariable:"",section:"variables",access:"Client",description:"Get a dynent array with the specified targetname",example:'twigs = getdynentarray("twig")',variables:[{name:"targetname",mandatory:!1,description:""}]},{_id:339,functionName:"GetEnemies",returnValue:"entity[]",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns an array of enemies.",example:"enemies = self GetEnemies()",variables:[]},{_id:340,functionName:"GetEnemyScramblerAmount",returnValue:"float",referenceVariable:"<player>",section:"player",access:"Client",description:"Returns the amount alpha of the enemy scrambler applied",example:"alpha = player GetEnemyScramblerAmount( )",variables:[]},{_id:341,functionName:"GetEnt",returnValue:"entity",referenceVariable:"",section:"entity",access:"Server",description:"Looks up entities by key and name",example:'spawner = GetEnt( "doorguy1", "targetname" )',variables:[{name:"name",mandatory:!0,description:"name to search for"},{name:"key",mandatory:!0,description:"key that name goes with"},{name:"ignore spawners",mandatory:!1,description:"if true then you won't get a spawner back"}]},{_id:342,functionName:"GetEntArray",returnValue:"entity[]",referenceVariable:"",section:"entity",access:"Server",description:"Looks up entities by key and name and a return an array of the matched entities",example:'spawners = GetEntArray( "doorguy1", "targetname" )',variables:[{name:"name",mandatory:!1,description:"name to search for"},{name:"key",mandatory:!1,description:"key that name goes with"},{name:"ignore spawners",mandatory:!1,description:"if true then you won't get a spawner back"}]},{_id:343,functionName:"GetEntArrayByType",returnValue:"entity[]",referenceVariable:"",section:"variables",access:"Client",description:"Gets an array of entities that have the given the type of the entity ( for example, ET_MISSILE )",example:"grenades = GetEntArray( 0, ET_MISSILE )",variables:[{name:"localclientnum",mandatory:!0,description:"Which local client's entity list to use."},{name:"type",mandatory:!0,description:"Type of the entity. Look into shared.gsh for the ET enum"}]},{_id:344,functionName:"GetEntArrayFromArray",returnValue:"entity[]",referenceVariable:"",section:"variables",access:"Server",description:"Searches given array entities by key and name and a return an array of the matched entities",example:'spawners = GetEntArrayFromArray( array, "doorguy1", "targetname" )',variables:[{name:"array",mandatory:!0,description:"array of entities"},{name:"name",mandatory:!0,description:"name to search for"},{name:"key",mandatory:!0,description:"key that name goes with"}]},{_id:345,functionName:"GetEntByNum",returnValue:"entity",referenceVariable:"",section:"entity",access:"Server",description:"Gets an entity from its entity number",example:"entity = GetEntByNum( entnum )",variables:[{name:"entity number",mandatory:!0,description:"integer) The number of the entity to get"}]},{_id:346,functionName:"GetEnterButton",returnValue:"string",referenceVariable:"",section:"level",access:"Server",description:"Gets the enter button.",example:"getEnterButton()",variables:[]},{_id:347,functionName:"GetEntityAnimRate",returnValue:"float",referenceVariable:"<entity>",section:"animation",access:"Server",description:"get the entity animation rate - ZOMBIES ONLY",example:"rate = self GetEntityAnimRate()",variables:[]},{_id:348,functionName:"GetEntityNumber",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get the entity number of the entity",example:"hitEntNum = hitEnt getEntityNumber()",variables:[]},{_id:349,functionName:"GetEntityType",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get the type of entity",example:"inflictorEntType = grenade getEntityType()",variables:[]},{_id:350,functionName:"GetEntNavMaterial",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"get NavMesh material at where the entity stands",example:"material = GetEntNavMaterial( ai_actor )",variables:[{name:"ai_or_vehicle",mandatory:!0,description:"An AI character or an AI vehicle"}]},{_id:351,functionName:"GetEntNum",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get the entity number for this entity",example:"self GetEntNum()",variables:[]},{_id:352,functionName:"GetEquipmentHeadObjective",returnValue:"istring",referenceVariable:"",section:"objective",access:"Server",description:"Returns the equipment head objective as described in the grenadeweapon gdt.",example:"headObjective = GetEquipmentHeadObjective( bouncingbettty )",variables:[{name:"weapon",mandatory:!0,description:""}]},{_id:353,functionName:"GetEquippedBodyAccentColorForHero",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns an array of the equipped body accent colors of a specific hero",example:"colorArray = GetEquippedBodyAccentColorForHero( localClientNum, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"sessionMode",mandatory:!0,description:"The character's session mode"},{name:"heroIndex",mandatory:!0,description:"The index of the hero in the current game-mode's character table or in case of lobby client, his queue position"},{name:"bodyIndex",mandatory:!0,description:"The index of the body"},{name:"colorIndex",mandatory:!0,description:"The index of the accent color"},{name:"getForLobbyClient",mandatory:!1,description:"If this is set then we are supposed to retrieve for lobby client"}]},{_id:354,functionName:"GetEquippedBodyForHero",returnValue:"string",referenceVariable:"",section:"entity",access:"Client",description:"Returns the name of the equipped body model of a specific hero",example:"modelName = GetEquippedBodyForHero( localClientNum, SESSIONMODE_MULTIPLAYER, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"sessionMode",mandatory:!0,description:"The character's sessionMode"},{name:"heroIndex",mandatory:!0,description:"The index of the hero in the current game-mode's character table"}]},{_id:355,functionName:"GetEquippedBodyIndexForHero",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns the index of the equipped body model of a specific hero",example:"bodyIndex = GetEquippedBodyIndexForHero( localClientNum, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"sessionMode",mandatory:!0,description:"haracter Session Mode"},{name:"heroIndex",mandatory:!0,description:"The index of the hero in the current game-mode's character table or in case of lobby client, his queue position"},{name:"getForLobbyClient",mandatory:!1,description:"If this is set then we are supposed to retrieve for lobby client"}]},{_id:356,functionName:"GetEquippedCharacterIndexForLobbyClientHero",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Returns the name of the equipped helmet accents colors of a specific hero",example:"colorArray = GetEquippedHelmetAccentColorForHero( localClientNum, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"lobbyClientQueueIndex",mandatory:!0,description:"Queue index for lobby client, from which we get all his other information"}]},{_id:357,functionName:"GetEquippedHeadIndexForHero",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns the index of the equipped head index",example:"helmetIndex = GetEquippedHeadIndexForHero( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"sessionMode",mandatory:!0,description:"The character's sessionMode"},{name:"getForLobbyClient",mandatory:!1,description:"If this is set then check for the equipped head on the client in the lobbyQueueIndex position"}]},{_id:358,functionName:"GetEquippedHelmetAccentColorForHero",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns the name of the equipped helmet accents colors of a specific hero",example:"colorArray = GetEquippedHelmetAccentColorForHero( localClientNum, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"sessionMode",mandatory:!0,description:"The character session mode"},{name:"heroIndex",mandatory:!0,description:"The index of the hero in the current game-mode's character table"},{name:"helmetIndex",mandatory:!0,description:"The index of the helmet"},{name:"colorIndex",mandatory:!0,description:"The index of the accent color"},{name:"getForLobbyClient",mandatory:!1,description:"If this is set then we are supposed to retrieve for lobby client"}]},{_id:359,functionName:"GetEquippedHelmetForHero",returnValue:"string",referenceVariable:"",section:"entity",access:"Client",description:"Returns the name of the equipped helmet model of a specific hero",example:"modelName = GetEquippedHelmetForHero( localClientNum, SESSIONMODE_MULTIPLAYER, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"sessionMode",mandatory:!0,description:"The character's sessionMode"},{name:"heroIndex",mandatory:!0,description:"The index of the hero in the current game-mode's character table"}]},{_id:360,functionName:"GetEquippedHelmetIndexForHero",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns the index of the equipped helmet index of a specific hero",example:"helmetIndex = GetEquippedHelmetIndexForHero( localClientNum, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"sessionMode",mandatory:!0,description:"The character's sessionMode"},{name:"heroIndex",mandatory:!0,description:"The index of the hero in the current game-mode's character table or in case of lobby client, his queue position"},{name:"getForLobbyClient",mandatory:!1,description:"If this is set then we are supposed to retrieve for lobby client"}]},{_id:361,functionName:"GetEquippedHeroIndex",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns the index of the equipped hero for the client",example:"heroIndex = GetEquippedHeroIndex( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"sessionMode",mandatory:!0,description:"The character's sessionMode"}]},{_id:362,functionName:"GetEquippedHeroMode",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns the mode of the equipped hero for the client",example:"heroIndex = GetEquippedHeroMode( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"}]},{_id:363,functionName:"GetEquippedLoadoutItemForHero",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns 1 if the hero's ability is equipped, 0 if the weapon is equipped.",example:"isAbilityEquipped = GetEquippedLoadoutItemForHero( localClientNum, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"heroIndex",mandatory:!0,description:"The index of the hero in the current game-mode's character table"}]},{_id:364,functionName:"GetEquippedShowcaseWeaponForHero",returnValue:"string",referenceVariable:"",section:"weapons",access:"Client",description:"Returns the showcase weapon of a specific hero",example:"showcaseWeapon = GetEquippedShowcaseWeaponForHero( localClientNum, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"sessionMode",mandatory:!0,description:"The character's sessionMode"},{name:"heroIndex",mandatory:!0,description:"The index of the hero in the current game-mode's character table or in case of lobby client, his queue position"},{name:"getForLobbyClient",mandatory:!1,description:"If this is set then we are supposed to retrieve for lobby client"}]},{_id:365,functionName:"GetEventPointOfInterest",returnValue:"vector",referenceVariable:"<ai_or_player>",section:"ai",access:"Server",description:"Gets the point of interest from the current event.",example:"point = self GetEventPointOfInterest()",variables:[]},{_id:366,functionName:"GetEye",returnValue:"vector",referenceVariable:"<entity>",section:"sentient",access:"Server",description:"Get the eye position of the entity.",example:"eye_pos = self GetEye()",variables:[]},{_id:367,functionName:"GetEyeApprox",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get the eye position of the entity with some added offset.",example:"approx_eye_pos = self GetEyeGetEyeApprox()",variables:[]},{_id:368,functionName:"GetFirstHeadOfGender",returnValue:"int",referenceVariable:"",section:"player",access:"Client",description:'Returns the first head of gender ("male" or "female")',example:'headIndex = GetFirstHeadOfGender( "male", "mp" )',variables:[{name:"gender",mandatory:!0,description:'"male" or "female"'},{name:"sessionmode",mandatory:!1,description:"The session mode (cp,mp,zm)"}]},{_id:369,functionName:"GetFirstHeroOfGender",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:'Returns the first hero of gender ("male" or "female")',example:'characterIndex = GetFirstHeroOfGender( "male", "mp" )',variables:[{name:"gender",mandatory:!0,description:'"male" or "female"'},{name:"sessionmode",mandatory:!1,description:"The session mode (cp,mp,zm)"}]},{_id:370,functionName:"GetFirstTouchFraction",returnValue:"float",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns the trace fraction of a capsule trace against the other entity",example:"fraction = GetFirstTouchFraction( player, trigger, old_origin, current_origin )",variables:[{name:"other entity",mandatory:!0,description:"Entity to check against"},{name:"start",mandatory:!0,description:"Starting point of the trace"},{name:"end",mandatory:!0,description:"Ending point of the trace"}]},{_id:371,functionName:"GetFlowGraphDef",returnValue:"void",referenceVariable:"",section:"entity",access:"Both",description:"returns a struct representing the flow graph definition asset",example:'flowGraphDef = GetFlowGraphDef( "my_flow_graph" )',variables:[{name:"name",mandatory:!0,description:"The name of the flow graph asset"}]},{_id:372,functionName:"GetFogSettings",returnValue:"float[]",referenceVariable:"",section:"level",access:"Server",description:"Get the current fog settings as an array.",example:"fogsettings = getfogsettings()",variables:[]},{_id:373,functionName:"GetFootstepStrings",returnValue:"string[]",referenceVariable:"",section:"string",access:"Client",description:"Returns an array containing all the footstep names",example:"footstepNameArray = GetFootstepStrings()",variables:[]},{_id:374,functionName:"GetFreeActorCount",returnValue:"int",referenceVariable:"",section:"ai",access:"Server",description:"Get number of free actors.",example:"GetFreeActorCount()",variables:[]},{_id:375,functionName:"GetFreerunTrackIndex",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns the unique id for this mission",example:'level.index = GetFreerunTrackIndex( "mp_Freerun_01" )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"}]},{_id:376,functionName:"GetFriendlyScramblerAmount",returnValue:"float",referenceVariable:"<player>",section:"player",access:"Client",description:"Returns the amount alpha of the friendly scrambler applied",example:"alpha = player GetFriendlyScramblerAmount( )",variables:[]},{_id:377,functionName:"GetGadgetPower",returnValue:"float",referenceVariable:"",section:"weapons",access:"Client",description:"Returns the current power level of the player gadget",example:"power = GetGadgetPower( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"},{name:"slot",mandatory:!1,description:"Slot of the gadget. Default is 0."}]},{_id:378,functionName:"GetGameTypeEnumFromName",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns the enum value corresponding to the current game type from global leaderboard gametype entries.",example:'gameTypeEnum = GetGameTypeEnumFromName( "tdm", false )',variables:[{name:"gameTypeName",mandatory:!0,description:'game type name e.g. "tdm".'},{name:"isHardcore",mandatory:!0,description:"True if the hardcore mode is on"}]},{_id:379,functionName:"GetGametypeSetting",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Gets the value of a gametype setting.",example:'GetGametypeSetting( "scoreLimit" )',variables:[{name:"setting",mandatory:!0,description:"The setting name as a string."}]},{_id:380,functionName:"GetGrappleTargetArray",returnValue:"entity[]",referenceVariable:"",section:"variables",access:"Server",description:"Returns an array of all of the grapple targets",example:"enemies = GetGrappleTargetArray()",variables:[]},{_id:381,functionName:"GetGroundEnt",returnValue:"entity",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Gets the entity beneath the calling entity",example:"ground_ent = self GetGroundEnt()",variables:[]},{_id:382,functionName:"GetHeadGender",returnValue:"string",referenceVariable:"",section:"player",access:"Client",description:'Returns the given head\'s gender ("male" or "female")',example:'gender = GetHeadGender( headIndex, "mp" )',variables:[{name:"headIndex",mandatory:!0,description:"The index of the head"},{name:"sessionmode",mandatory:!1,description:"The session mode (cp,mp,zm)"}]},{_id:383,functionName:"GetHealthOverlayTime",returnValue:"int",referenceVariable:"",section:"hud",access:"Client",description:"Returns the time the health overlay has been on",example:"power = GetHealthOverlayTime( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"}]},{_id:384,functionName:"GetHeliDamageState",returnValue:"int",referenceVariable:"",section:"damage",access:"Client",description:"Returns the damage state of the heli.",example:"vehicle GetHeliDamageState( )",variables:[]},{_id:385,functionName:"GetHelmetAccentColorCountForHero",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns the number of accents for the specified helmet model of a specific hero",example:"accentColorCount = GetHelmetAccentColorCountForHero( localClientNum, 0, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"heroIndex",mandatory:!0,description:"The index of the hero in the current game-mode's character table"},{name:"helmetIndex",mandatory:!0,description:"The index of the helmet for the specific hero"}]},{_id:386,functionName:"GetHeroBodyModelIndices",returnValue:"int[]",referenceVariable:"",section:"entity",access:"Client",description:"Returns the given hero's body models for the current session mode",example:'heroBodyModelNames = GetHeroBodyModels( heroIndex, "mp" )',variables:[{name:"heroIndex",mandatory:!0,description:"The index of the hero"},{name:"sessionmode",mandatory:!1,description:"The session mode (cp,mp,zm)"}]},{_id:387,functionName:"GetHeroes",returnValue:"int[]",referenceVariable:"",section:"entity",access:"Client",description:"Returns all hero indices for the current session mode (or specified session mode)",example:"heroIndices = GetHeroes()",variables:[{name:"sessionmode",mandatory:!1,description:"Session Mode (cp,mp,zm)"}]},{_id:388,functionName:"GetHeroGender",returnValue:"string",referenceVariable:"",section:"entity",access:"Client",description:'Returns the given hero\'s gender ("male" or "female")',example:'gender = GetHeroGender( heroIndex, "mp" )',variables:[{name:"heroIndex",mandatory:!0,description:"The index of the hero"},{name:"sessionmode",mandatory:!1,description:"The session mode (cp,mp,zm)"}]},{_id:389,functionName:"GetHeroHeadModelIndices",returnValue:"int[]",referenceVariable:"",section:"entity",access:"Client",description:"Returns all hero indices for the current session mode",example:'heroHelmetModelNames = GetHeroHelmetModels( heroIndex, "mp" )',variables:[]},{_id:390,functionName:"GetHeroHelmetModelIndices",returnValue:"int[]",referenceVariable:"",section:"level",access:"Client",description:"Returns the given hero's helmet models for the current session mode",example:'heroHelmetModelNames = GetHeroHelmetModels( heroIndex, "mp" )',variables:[{name:"heroIndex",mandatory:!0,description:"The index of the hero"},{name:"sessionmode",mandatory:!1,description:"The session mode (cp,mp,zm)"}]},{_id:391,functionName:"GetHorizontalOffsetFromScreenCenter",returnValue:"float",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Get the distance from the screen center to the entity",example:"ent GetDistanceFromScreenCenter( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client to check"},{name:"width",mandatory:!1,description:"width to check against"}]},{_id:392,functionName:"GetInfluenceAt",returnValue:"float",referenceVariable:"",section:"entity",access:"Server",description:"Returns the influence value at the origin position on the influence map, undefined if no value can be found.",example:"GetInfluenceAt(influenceMapIndex, origin)",variables:[{name:"influenceMapIndex",mandatory:!0,description:"Index of the influence map"},{name:"origin",mandatory:!0,description:"The location to check for influence value"}]},{_id:393,functionName:"GetInfluenceFacePos",returnValue:"vector",referenceVariable:"",section:"entity",access:"Server",description:"Returns the faces pos on the influence map",example:"pos = GetInfluenceFacePos( faceIndex )",variables:[]},{_id:394,functionName:"GetInfluenceNumFaces",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Returns the number faces on the influence",example:"numFaces = GetInfluenceNumFaces()",variables:[]},{_id:395,functionName:"GetInfluencerPreset",returnValue:"string[]",referenceVariable:"entity",section:"entity",access:"Server",description:"Adds a new influencer of <name> at <origin> and <angles>",example:"preset_array = GetInfluencerPreset( name )",variables:[{name:"name",mandatory:!0,description:"valid spawn influencer preset name."}]},{_id:396,functionName:"GetInfluencerTimeoutRemaining",returnValue:"int",referenceVariable:"entity",section:"entity",access:"Server",description:"Gets the remaining influencer timeout in milliseconds. Returns a negative number if no timeout.",example:"GetInfluencerTimeout( influencer_id )",variables:[{name:"influencer id",mandatory:!0,description:"The influencer id"}]},{_id:397,functionName:"GetInKillcam",returnValue:"int",referenceVariable:"",section:"level",access:"Client",description:"returns if the client is in killcam or not.",example:null,variables:[{name:"local_client_num",mandatory:!0,description:"The local client to check"}]},{_id:398,functionName:"GetInterestPoolAwareness",returnValue:"string",referenceVariable:"<ai>",section:"ai",access:"Server",description:"Gets the current interest pool awareness level regardless of actual awareness level.",example:"interestAwareness = self GetInterestPoolAwareness()",variables:[]},{_id:399,functionName:"GetInterestPoolValue",returnValue:"int",referenceVariable:"<ai_or_player>",section:"ai",access:"Server",description:"Gets the sentient's interest pool value.",example:"value = self GetInterestPoolValue()",variables:[]},{_id:400,functionName:"GetItemArray",returnValue:"entity[]",referenceVariable:"",section:"variables",access:"Server",description:"Returns an array of all of the items in a level.",example:"origins = GetItemArray()",variables:[]},{_id:401,functionName:"GetItemAttachment",returnValue:"string",referenceVariable:"",section:"entity",access:"Server",description:"Gets the attachment for a particular item",example:"GetItemAttachment( 10, 1 ); // returns attachment 1 for item 10",variables:[{name:"itemIndex",mandatory:!0,description:"The item index"},{name:"attachmentNum",mandatory:!0,description:"The attachment number for the index"}]},{_id:402,functionName:"GetItemAttachmentAllocationCost",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Gets the allocation cost of an attachment for a particular item",example:"GetItemAttachmentAllocationCost( 10, 1 ); // returns allocation cost of attachment 1 for item 10",variables:[{name:"itemIndex",mandatory:!0,description:"The item index"},{name:"attachmentNum",mandatory:!0,description:"The attachment number for the index"}]},{_id:403,functionName:"GetItemGroupForWeaponName",returnValue:"string",referenceVariable:"",section:"weapons",access:"Client",description:"Returns the ref for a specific weapon name",example:"ref = GetItemGroupForWeapon( weapon )",variables:[{name:"weaponName",mandatory:!0,description:"Name of weapon to get item group"}]},{_id:404,functionName:"GetItemGroupFromItemIndex",returnValue:"string",referenceVariable:"",section:"entity",access:"Server",description:"Returns the ref for a specified item index",example:"ref = GetRefFromItemIndex( itemIndex )",variables:[{name:"itemIndex",mandatory:!0,description:"Item index"}]},{_id:405,functionName:"GetKillCamEntity",returnValue:"entity",referenceVariable:"",section:"entity",access:"Client",description:"returns the killcamentity.",example:null,variables:[{name:"local_client_num",mandatory:!0,description:"The local client to check"}]},{_id:406,functionName:"GetKnownLength",returnValue:"int",referenceVariable:"",section:"sound",access:"Client",description:"Get the known length of the sound",example:"length = GetKnownLength( level.mySnd )",variables:[{name:"playbackId",mandatory:!0,description:"The sound id"}]},{_id:407,functionName:"GetLastOutWaterTime",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns the last time the player was not completely submerged",example:"time = player GetLastOutWaterTime()",variables:[]},{_id:408,functionName:"GetLightColor",returnValue:"vector",referenceVariable:"<light>",section:"entity",access:"Server",description:"Gets the current color of the light, as an RGB vector.",example:"color = self GetLightColor()",variables:[]},{_id:409,functionName:"GetLightExponent",returnValue:"int",referenceVariable:"<light>",section:"entity",access:"Server",description:"Gets the current exponent of the light.",example:"exponent = self GetLightExponent()",variables:[]},{_id:410,functionName:"GetLightFovOuter",returnValue:"float",referenceVariable:"<light>",section:"entity",access:"Server",description:"Gets the current outer fov of a spot light.",example:"fov = self GetLightFovOuter()",variables:[]},{_id:411,functionName:"GetLightIntensity",returnValue:"float",referenceVariable:"<light>",section:"entity",access:"Server",description:"Gets the current intensity of the light.",example:"intensity = self GetLightIntensity()",variables:[]},{_id:412,functionName:"GetLightRadius",returnValue:"float",referenceVariable:"<light>",section:"entity",access:"Server",description:"Gets the current radius of the light.",example:"radius = self GetLightRadius()",variables:[]},{_id:413,functionName:"GetLinkedEnt",returnValue:"entity",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get the entity that the calling entity is linked to",example:"linked_ent = self GetLinkedEnt()",variables:[]},{_id:414,functionName:"GetLoadoutAllocation",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Get how many allocation points are spent in the custom class",example:"allocationSpent = self GetLoadoutAllocation( 0 )",variables:[{name:"custom Class",mandatory:!0,description:"Class Num"}]},{_id:415,functionName:"GetLoadoutGunSmithVariantIndex",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the GunSmith Variant index of the primary weapon, pass 1 as an option to get the secondary",example:"gunSmithPrimaryIndex = self GetLoadoutGunSmithVariantIndex( 0, 0 )",variables:[{name:"custom Class",mandatory:!0,description:"Class Num"},{name:"getSecondary",mandatory:!1,description:"defaults to false, if set will get you the variant index of the secondary"}]},{_id:416,functionName:"GetLoadoutItem",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the index of the item in the custom class",example:"primary = self GetLoadoutItem( 0, primary )",variables:[{name:"custom Class",mandatory:!0,description:"Class Num"},{name:"loadoutSlot",mandatory:!0,description:"Loadout Slot"}]},{_id:417,functionName:"GetLoadoutItemRef",returnValue:"string",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the reference of the item in the custom class",example:"primary = self GetLoadoutItemRef( 0, primary )",variables:[{name:"custom Class",mandatory:!0,description:"Class Num"},{name:"loadoutSlot",mandatory:!0,description:"Loadout Slot"}]},{_id:418,functionName:"GetLoadoutPerks",returnValue:"string[]",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the list of specialties in the custom class",example:"primary = self GetLoadoutPerks( 0 )",variables:[{name:"custom Class",mandatory:!0,description:"Class Num"}]},{_id:419,functionName:"GetLoadoutWeapon",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the full weapon name (including attachments) of the item in the custom class",example:"primary = self GetLoadoutWeapon( 0, primary )",variables:[{name:"custom Class",mandatory:!0,description:"Class Num"},{name:"loadoutSlot",mandatory:!0,description:"Loadout Slot (primary or secondary)"}]},{_id:420,functionName:"GetLobbyClientCount",returnValue:"int",referenceVariable:"",section:"client",access:"Server",description:"Returns the number of connected or connecting clients",example:"clientCount = GetClientCount()",variables:[]},{_id:421,functionName:"GetLocalClientAngles",returnValue:"vector",referenceVariable:"",section:"client",access:"Client",description:"Get the local client angles",example:"client_angles = GetLocalClientAngles()",variables:[{name:"client",mandatory:!0,description:"the client to get angles for"}]},{_id:422,functionName:"GetLocalClientDriver",returnValue:"int",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Returns the local client index of the driver of the vehicle if the driver is a local client or undefined.",example:"driver = self GetLocalClientDriver( )",variables:[]},{_id:423,functionName:"GetLocalClientEyePos",returnValue:"vector",referenceVariable:"",section:"client",access:"Client",description:"Gets the local client eye pos",example:"eye_pos = GetLocalClientEyePos( 0 )",variables:[{name:"client",mandatory:!0,description:"the client to get eye pos for"}]},{_id:424,functionName:"GetLocalClientFOV",returnValue:"float",referenceVariable:"",section:"client",access:"Client",description:"Get the local client field of view in degrees",example:"client_fov = GetLocalClientFOV()",variables:[{name:"client",mandatory:!0,description:"the client index to get fov for"}]},{_id:425,functionName:"GetLocalClientNumber",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Returns the local client number.",example:"clientNum = self GetLocalClientNumber()",variables:[]},{_id:426,functionName:"GetLocalClientPos",returnValue:"vector",referenceVariable:"",section:"client",access:"Client",description:"Returns pos of localclient",example:"origin = GetLocalClientPos( 0 )",variables:[{name:"client",mandatory:!0,description:"the client to get position"}]},{_id:427,functionName:"GetLocalGunnerAngles",returnValue:"vector",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Returns the angles of the specified gunner, local to the vehicle itself.",example:"localAngles = self GetLocalGunnerAngles( 0 )",variables:[{name:"gunnerIndex",mandatory:!0,description:"The index of the gunner seat"}]},{_id:428,functionName:"GetLocalPlayer",returnValue:"entity",referenceVariable:"",section:"player",access:"Client",description:"Get the local player predicted centity.",example:"GetLocalPlayer( 0 )",variables:[{name:"local client num",mandatory:!0,description:"local client"}]},{_id:429,functionName:"GetLocalPlayers",returnValue:"entity[]",referenceVariable:"",section:"player",access:"Client",description:"Get an array of all the local players",example:"players = GetLocalPlayers()",variables:[]},{_id:430,functionName:"GetLocalPlayerTeam",returnValue:"void",referenceVariable:"",section:"player",access:"Client",description:"Gets the team of the local player",example:"team = GetLocalPlayerTeam( 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client to check"}]},{_id:431,functionName:"GetMapAtIndex",returnValue:"void",referenceVariable:"",section:"level",access:"Both",description:"Get the name of the map at the given index in a mode's maptable. Returns undefined if the given index doesn't index the given maptable",example:'GetMapAtIndex( "cp_mi_sing_blackstation" )',variables:[{name:"index",mandatory:!0,description:"the index of the map you're looking for.[OPTIONAL]"},{name:"sessionmodeabbrev",mandatory:!1,description:"cp,mp,zm. If ommitted, use current game mode abbreviation"}]},{_id:432,functionName:"GetMapFields",returnValue:"void",referenceVariable:"",section:"level",access:"Both",description:"Get the outro movie of the current map in the maptable. Returns undefined if currentmap wasn't found",example:'fields = GetMapFields( GetNextMap("cp_mi_sing_blackstation") )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname[OPTIONAL]"},{name:"sessionmodeabbrev",mandatory:!1,description:"cp,mp,zm. If ommitted, use current game mode abbreviation"}]},{_id:433,functionName:"GetMapIntroMovie",returnValue:"string",referenceVariable:"",section:"level",access:"Server",description:"Get the intro movie of the current map in the maptable. Returns undefined if currentmap wasn't found",example:'world.nextIntroMovie = GetMapIntroMovie( GetNextMap("cp_mi_sing_blackstation") )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"},{name:"dlcindex",mandatory:!1,description:'dlc1..N if DLC. If ommitted, use "base".'},{name:"sessionmodeabbrev",mandatory:!1,description:"cp,mp,zm. If ommitted, use current game mode abbreviation"}]},{_id:434,functionName:"GetMapOrder",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Get the index of the current map in the maptable. Returns -1 if currentmap wasn't found",example:'if( GetMapOrder( "cp_mi_sing_blackstation" ) > GetMapOrder( world.highestMapCompletion ) { world.highestMapCompletion = "cp_mi_sing_blackstation"; }',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"},{name:"dlcindex",mandatory:!1,description:'dlc1..N if DLC. If ommitted, use "base".'},{name:"sessionmodeabbrev",mandatory:!1,description:"cp,mp,zm. If ommitted, use current game mode abbreviation"}]},{_id:435,functionName:"GetMapOutroMovie",returnValue:"string",referenceVariable:"",section:"level",access:"Server",description:"Get the outro movie of the current map in the maptable. Returns undefined if currentmap wasn't found",example:'world.nextOutroMovie = GetMapIntroMovie( GetNextMap("cp_mi_sing_blackstation") )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"},{name:"dlcindex",mandatory:!1,description:'dlc1..N if DLC. If ommitted, use "base".'},{name:"sessionmodeabbrev",mandatory:!1,description:"cp,mp,zm. If ommitted, use current game mode abbreviation"}]},{_id:436,functionName:"GetMaxLocalClients",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Get the max number of local clients",example:"max_clients = GetMaxLocalClients()",variables:[]},{_id:437,functionName:"GetMaxReverseSpeed",returnValue:"float",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Get maximum reverse speed of a vehicle.",example:"speed = vehicle GetMaxReverseSpeed()",variables:[]},{_id:438,functionName:"GetMaxs",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get maximum bounds of the entity",example:"maxs = wallModel GetMaxs()",variables:[]},{_id:439,functionName:"GetMaxVehicles",returnValue:"int",referenceVariable:"",section:"vehicles",access:"Server",description:"Return the maximum number of vehicles that can be instantiated simultaneously. This is platform-specific.",example:"vehicleSlotsFree = GetMaxVehicles() - level.vehicles_list.size",variables:[]},{_id:440,functionName:"GetMeleeChainCount",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Gets the number of melee kills achieved by the player within their current streak.",example:"entity GetMeleeChainCount( )",variables:[]},{_id:441,functionName:"GetMicroSecondsRaw",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Gets raw system microseconds; used for profiling, only gives lower 32 bits as script doesn't support uint64_t properly right now",example:"start_time = GetMicrosecondsRaw()",variables:[]},{_id:442,functionName:"GetMigrationStatus",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:null,example:null,variables:[]},{_id:443,functionName:"GetMillisecondsRaw",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Gets raw system milliseconds; use for profiling long routines as it is only an integer",example:"start_time = GetMillisecondsRaw()",variables:[]},{_id:444,functionName:"GetMins",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get minimum bounds of the entity",example:"mins = wallModel GetMins()",variables:[]},{_id:445,functionName:"GetMissileOwner",returnValue:"entity",referenceVariable:"<missile>",section:"missile",access:"Server",description:"Returns the entity that owns this missile",example:"javelinOwner = GetMissileOwner( thisMissile )",variables:[]},{_id:446,functionName:"GetMissionName",returnValue:"string",referenceVariable:"",section:"objective",access:"Server",description:"Returns the name of the mission this map is part of",example:'level.mission = GetMissionName( "cp_mi_cairo_ramses2" )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"}]},{_id:447,functionName:"GetMissionUniqueID",returnValue:"int",referenceVariable:"",section:"objective",access:"Server",description:"Returns the unique id for this mission",example:'level.unique_id = GetMissionUniqueID( "cp_mi_cairo_ramses2" )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"}]},{_id:448,functionName:"GetMissionVersion",returnValue:"int",referenceVariable:"",section:"objective",access:"Server",description:"Returns the unique id for this mission",example:'level.unique_id = GetMissionVersion( "cp_mi_cairo_ramses2" )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"}]},{_id:449,functionName:"GetMoveDelta",returnValue:"vector",referenceVariable:"",section:"animation",access:"Server",description:"Gets the move delta for the animation",example:"localDeltaVector = GetMoveDelta( animation, 0, 1, entity )",variables:[{name:"animation name",mandatory:!0,description:"Name of the animation"},{name:"start time",mandatory:!1,description:"Normalized start time of the animation"},{name:"end time",mandatory:!1,description:"Normalized end time of the animation"},{name:"entity",mandatory:!1,description:"The entity should be passed if the animation name is a string to look up the animation from the entity's anim tree"}]},{_id:450,functionName:"GetMovementType",returnValue:"string",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns the movement type for the entity",example:"movement_type = self GetMovementType()",variables:[]},{_id:451,functionName:"GetMoverEnt",returnValue:"entity",referenceVariable:"<player>",section:"player",access:"Server",description:"Gets the moving entity the player is sitting on .",example:"if(player GetMoverEnt())",variables:[]},{_id:452,functionName:"GetMoveSpeedScale",returnValue:"float",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Gets the speed scale multiplier for the entity",example:"speed_modifier = self GetMoveSpeedScale()",variables:[]},{_id:453,functionName:"GetNavMeshFaceNormal",returnValue:"vector",referenceVariable:"",section:"level",access:"Server",description:"Returns the face normal vector of the closest navmesh point to the passed in position, within the search radius.",example:"navmeshNormal = GetNavMeshFaceNormal( (10,20,30), 25 )",variables:[{name:"position",mandatory:!0,description:"Position to start the search around."},{name:"searchRadius",mandatory:!0,description:"Radius to search within."}]},{_id:454,functionName:"GetNavMeshTriggersForPoint",returnValue:"string[]",referenceVariable:"",section:"trigger",access:"Server",description:"Returns a list of the names of navmesh triggers that a given point resides in",example:"targetNames = GetNavMeshTriggersForPoint( pos )",variables:[{name:"pos",mandatory:!0,description:"The test position."}]},{_id:455,functionName:"GetNearestNode",returnValue:"pathnode",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns the node nearest to this origin or undefined if no close node exists.",example:"node = GetNearestNode( guy.origin )",variables:[{name:"origin",mandatory:!0,description:"location to search for the nearest node"}]},{_id:456,functionName:"GetNearestPathPoint",returnValue:"vector",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns the nearest point on the navmesh for the given origin and radius or undefined if no point can be found.",example:null,variables:[{name:"origin",mandatory:!0,description:"The point from which to search from"},{name:"radius",mandatory:!0,description:"The maximum radius in which to search"}]},{_id:457,functionName:"GetNextMap",returnValue:"string",referenceVariable:"",section:"level",access:"Server",description:'Get the name of the next map in the maptable. Returns "" if this is the last map, undefined if currentmap wasn\'t found',example:'GetNextMap( "cp_mi_sing_blackstation" )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"},{name:"dlcindex",mandatory:!1,description:'dlc1..N if DLC. If ommitted, use "base".'},{name:"sessionmodeabbrev",mandatory:!1,description:"cp,mp,zm. If ommitted, use current game mode abbreviation"}]},{_id:458,functionName:"GetNextTraversalNodeOnPath",returnValue:"pathnode",referenceVariable:"",section:"pathnode",access:"Server",description:null,example:"GetNextTraversalNodeOnPath(1)",variables:[{name:"start",mandatory:!0,description:"the index for the starting node"}]},{_id:459,functionName:"GetNode",returnValue:"pathnode",referenceVariable:"",section:"level",access:"Server",description:"Gets a node with the given name, key pair",example:'node = GetNode( self.target, "targetname" )',variables:[{name:"name",mandatory:!0,description:"name to search for"},{name:"key",mandatory:!0,description:"key that name goes with"}]},{_id:460,functionName:"GetNodeArray",returnValue:"pathnode[]",referenceVariable:"",section:"level",access:"Server",description:"Gets an array of nodes that have the given name, key pair",example:'node = GetNodeArray( self.target, "targetname" )',variables:[{name:"name",mandatory:!0,description:"name to search for"},{name:"key",mandatory:!0,description:"key that name goes with"}]},{_id:461,functionName:"GetNodeArraySorted",returnValue:"pathnode[]",referenceVariable:"",section:"pathnode",access:"Server",description:"Gets an array of nodes that have the given name, key pair, within given radius, sorts them",example:'nodes = GetNodeArraySorted(self.target, "targetname", self.origin, 256 )',variables:[{name:"name",mandatory:!0,description:"name to search for"},{name:"key",mandatory:!0,description:"key that name goes with"},{name:"pos",mandatory:!0,description:"search origin"},{name:"r",mandatory:!0,description:"the radius to sort in"}]},{_id:462,functionName:"GetNodeEdge",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns an array of points which corresponds to the node volume's traversal edge. The traversal edge is represented as a piecewise linear function.",example:"points = GetNodeEdge( myNode )",variables:[{name:"node",mandatory:!0,description:"node volume"}]},{_id:463,functionName:"GetNodeIndexOnPath",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:null,example:"GetNodeIndexOnPath(node)",variables:[{name:"node",mandatory:!0,description:"The node to get the other node for"}]},{_id:464,functionName:"GetNodeOwner",returnValue:"entity",referenceVariable:"",section:"pathnode",access:"Server",description:"Get the owner of the node.",example:"node_owner = GetNodeOwner( node ) )",variables:[{name:"node",mandatory:!0,description:"which node to get the owner of."}]},{_id:465,functionName:"GetNodeRegion",returnValue:"int",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns the region of the give node, if there is one. Returns undefined otherwise.",example:"if ( GetNodeRegion( myNode ) )",variables:[{name:"node1",mandatory:!0,description:"pathnode to check"}]},{_id:466,functionName:"GetNodesInRadius",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Gets all of the nodes (max of 256) within a cylinder, in unsorted order",example:'nodes = GetNodesInRadius( guy.origin, 512, 0, 128, "Path" )',variables:[{name:"origin",mandatory:!0,description:"location to search for nodes at"},{name:"max radius",mandatory:!0,description:"maximum distance of nodes to return"},{name:"min radius",mandatory:!0,description:"maximum distance of nodes to return"},{name:"max height",mandatory:!1,description:"maximum height difference to origin. Defaults to 512"},{name:"node type",mandatory:!1,description:"node type to search for, if not specified, returns all node types. 'Cover' will return all cover nodes"},{name:"max nodes",mandatory:!1,description:"the maximum number of nodes to return up to 256"},{name:"region index",mandatory:!1,description:"the region index the nodes should belong to"}]},{_id:467,functionName:"GetNodesInRadiusSorted",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Gets all of the nodes (max of 256) within a cylinder, sorted by closest to <origin>",example:'nodes = GetNodesInRadiusSorted( guy.origin, 512, 0, 128, "Path" )',variables:[{name:"origin",mandatory:!0,description:"location to search for nodes at"},{name:"max radius",mandatory:!0,description:"maximum distance of nodes to return"},{name:"min radius",mandatory:!0,description:"maximum distance of nodes to return"},{name:"max height",mandatory:!1,description:"maximum height difference to origin. Defaults to 512"},{name:"node type",mandatory:!1,description:"node type to search for, if not specified, returns all node types. 'Cover' will return all cover nodes"},{name:"max nodes",mandatory:!1,description:"the maximum number of nodes to return up to 256"}]},{_id:468,functionName:"GetNonPredictedLocalPlayer",returnValue:"entity",referenceVariable:"",section:"player",access:"Client",description:"Get the local player non predicted centity.",example:"GetNonPredictedLocalPlayer( 0 )",variables:[{name:"local client num",mandatory:!0,description:"local client"}]},{_id:469,functionName:"GetNormalHealth",returnValue:"float",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get health in a normalized range of 0 to 1",example:"normal_health = self GetNormalHealth()",variables:[]},{_id:470,functionName:"GetNorthYaw",returnValue:"float",referenceVariable:"",section:"level",access:"Server",description:"Get North Yaw",example:"northvector = (cos(getnorthyaw()), sin(getnorthyaw()), 0)",variables:[]},{_id:471,functionName:"GetNotetracksInDelta",returnValue:"void",referenceVariable:"",section:"animation",access:"Server",description:"Get a list of notetracks and times within a specific time delta of a specific time in an animation",example:"notetrackArray = GetNotetracksInDelta( anim, 0.4 )",variables:[{name:"animation",mandatory:!0,description:"the animation for which notetrack information is needed"},{name:"time",mandatory:!0,description:"The time in the animation around which notetrack information is needed in the range 0-1"},{name:"time_delta",mandatory:!1,description:"The amount of time around the time provided to check for notetracks in seconds defaults to 0.15"}]},{_id:472,functionName:"GetNotetrackTimes",returnValue:"void",referenceVariable:"",section:"animation",access:"Server",description:"Gets an array of the times during an animation that the given notetrack occurs. The times returned are fractional (0 to 1).",example:'exitAlignTimes = GetNotetrackTimes( exitAnim, "exit_align" )',variables:[{name:"animation",mandatory:!0,description:"an animation"},{name:"note track",mandatory:!0,description:"a constant string with the name of the note track"}]},{_id:473,functionName:"GetNumberOfCollectiblesForLevel",returnValue:"int",referenceVariable:"",section:"objective",access:"Server",description:"Returns the number of collectibles for the given level",example:"collectibleCount = GetNumberOfCollectiblesForLevel( GetRootMapName() )",variables:[]},{_id:474,functionName:"GetNumChallengesComplete",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns the number of challenges completed in a given mission",example:'is_default = self GetNumChallengesComplete( "angola" )',variables:[{name:"mission_name",mandatory:!0,description:"(string) The name of the mission to check completed challenges in"}]},{_id:475,functionName:"GetNumClientsInScoreboard",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Returns the number of clients in the top scorers array",example:"numClients = GetTopScorerCount( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"}]},{_id:476,functionName:"GetNumConnectedPlayers",returnValue:"int",referenceVariable:"",section:"player",access:"Server",description:"Returns the number of players that are connected to our game. Ignores bots by default.",example:"num_players_and_bots = GetNumConnectedPlayers( true )",variables:[{name:"include bots",mandatory:!1,description:"The optional check to include test clients (bots). (bool)"}]},{_id:477,functionName:"GetNumExpectedPlayers",returnValue:"int",referenceVariable:"",section:"player",access:"Server",description:"Returns the number of players that we're expecting to join our game.",example:"num_players = GetNumExpectedPlayers()",variables:[]},{_id:478,functionName:"GetNumFreeEntities",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Get the number of free fake entities",example:"numfree = GetNumFreeEntities( localClientNum )",variables:[{name:"local client number",mandatory:!0,description:"Which local client to spawn the entity for."}]},{_id:479,functionName:"GetNumParts",returnValue:"int",referenceVariable:"",section:"animation",access:"Server",description:"Return number of bones in the model",example:"numParts = GetNumParts( model )",variables:[{name:"model",mandatory:!0,description:"The model to get parts for"}]},{_id:480,functionName:"GetNumZBarrierPieces",returnValue:"int",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns number of pieces in specified zbarrier ent.",example:"numPieces = ent GetNumZBarrierPieces())",variables:[]},{_id:481,functionName:"GetOrigin",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get the origin of the entity",example:"origin = self GetOrigin()",variables:[]},{_id:482,functionName:"GetOtherNodeInNegotiationPair",returnValue:"pathnode",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns the other node of the passed in negotiation node. Returns the begin node if end is passed and vice versa.",example:"end_node = GetOtherNodeInNegotiationPair( begin_node )",variables:[{name:"node",mandatory:!0,description:"The node to get the other node for"}]},{_id:483,functionName:"GetOwner",returnValue:"entity",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Get an entity's owner",example:"ent GetOwner( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client to check"}]},{_id:484,functionName:"GetParentEntity",returnValue:"entity",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Gets the parent entity. Requires client-side linking to be set up on the entity.",example:"parent = self GetParentEntity( )",variables:[]},{_id:485,functionName:"GetPartName",returnValue:"string",referenceVariable:"",section:"animation",access:"Server",description:"Get the bone name for the model and index",example:"boneName = GetPartName( model, 1 )",variables:[{name:"model",mandatory:!0,description:"The model to get parts for"},{name:"index",mandatory:!0,description:"The bone index"}]},{_id:486,functionName:"GetPathfindingRadius",returnValue:"float",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns the radius used for pathfinding operations.",example:"radius = ent GetPathfindingRadius()",variables:[]},{_id:487,functionName:"GetPathMetric",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Get path metric for the path from the ai to origin",example:"path_metric = level.ai_for_pathing GetPathMetric( dropPos )",variables:[{name:"origin",mandatory:!0,description:"the goal for the path"}]},{_id:488,functionName:"GetPlaybackTime",returnValue:"int",referenceVariable:"",section:"sound",access:"Client",description:"Get the playback time for the sound given by playbackId",example:"time = GetPlaybackTime( level.mySnd )",variables:[{name:"playbackId",mandatory:!0,description:"The sound id"}]},{_id:489,functionName:"GetPlayerCorpse",returnValue:"entity",referenceVariable:"",section:"player",access:"Client",description:"Gets the most recent corpse fort he player",example:"cybercom_type = player GetPlayerCorpse()",variables:[]},{_id:490,functionName:"GetPlayerGibDef",returnValue:"string",referenceVariable:"<player>",section:"player",access:"Client",description:"Returns string of gibdef for current player",example:null,variables:[]},{_id:491,functionName:"GetPlayerGravity",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Gets the gravity or gravity override value for the player.",example:"player GetPlayerGravity()",variables:[]},{_id:492,functionName:"GetPlayerLastOutWaterTime",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Gets the last time the player was not underwater",example:"waterTime = player GetPlayerLastOutWaterTime()",variables:[]},{_id:493,functionName:"GetPlayerName",returnValue:"string",referenceVariable:"<player>",section:"player",access:"Client",description:"Gets the character index",example:"player_name = self GetPlayerName()",variables:[]},{_id:494,functionName:"GetPlayers",returnValue:"entity[]",referenceVariable:"",section:"player",access:"Server",description:"Returns an array of the currently connected players. Used internally to the script call get_players().",example:"players = GetPlayers()",variables:[{name:"team",mandatory:!1,description:'- if specifed, returns lists of players on different teams, in team based game modes. Valid values "allies", "axis", "neutral" & "all"'}]},{_id:495,functionName:"GetPlayerSelectedGestureName",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the equipped gesture animation name",example:"gesture = player GetPlayerSelectedGestureName( 0 )",variables:[{name:"gestureType",mandatory:!0,description:"The type of gesture to get"}]},{_id:496,functionName:"GetPlayerSelectedTauntName",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the equipped taunt animation name",example:"taunt = player GetPlayerSelectedTauntName( 0 )",variables:[{name:"tauntType",mandatory:!0,description:"The type of taunt to get"}]},{_id:497,functionName:"GetPlayerSpawnId",returnValue:"int",referenceVariable:"",section:"spawn",access:"Server",description:"Returns the current spawn id for the player (used for debugging purposes only)",example:"spawnId = GetPlayerSpawnId( player )",variables:[{name:"player",mandatory:!0,description:"The player that we are spawning in"}]},{_id:498,functionName:"GetPlayerSpeed",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Gets the speed value for the player.",example:"player GetPlayerSpeed()",variables:[]},{_id:499,functionName:"GetPlayerVehicle",returnValue:"entity",referenceVariable:"",section:"player",access:"Client",description:"Returns undefined if the player is not in a vehicle",example:"vehicle = GetPlayerVehicle( self )",variables:[{name:"player",mandatory:!0,description:"The player to check vehicle for"}]},{_id:500,functionName:"GetPointInBounds",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns a point within an entity's bounds.",example:"targetForwardPnt = helo GetPointInBounds( 1.0, 0.0, 0.0 )",variables:[{name:"ratio_ForwardBack",mandatory:!0,description:"1.0 is full forward, -1.0 is full backwards."},{name:"ratio_LeftRight",mandatory:!0,description:"1.0 is full left, -1.0 is full right."},{name:"ratio_UpDown",mandatory:!0,description:"1.0 is full up, -1.0 is full down."}]},{_id:501,functionName:"GetPrimaryDeltaAnim",returnValue:"anim",referenceVariable:"<entity>",section:"animation",access:"Client",description:"Returns the primary delta anim playing on this entity, or the name of the animation if the entity is in an animscripted state.",example:"anim = self GetPrimaryDeltaAnim()",variables:[]},{_id:502,functionName:"GetRandomCompatibleAttachmentsForWeapon",returnValue:"string[]",referenceVariable:"",section:"weapons",access:"Server",description:"Returns an array of compatible attachments. If num desired attachments are specified then that many attachments will be returned if possible",example:"GetRandomCompatibleAttachmentsForWeapon( weaponObject, 4 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon name."},{name:"num desired attachments",mandatory:!1,description:"Max number of compatible attachments desired. If the number is more than available attachments for the weapon, it will just not return that many."}]},{_id:503,functionName:"GetRandomPointOnNavVolume",returnValue:"vector",referenceVariable:"<flying_ai>",section:"level",access:"Server",description:"Get a random point on nav volume. Returns the position if found one, or undefined if not found.",example:"random = self GetRandomPointOnNavVolume()",variables:[]},{_id:504,functionName:"GetRealTime",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Get the real system time in milliseconds",example:"time = GetRealTime()",variables:[]},{_id:505,functionName:"GetRefFromItemIndex",returnValue:"string",referenceVariable:"",section:"variables",access:"Server",description:"Returns the ref for a specified item index",example:"ref = GetRefFromItemIndex( itemIndex )",variables:[{name:"itemIndex",mandatory:!0,description:"Item index"}]},{_id:506,functionName:"GetReflectionLocs",returnValue:"vector[]",referenceVariable:"",section:"level",access:"Server",description:"Gets array of the locations of all of the reflection_probes in the level",example:"reflection_locs = GetReflectionLocs()",variables:[]},{_id:507,functionName:"GetReflectionOrigin",returnValue:"vector",referenceVariable:"",section:"level",access:"Server",description:"Given a position, returns the position of the reflection probe in use there",example:"probe_pos = GetReflectionOrigin( camera_pos )",variables:[]},{_id:508,functionName:"GetRetrievableWeapons",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Returns an array of weapons that need watchers so they can be retrieved by the player.",example:"retrievableWeapons = GetRetrievableWeapons()",variables:[]},{_id:509,functionName:"GetRevealPulseMaxRadius",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Returns the max radius for the reveal vision pulse",example:"power = GetRevealPulseMaxRadius( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"}]},{_id:510,functionName:"GetRevealPulseOrigin",returnValue:"vector",referenceVariable:"",section:"client",access:"Client",description:"Returns the pulse origin for the local client reveal pulse",example:"power = GetRevealPulseOrigin( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"}]},{_id:511,functionName:"GetRevealPulseRadius",returnValue:"float",referenceVariable:"",section:"client",access:"Client",description:"Returns the radius for the local client reveal pulse",example:"power = GetRevealPulseRadius( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"}]},{_id:512,functionName:"GetRootMapName",returnValue:"string",referenceVariable:"",section:"level",access:"Server",description:"Returns the root map of a mission",example:'level.rootMap = GetRootMap( "cp_mi_cairo_ramses2" )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"}]},{_id:513,functionName:"GetRope",returnValue:"int",referenceVariable:"",section:"level",access:"Client",description:"Returns the rope index based on targetname. Use it for ropes setuped in radiant. Returns -1, if not found.",example:'GetRope( "testrope" )',variables:[{name:"targetname",mandatory:!0,description:"The targetname of the rope you interested in"}]},{_id:514,functionName:"GetRoundsPlayed",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Get rounds played in match state",example:'GetRoundsPlayed( game["roundsplayed"] )',variables:[{name:"value",mandatory:!0,description:"The number of rounds played"}]},{_id:515,functionName:"GetScriptBundle",returnValue:"object",referenceVariable:"",section:"level",access:"Server",description:"Returns the script bundle struct.",example:'settings = GetScriptBundle( "doorsettings" )',variables:[]},{_id:516,functionName:"GetScriptBundleList",returnValue:"object",referenceVariable:"",section:"level",access:"Server",description:"Returns the script bundle list array.",example:'settings = GetScriptBundleList( "doorsettings" )',variables:[]},{_id:517,functionName:"GetScriptBundleNames",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Returns all the names of the script bundles of the specified type in an array.",example:'settings = GetScriptBundleNames( "scene" )',variables:[]},{_id:518,functionName:"GetScriptBundles",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Returns a list of script bundles based on the type.",example:'settings = GetScriptBundles( "scenes" )',variables:[]},{_id:519,functionName:"GetScriptMoverArray",returnValue:"entity[]",referenceVariable:"",section:"variables",access:"Server",description:"Returns an array of all of the script_origins in a level.",example:"origins = GetScriptMoverArray()",variables:[]},{_id:520,functionName:"GetServerHighestClientFieldVersion",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Returns the server's highest clientfield version.",example:"if ( my_version < GetServerHighestClientFieldVersion() )",variables:[]},{_id:521,functionName:"GetShootAtPos",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Gets the position an attacker would shoot at to hit this entity.For AI or player this is the eye position.For other entities it's the tag_eye if there is one else the center of the entity bounding box.",example:"targetPos = self.enemy GetShootAtPos(self)",variables:[{name:"attacker",mandatory:!1,description:"The entity that will be shooting"}]},{_id:522,functionName:"GetShoutcasterSetting",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Gets the value of a shoutcaster setting.",example:'GetGametypeSetting( "who is going to win" )',variables:[{name:"setting",mandatory:!0,description:"The setting name as a string."}]},{_id:523,functionName:"GetSkiptoName",returnValue:"string",referenceVariable:"",section:"level",access:"Server",description:"Get the skip to name with the given index",example:null,variables:[{name:"index",mandatory:!0,description:""}]},{_id:524,functionName:"GetSkipTos",returnValue:"string",referenceVariable:"",section:"level",access:"Server",description:"Get all skip tos for the level",example:"skiptos = GetSkipTos()",variables:[]},{_id:525,functionName:"GetSnapshotIndexArray",returnValue:"int[]",referenceVariable:"",section:"variables",access:"Server",description:"Returns an array of the indices of current snapshots for all connected clients.",example:"snapindices = GetSnapshotIndexArray( )",variables:[]},{_id:526,functionName:"GetSoundFromSurfaceTable",returnValue:"int",referenceVariable:"",section:"sound",access:"Client",description:"Returns the fx for a given surface type from the surfacefxtable.",example:"fx = GetSoundFromSurfaceTable( fx_surface_table, surface_type )",variables:[{name:"surfacefxtable",mandatory:!0,description:"Surface fx table."},{name:"surface type",mandatory:!0,description:"Surface type"}]},{_id:527,functionName:"GetSpawnerArray",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Returns an array of all of the spawners in a level.",example:"spawners = GetSpawnerArray()",variables:[{name:"name",mandatory:!1,description:"Name to search for."},{name:"key",mandatory:!1,description:"The key to search for."}]},{_id:528,functionName:"GetSpawnerTeamArray",returnValue:"entity[]",referenceVariable:"",section:"spawn",access:"Server",description:"Returns an array of all of the spawners in a level",example:'enemies = GetSpawnerTeamArray( "axis", "neutral" )',variables:[{name:"team",mandatory:!0,description:"a team name, either 'axis', 'allies', or 'neutral'"},{name:"team",mandatory:!1,description:"any number of additional team names may be added, either 'axis', 'allies', or 'neutral'"}]},{_id:529,functionName:"GetSpawnStructForCharacter",returnValue:"string",referenceVariable:"",section:"spawn",access:"Both",description:"Returns the targetname of the script_struct to use for the character pose in the frontend",example:'frontendVignetteAnim = GetSpawnStructForCharacter( characterIndex, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:530,functionName:"GetSpecialistIndex",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns the specialist index for the player",example:"specialistIndex = player GetSpecialistIndex()",variables:[]},{_id:531,functionName:"GetStance",returnValue:"string",referenceVariable:"<player>",section:"player",access:"Server",description:"Gets the stance of the player. It only works for the player.",example:"stance = player GetStance()",variables:[]},{_id:532,functionName:"GetStartAngles",returnValue:"vector",referenceVariable:"",section:"animation",access:"Server",description:"Get the starting angles for an animation, in world coordinates, given its current position, and angles",example:"org1 = GetStartAngles( climborg, climbang, buddyanim1, [0.5] )",variables:[{name:"origin",mandatory:!0,description:"The current origin of the animation in world coordinates"},{name:"angle",mandatory:!0,description:"The current angle set of the animation in world coordinates"},{name:"animation",mandatory:!0,description:"The currently running animation"},{name:"animation time",mandatory:!1,description:"The animation time in 0-1 range"}]},{_id:533,functionName:"GetStartOrigin",returnValue:"vector",referenceVariable:"",section:"animation",access:"Server",description:"Get the starting origin for an animation, in world coordinates, given its current position, and angles",example:"org1 = GetStartOrigin( climborg, climbang, buddyanim1, [0.5] )",variables:[{name:"origin",mandatory:!0,description:"The current origin of the animation in world coordinates"},{name:"angle",mandatory:!0,description:"The current angle set of the animation in world coordinates"},{name:"animation",mandatory:!0,description:"The currently running animation"},{name:"animation time",mandatory:!1,description:"The starting animation time in 0-1 range"}]},{_id:534,functionName:"GetStartTime",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns the start time for the current round.",example:"GetStartTime()",variables:[]},{_id:535,functionName:"GetStowedWeapon",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Gets the stowed weapon for the player",example:"stowed = self GetStowedWeapon()",variables:[]},{_id:536,functionName:"GetStreamerRequestProgress",returnValue:"int",referenceVariable:"",section:"string",access:"Client",description:"Get the progress (between 0-100) of the streamer request slot",example:"getStreamerRequestProgress(0)",variables:[{name:"slot",mandatory:!0,description:"Request slot"}]},{_id:537,functionName:"GetStreamingProgress",returnValue:"float",referenceVariable:"",section:"string",access:"Client",description:"Gets a progress value between 0 (no progress) and 1 (complete) for all the models and meshes that the script is currently forcing",example:"progress = GetStreamingProgress()",variables:[]},{_id:538,functionName:"GetTagAngles",returnValue:"vector",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Gets the angles of the tag",example:'angles = self GetTagAngles( "tag" )',variables:[]},{_id:539,functionName:"GetTagOrigin",returnValue:"vector",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Gets the origin of the tag",example:'origin = self GetTagOrigin( "tag" )',variables:[]},{_id:540,functionName:"GetTargetEntity",returnValue:"entity",referenceVariable:"<turret_or_vehicle>",section:"vehicles",access:"Server",description:"Gets the target entity of this turret or vehicle weapon",example:"target = roof_turret GetTargetEntity( ); target = tank GetTargetEntity( )",variables:[{name:"gunnerIndex",mandatory:!1,description:"the gunner index if called on a vehicle"}]},{_id:541,functionName:"GetTargetLockEntity",returnValue:"void",referenceVariable:"",section:"entity",access:"Client",description:"Get locked target",example:"target = self GetTargetLockEntity(<localclientnum>)",variables:[{name:"localclientnum",mandatory:!0,description:"localclientnum"}]},{_id:542,functionName:"GetTargetLockEntityArray",returnValue:"void",referenceVariable:"",section:"variables",access:"Client",description:"Get locked target",example:"target = self GetTargetLockEntityArray(<localclientnum>)",variables:[]},{_id:543,functionName:"GetTargetOrigin",returnValue:"vector",referenceVariable:"<turret_or_vehicle>",section:"vehicles",access:"Server",description:"Gets the target origin of this turret or vehicle weapon",example:"origin = roof_turret GetTargetOrigin( ); origin = tank GetTargetOrigin( )",variables:[{name:"gunnerIndex",mandatory:!1,description:"the gunner index if called on a vehicle (integer)"}]},{_id:544,functionName:"GetTeam",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Return true if the team of an entity if it can be found, undefined otherwise.",example:"orig_team = self GetTeam()",variables:[]},{_id:545,functionName:"GetTeamPlayersAlive",returnValue:"int",referenceVariable:"",section:"teams",access:"Server",description:"Returns the number of players still alive on a given team",example:null,variables:[{name:"team",mandatory:!0,description:"A string value, either 'axis' or 'allies' or 'team3'"}]},{_id:546,functionName:"GetTeamSatellite",returnValue:"int",referenceVariable:"",section:"teams",access:"Server",description:"Gets whether a team has Satellite or not",example:'GetTeamSatellite( "allies" )',variables:[{name:"team",mandatory:!0,description:"The name of a team. Must be either Must be 'axis', 'allies', 'team3' or 'none'."}]},{_id:547,functionName:"GetTeamScore",returnValue:"int",referenceVariable:"",section:"teams",access:"Server",description:"Get a team's score",example:'if ( GetTeamScore( "allies" ) > getTeamScore("axis") ) ...',variables:[{name:"team",mandatory:!0,description:"The name of a team. Must be either 'axis' or 'allies' or 'team3'."}]},{_id:548,functionName:"GetTeamSpyplane",returnValue:"int",referenceVariable:"",section:"teams",access:"Server",description:"Gets whether a team has Spyplane or not",example:'GetTeamSpyplane( "allies" )',variables:[{name:"team",mandatory:!0,description:"The name of a team. Must be either Must be 'axis', 'allies', 'team3' or 'none'."}]},{_id:549,functionName:"GetTime",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Gets the level time in Milliseconds from the start of the level.",example:"nextNodeTime = GetTime() + 500",variables:[]},{_id:550,functionName:"GetTopPlayersBodyModel",returnValue:"string",referenceVariable:"",section:"player",access:"Client",description:"Returns the name of the equipped body model of the top player in the game by index",example:"modelName = GetTopPlayersBodyModel( localClientNum, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"topPlayerIndex",mandatory:!0,description:"The index of the top player"}]},{_id:551,functionName:"GetTopPlayersBodyRenderOptions",returnValue:"void",referenceVariable:"",section:"player",access:"Client",description:"Returns the render options for the body for the top player in the game by index",example:"renderOptions = GetTopPlayersBodyRenderOptions( localClientNum, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"topPlayerIndex",mandatory:!0,description:"The index of the top player"}]},{_id:552,functionName:"GetTopPlayersGesture",returnValue:"string",referenceVariable:"",section:"player",access:"Client",description:"Returns the selected gesture of type CharacterGestureTypes for the given player",example:"gesture_anim = GetTopPlayersGesture( localClientNum, 2, 2 ); // GESTURE_TYPE_BOAST = 2",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"topPlayerIndex",mandatory:!0,description:"The index of the top player"},{name:"CharacterGestureTypes",mandatory:!0,description:"The CharacterGestureTypes enum value of the gesture to use"}]},{_id:553,functionName:"GetTopPlayersHelmetModel",returnValue:"string",referenceVariable:"",section:"player",access:"Client",description:"Returns the name of the equipped helmet model of the top player in the game by index",example:"modelName = GetTopPlayersHelmetModel( localClientNum, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"topPlayerIndex",mandatory:!0,description:"The index of the top player"}]},{_id:554,functionName:"GetTopPlayersHelmetRenderOptions",returnValue:"void",referenceVariable:"",section:"player",access:"Client",description:"Returns the render options for the body for the top player in the game by index",example:"renderOptions = GetTopPlayersHelmetRenderOptions( localClientNum, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"topPlayerIndex",mandatory:!0,description:"The index of the top player"}]},{_id:555,functionName:"GetTopPlayersIndex",returnValue:"int",referenceVariable:"",section:"player",access:"Client",description:"Returns the index of the player in the topscorers array or undefined if the player is not a top scorer",example:"topPlayerIndex = self GetTopPlayersIndex( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client"}]},{_id:556,functionName:"GetTopPlayersTaunt",returnValue:"string",referenceVariable:"",section:"player",access:"Client",description:"Returns the selected taunt of type CharacterTauntTypes for the given player",example:"taunt_anim = GetTopPlayersTaunt( localClientNum, 2, 0 ); // TAUNT_TYPE_FIRST_PLACE = 0",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"topPlayerIndex",mandatory:!0,description:"The index of the top player"},{name:"CharacterGestureTypes",mandatory:!0,description:"The CharacterTauntTypes enum value of the taunt to use"}]},{_id:557,functionName:"GetTopPlayersTeam",returnValue:"void",referenceVariable:"",section:"player",access:"Client",description:"Returns the team of the player top player in the game by index",example:"team = GetTopPlayersTeam( localClientNum, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question[MANDATORY]"}]},{_id:558,functionName:"GetTopPlayersWeaponInfo",returnValue:"string[]",referenceVariable:"",section:"weapons",access:"Client",description:"Returns the equipped weapon of the top player in the game",example:"weapon = GetTopPlayersWeaponInfo( localClientNum, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"topPlayerIndex",mandatory:!0,description:"The index of the top player"}]},{_id:559,functionName:"GetTopPlayersWeaponModel",returnValue:"string",referenceVariable:"",section:"weapons",access:"Client",description:"Returns the name of the equipped weapon model of the top player in the game by index",example:"modelName = GetTopPlayersWeaponModel( localClientNum, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"topPlayerIndex",mandatory:!0,description:"The index of the top player"}]},{_id:560,functionName:"GetTopPlayersWeaponRenderOptions",returnValue:"void",referenceVariable:"",section:"weapons",access:"Client",description:"Returns the render options for the weapon for the top player in the game by index",example:"renderOptions = GetTopPlayersWeaponRenderOptions( localClientNum, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"},{name:"topPlayerIndex",mandatory:!0,description:"The index of the top player"}]},{_id:561,functionName:"GetTopScorerCount",returnValue:"int",referenceVariable:"",section:"level",access:"Client",description:"Returns the number of clients in the top scorers array",example:"numClients = GetTopScorerCount( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the player in question"}]},{_id:562,functionName:"GetTotalAmmo",returnValue:"int",referenceVariable:"",section:"weapon",access:"Client",description:"Returns the total amount of ammo the client has for the currently equipped weapon",example:'ammoCount = GetTotalAmmo( localClientNum, "ak47_mp" )',variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"},{name:"weaponName",mandatory:!0,description:"Name of the desired weapon to check"}]},{_id:563,functionName:"GetTotalServerPauseTime",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Gets the total time the server has been paused since the map started.",example:"val = GetServerPauseTime()",variables:[]},{_id:564,functionName:"GetTotalUnlockedWeaponAttachements",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Get total number of attachments that are unlocked for the weapon specified",example:"player GetTotalUnlockedWeaponAttachements( weapon )",variables:[{name:"weapon",mandatory:!0,description:"weapon"}]},{_id:565,functionName:"GetTouchingVolume",returnValue:"entity[]",referenceVariable:"",section:"entity",access:"Server",description:"Get the entities that are inside the bounds given",example:"entities = GetTouchingVolume( self.origin, mins, maxs )",variables:[{name:"origin",mandatory:!0,description:"Position of bounding box"},{name:"mins",mandatory:!0,description:"The minimum extents of the bounding box"},{name:"maxs",mandatory:!0,description:"The maximum extents of the bounding box"}]},{_id:566,functionName:"GetTriggerAccumulate",returnValue:"int",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Returns the accumulate value from the trigger",example:"self GetTriggerAccumulate()",variables:[]},{_id:567,functionName:"GetTurretArcLimits",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Return turret info for arc mins and maxs",example:"limits turret GetTurretArcLimits()",variables:[]},{_id:568,functionName:"GetTurretOwner",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:'Gets the "owner" of this turret',example:"turret_user = roof_turret GetTurretOwner()",variables:[]},{_id:569,functionName:"GetTurretTarget",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Gets the current target of this turret",example:"target = roof_turret GetTurretTarget()",variables:[]},{_id:570,functionName:"GetUpgradedPieceNumLives",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns the number of lives, or pull reps it should take a zombie to dislodge this piece, if it's upgraded.",example:"piece.numLives = ent GetUpgradedPieceNumLives(1)",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:571,functionName:"GetUTC",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Gets the UTC time.",example:"val = GetUTC()",variables:[]},{_id:572,functionName:"GetValidCoverPeekOuts",returnValue:"string[]",referenceVariable:"<pathnode>",section:"pathnode",access:"Server",description:"Returns an array of directions an AI can peek out from a cover node. Possible values are 'over', 'left', and 'right'.",example:"GetValidCoverPeekOuts( node )",variables:[]},{_id:573,functionName:"GetVehicleArray",returnValue:"void",referenceVariable:"",section:"variables",access:"Server",description:"Returns an array of all of the vehicles in a level",example:'enemies = GetVehicleArray( "drones", "targetname" )',variables:[{name:"name",mandatory:!1,description:"Name to search for."},{name:"key",mandatory:!1,description:"The key to search for."}]},{_id:574,functionName:"GetVehicleSpawnerArray",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Returns an array of all of the vehicle spawners in a level",example:'enemies = GetVehicleSpawnerArray( "bob", "targetname" )',variables:[{name:"name",mandatory:!1,description:"Name to search for."},{name:"key",mandatory:!1,description:"The key to search for."}]},{_id:575,functionName:"GetVehicleSpawnerTeamArray",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Returns an array of all of the vehicle spawners in a level with the specified team",example:'enemies = GetVehicleSpawnerTeamArray( "axis", "neutral" )',variables:[{name:"team",mandatory:!0,description:"a team name, either 'axis', 'allies', or 'neutral'"},{name:"team",mandatory:!1,description:"any number of teams names may be added, either 'axis', 'allies', or 'neutral'"}]},{_id:576,functionName:"GetVehicleTeamArray",returnValue:"void",referenceVariable:"",section:"teams",access:"Server",description:"Returns an array of all of the vehicles in a level that are not sentients",example:'enemies = GetVehicleTeamArray( "axis", "neutral" )',variables:[{name:"team",mandatory:!1,description:"any number of teams names may be added, either 'axis', 'allies', or 'neutral'"}]},{_id:577,functionName:"GetVehicleTriggerFlags",returnValue:"int",referenceVariable:"",section:"trigger",access:"Server",description:"Returns the spawn flags that will allow vehicles to activate triggers",example:'spawn("trigger_radius", (0,0,0), GetVehicleTriggerFlags())',variables:[]},{_id:578,functionName:"GetVelocity",returnValue:"vector",referenceVariable:"<entity>",section:"player",access:"Server",description:"Gets the actor's velocity",example:"vel = thing GetVelocity()",variables:[{name:"entity",mandatory:!0,description:"An entity object that may be an ai character"}]},{_id:579,functionName:"GetVisibleNode",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns the farthest visible node on the path from <start> to <end> or undefined if no path exists.",example:"node = GetVisibleNode( guy.origin, enemy.origin, guy )",variables:[{name:"start",mandatory:!0,description:"starting origin of the path"},{name:"end",mandatory:!0,description:"ending origin of the path"},{name:"ignore entity",mandatory:!1,description:"An entity to ignore during pathnode trace checks"}]},{_id:580,functionName:"GetVisibleNodes",returnValue:"pathnode[]",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns an array of nodes visible to this node",example:"nodes = GetVisibleNodes( cover.node )",variables:[{name:"node",mandatory:!0,description:"pathnode to check"}]},{_id:581,functionName:"GetVisionPulseMaxRadius",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Returns the max radius for the localClients vision pulse",example:"power = GetVisionPulseMaxRadius( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"}]},{_id:582,functionName:"GetVisionPulseRadius",returnValue:"float",referenceVariable:"",section:"client",access:"Client",description:"Returns the current radius for the localClients vision pulse",example:"power = GetVisionPulseRadius( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"}]},{_id:583,functionName:"getvrcamangles",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Get the VR camera angles of the player",example:null,variables:[]},{_id:584,functionName:"GetVRCamAnglesByLocalClientNum",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Get the camera angles of the local client given",example:"cam_angles = GetVRCamAnglesByLocalClientNum( 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."}]},{_id:585,functionName:"getvrcampos",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Get the VR camera position of the player",example:null,variables:[]},{_id:586,functionName:"GetVRCamPosByLocalClientNum",returnValue:"void",referenceVariable:"",section:"player",access:"Client",description:"Get the camera position of the local client given",example:"cam_origin = GetVRCamPosByLocalClientNum( 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."}]},{_id:587,functionName:"GetVRControllerAngles",returnValue:"void",referenceVariable:"",section:"player",access:"Client",description:"gets the world-space angles of the tracked VR controller",example:"pos = self GetVRControllerAngles( 0, (60, 0, 0) ) ...",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the controller you want the orientation of[MANDATORY]"}]},{_id:588,functionName:"GetVRControllerGripButton",returnValue:"void",referenceVariable:"",section:"player",access:"Client",description:"returns true if the grip button is pressed",example:"holding = self GetVRControllerGripButton( 0 ) ...",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the controller you want[MANDATORY]"}]},{_id:589,functionName:"GetVRControllerPosition",returnValue:"void",referenceVariable:"",section:"player",access:"Client",description:"gets the world-space position of the tracked VR controller",example:"pos = self GetVRControllerPosition( 0 ) ...",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the controller you want the position of[MANDATORY]"}]},{_id:590,functionName:"GetVRControllerXButton",returnValue:"void",referenceVariable:"",section:"player",access:"Client",description:"returns true if the grip button is pressed",example:"holding = self GetVRControllerXButton( 0 ) ...",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the controller you want[MANDATORY]"}]},{_id:591,functionName:"GetWallrunWallNormal",returnValue:"vector",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns the normal of the wall the player is running on (or was running on)",example:"wall_normal = player GScr_GetWallRunWallNormal()",variables:[]},{_id:592,functionName:"GetWatcherWeapons",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Returns array of weapons that need watchers so they will die when the player respawns",example:"watcherWeapons = GetWatcherWeapons()",variables:[]},{_id:593,functionName:"GetWaterHeight",returnValue:"float",referenceVariable:"",section:"level",access:"Server",description:"Returns the height of the water at this position",example:"height = getwaterheight( self.origin )",variables:[{name:"pos",mandatory:!0,description:"Query position"}]},{_id:594,functionName:"GetWeaponAccuracy",returnValue:"float",referenceVariable:"",section:"weapons",access:"Server",description:"Returns accuracy at the distance from the current enemy.",example:'getweaponaccuracy( self, "ak47" ), getweaponaccuracy( ai, ai.primaryweapon )',variables:[{name:"entity",mandatory:!0,description:"An entity. Must be AI."},{name:"weapon name",mandatory:!0,description:"The weapon name."}]},{_id:595,functionName:"GetWeaponAttachments",returnValue:"string[]",referenceVariable:"",section:"weapons",access:"Server",description:null,example:null,variables:[]},{_id:596,functionName:"GetWeaponChargeLevel",returnValue:"int",referenceVariable:"",section:"weapons",access:"Client",description:"Get the current charge level for charged shot weapons",example:"charge = player GetWeaponChargeLevel()",variables:[]},{_id:597,functionName:"GetWeaponForCharacter",returnValue:"void",referenceVariable:"",section:"weapons",access:"Both",description:"Returns the weapon at the given index",example:'modelName = GetWeaponForCharacter( 0, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:598,functionName:"GetWeaponForwardDir",returnValue:"vector",referenceVariable:"<weapon>",section:"weapons",access:"Server",description:"Returns the weapon's forward direction",example:"weapon GetWeaponForwardDir()",variables:[]},{_id:599,functionName:"GetWeaponHackRatio",returnValue:"float",referenceVariable:"",section:"weapons",access:"Client",description:"Get the players hack completion ratio",example:'GetWeaponHackPercent(localClientNum, 1, "hotgun_zm")',variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"}]},{_id:600,functionName:"GetWeaponModelForCharacter",returnValue:"string",referenceVariable:"",section:"weapons",access:"Both",description:"Returns the name of the weapon model of at the given index",example:'modelName = GetWeaponModelForCharacter( 0, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:601,functionName:"GetWeaponMuzzlePoint",returnValue:"vector",referenceVariable:"<weapon>",section:"weapons",access:"Server",description:"Returns the weapon's muzzle point",example:"weapon GetWeaponMuzzlePoint()",variables:[]},{_id:602,functionName:"GetWeaponOptic",returnValue:"string",referenceVariable:"<player>",section:"player",access:"Server",description:"Gets the weapon optic attachment name",example:"attachmentName = player GetWeaponOptic( weapon )",variables:[{name:"weapon",mandatory:!0,description:"Weapon name"}]},{_id:603,functionName:"GetWeaponPosFrac",returnValue:"float",referenceVariable:"<player>",section:"player",access:"Client",description:"Gets the weapon pos frac of the player. It only works for the player.",example:"if ( player GetWeaponPosFrac(0) > 0.5 ) )...",variables:[{name:"local client num",mandatory:!0,description:"Player to get weapon pos frac for."}]},{_id:604,functionName:"GetWeaponWithAttachments",returnValue:"void",referenceVariable:"",section:"weapons",access:"Client",description:"Get the requested weapon object",example:'GetWeapon( "mp7_mp+acog" )',variables:[{name:"weaponname",mandatory:!0,description:"the name of the base weapon with attachments to return"}]},{_id:605,functionName:"GetWeaponWorldModel",returnValue:"string",referenceVariable:"",section:"weapons",access:"Server",description:"Returns weaopn world model",example:'model = GetWeaponWorldModel("lmg")',variables:[{name:"weapon",mandatory:!0,description:""}]},{_id:606,functionName:"GetWeaponXCam",returnValue:"string",referenceVariable:"",section:"weapons",access:"Server",description:"Get the weapon XCam",example:'weapon GetWeaponXCam( GetWeapon( weaponName ), "cam_cac_weapon" )',variables:[{name:"weapon object",mandatory:!0,description:"The weapon entity"},{name:"camera",mandatory:!0,description:"The camera to get"}]},{_id:607,functionName:"GetXCamForCharacter",returnValue:"string",referenceVariable:"",section:"entity",access:"Both",description:"Returns the name of the xcam to use for the character pose in the frontend",example:'frontendVignetteAnim = GetXCamForCharacter( characterIndex, "mp" )',variables:[{name:"characterIndex",mandatory:!0,description:"The index of the character in the current game-mode's character table"},{name:"sessionmode",mandatory:!0,description:"Session Mode Index"}]},{_id:608,functionName:"GetXCamMouseControl",returnValue:"string[]",referenceVariable:"",section:"entity",access:"Client",description:'Get the current "yaw" and "pitch" of the mouse xcam. Returns an array with two keys, "yaw" and "pitch".',example:"xcammouse = GetXCamMouseControl( localclientnum ) ...",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the controller you want the mouse yaw/pitch of"}]},{_id:609,functionName:"GetXModelCenterOffset",returnValue:"vector",referenceVariable:"",section:"entity",access:"Both",description:"Calculates the offset to the center of the model from the origin",example:'offset = GetXModelCenterOffset( "modelname" )',variables:[{name:"modelname",mandatory:!0,description:"The name of the xmodel"}]},{_id:610,functionName:"GetZBarrierArray",returnValue:"entity[]",referenceVariable:"",section:"zombie",access:"Server",description:"Returns an array of all of the zbarrier objects in a level.",example:"zbarriers = GetZBarrierArray()",variables:[]},{_id:611,functionName:"GetZBarrierAttackSlotHorzOffset",returnValue:"float",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns the horizontal offset used to offset the position of each attack slot relative to the zbarrier object. Odd numbers will start in the center of the barrier and offset to each side. Even numbers will start each side of the center - with no central spot specified.",example:"horzOffset = ent GetZBarrierAttackSlotHorzOffset()",variables:[]},{_id:612,functionName:"GetZBarrierNumAttackSlots",returnValue:"int",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns the number of attack slots used by this zbarrier.",example:"numSlots = ent GetZBarrierNumAttackSlots()",variables:[]},{_id:613,functionName:"GetZBarrierPieceAnimLengthForState",returnValue:"float",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns the length in seconds for the animation associated with the supplied state for a piece, in seconds.",example:'wait(ent GetZBarrierPieceAnimLengthForState(0, "opening", 0.9))',variables:[{name:"index",mandatory:!0,description:"The index of the piece we care about."},{name:"state",mandatory:!0,description:"Name of state of interest - choices are 'open', 'closed', 'opening', 'closing'."},{name:"scalar",mandatory:!1,description:"Scalar applied to animation length."}]},{_id:614,functionName:"GetZBarrierPieceAnimState",returnValue:"string",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns the anim state name to be used for zombies tearing this board down.",example:"anim_state = ent GetZBarrierPieceAnimState(1)",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:615,functionName:"GetZBarrierPieceAnimSubState",returnValue:"string",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns the anim sub-state name to be used for zombies tearing this board down.",example:"anim_state = ent GetZBarrierPieceAnimSubState(1)",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:616,functionName:"GetZBarrierPieceIndicesInState",returnValue:"int[]",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns an array of integer indices of the zbarriers pieces that are in the specified state.",example:'open_pieces = ent GetZBarrierPieceIndicesInState("open")',variables:[{name:"state",mandatory:!0,description:"Name of state of interest - choices are 'open', 'closed', 'opening', 'closing'."}]},{_id:617,functionName:"GetZBarrierPieceState",returnValue:"string",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns the state of the piece indexed in the zbarrier ent. States are open, opening, closed and closing.",example:"pieceState = ent GetZBarrierPieceState(1)",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:618,functionName:"GetZBarrierReachThroughAttackAnimState",returnValue:"string",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns the anim state name for reach through attacks used by this zbarrier.",example:"attackStateName = ent GetZBarrierReachThroughAttackAnimState()",variables:[]},{_id:619,functionName:"GetZBarrierTauntAnimState",returnValue:"string",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns the anim state name for taunts used by this zbarrier.",example:"tauntStateName = ent GetZBarrierTauntAnimState()",variables:[]},{_id:620,functionName:"Ghost",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Used when the entity should be sent over the network to clients but not be drawn",example:"model Ghost()",variables:[]},{_id:621,functionName:"GhostInDemo",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Used when the entity should be sent over the network to clients but not be drawn",example:"model GhostInDemo()",variables:[]},{_id:622,functionName:"Gib",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Gib an entity",example:'self gib( "normal", temp_array )',variables:[{name:"gibtype",mandatory:!0,description:"Type of gib"},{name:"parent",mandatory:!0,description:""}]},{_id:623,functionName:"GiveAchievement",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Give an achievement to the player",example:"players[i] GiveAchievement( achievement )",variables:[{name:"name",mandatory:!0,description:"Name of the achievement"}]},{_id:624,functionName:"GiveDecoration",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Gives the player a decoration",example:"medals = e_player GetDecorationsEarned()",variables:[{name:"decorationName",mandatory:!0,description:"The name of the decoration to give ( as defined in cp_medalcase.gdt - cp_medals )"}]},{_id:625,functionName:"GiveUnlockToken",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Module",example:"self GiveUnlockToken( 1 )",variables:[{name:"count",mandatory:!0,description:""}]},{_id:626,functionName:"GlassRadiusDamage",returnValue:"void",referenceVariable:"",section:"damage",access:"Server",description:"Damages glass in the radius",example:"GlassRadiusDamage( origin, range, max_damage, min_damage, means_of_damage )",variables:[{name:"origin",mandatory:!0,description:"Origin of damage"},{name:"radius",mandatory:!0,description:"Radius of damage"},{name:"max_damage",mandatory:!0,description:"Max damage, this is the damage at the origin"},{name:"min_damage",mandatory:!0,description:"ax damage, this is the damage at the edge of the radius"},{name:"means_of_death",mandatory:!1,description:"Means of death passed to the glass system from script, defaults to MOD_EXPLOSIVE"}]},{_id:627,functionName:"GrenadeExplosionEffect",returnValue:"void",referenceVariable:"",section:"effect",access:"Server",description:"Create a grenade explosion effect at the position",example:null,variables:[{name:"position",mandatory:!0,description:"Position of the fx"}]},{_id:628,functionName:"GroundTrace",returnValue:"string[]",referenceVariable:"",section:"trace",access:"Server",description:"Allows script to do a point trace with MASK_SHOT + MASK_ITEM. Returns hit position, hit entity, hit surface normal.",example:"trace = GroundTrace(magicBulletOrigin.origin, eyePos, true, undefined)",variables:[{name:"start",mandatory:!0,description:"The bullet start point"},{name:"end",mandatory:!0,description:"The bullet end point"},{name:"hit characters",mandatory:!0,description:"When set to true, this will trace for character hits"},{name:"ignore entity",mandatory:!0,description:"An entity to ignore"},{name:"ignore water",mandatory:!1,description:"Optionally ignore water. (bool)"},{name:"ignore glass",mandatory:!1,description:"Optionally ignore glass. (bool)"}]},{_id:629,functionName:"HasAnimTree",returnValue:"int",referenceVariable:"<entity>",section:"animation",access:"Client",description:"Returns true if the entity has an anim tree",example:"self HasAnimTree()",variables:[]},{_id:630,functionName:"HasASM",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Check if this entity has an ASM.",example:"if ( HasASM( self ) ) {",variables:[]},{_id:631,functionName:"HasDObj",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns 1 if the entity currently has a dobj.",example:"if(ent HasDObj(0))",variables:[{name:"local client number",mandatory:!0,description:"number of the local client on the machine."}]},{_id:632,functionName:"HasPart",returnValue:"bool",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns whether the entity has the given tagname as part of its skeleton.",example:'has_part = self HasPart( "tag_weapon", "weapon_saw" )',variables:[{name:"tagname",mandatory:!0,description:"The tag to search for. (string)"},{name:"modelname",mandatory:!1,description:"The optional model name to help specify the part location. (string)"}]},{_id:633,functionName:"HeliTurretDogTrace",returnValue:"int",referenceVariable:"",section:"trace",access:"Server",description:"Determines if you helicopter turret can see the dog.",example:"if (0 == (copter HeliTurretSightTrace(heli_turret_point, dog, lastHit))",variables:[{name:"position",mandatory:!0,description:"place that check if you can see if being performed"},{name:"dog",mandatory:!0,description:"the dog that the helicopter wants to see"},{name:"hitNum",mandatory:!0,description:"if you run this more than once make sure to populate this with the return of the last as it will increase efficiency"}]},{_id:634,functionName:"HeliTurretSightTrace",returnValue:"int",referenceVariable:"",section:"trace",access:"Server",description:"Determines if you helicopter turret can see an the players eyes.",example:"if (0 == (copter HeliTurretSightTrace(heli_turret_point, player, lastHit))",variables:[{name:"position",mandatory:!0,description:"place that check if you can see if being performed"},{name:"player",mandatory:!0,description:"the player that the helicopter wants to see"},{name:"hitNum",mandatory:!0,description:"if you run this more than once make sure to populate this with the return of the last as it will increase efficiency"}]},{_id:635,functionName:"Hide",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Hide the entity",example:"self Hide()",variables:[]},{_id:636,functionName:"HideInfoVolume",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Stops an info volume from being drawn",example:"InfoVolumeDebug_HideVolume( info_volume GetEntityNumber() )",variables:[{name:"entnum",mandatory:!0,description:"the entity number of the info volume"}]},{_id:637,functionName:"HideFromTeam",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Hides the entity from a particular team",example:"self HideFromTeam( friend_team )",variables:[{name:"team",mandatory:!0,description:"The team to show the entity to."}]},{_id:638,functionName:"HideMiscModels",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Hide all misc models with this targetname",example:'HideMiscModels( "crash_destruct" )',variables:[{name:"targetname",mandatory:!0,description:"targetname of misc model(s)."}]},{_id:639,functionName:"HidePart",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Hide part of an entity.",example:'self HidePart( "tag_weapon", "weapon_saw" )',variables:[{name:"tagname",mandatory:!0,description:"The tag to hide. All surfaces with a vertex weighted to the tag will be hidden and have no bullet collision. (string)"},{name:"modelname",mandatory:!1,description:"The optional model name to help specify the part location. (string)"},{name:"bApplyToChildren",mandatory:!1,description:"Optional flag to specify if we should apply the operation to children bones as well. (boolean)"}]},{_id:640,functionName:"HideZBarrierPiece",returnValue:"void",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Stops the indexed piece from being drawn.",example:"ent HideZBarrierPiece(1)",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:641,functionName:"IncrementCounter",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Increments the counter",example:'IncrementCounter( "global_comebacks", level.globalComebacks )',variables:[{name:"counterType",mandatory:!0,description:"The counter type"},{name:"increment",mandatory:!0,description:"The increment type"}]},{_id:642,functionName:"IncrementSpecificWeaponPickedUpCount",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"increment the count of the times we've picked up this weapon (uniquely identified by weapon+attachemnts; see function",example:"self incrementSpecificWeaponPickedUpCount( weapon )",variables:[{name:"weapon",mandatory:!0,description:"the weapon"}]},{_id:643,functionName:"InfoVolumeDebugInit",returnValue:"void",referenceVariable:"",section:"debug",access:"Server",description:"Initializes the info volume debug array",example:"DebugInfoVolume()",variables:[]},{_id:644,functionName:"InitClientObjectives",returnValue:"void",referenceVariable:"",section:"objective",access:"Client",description:"Delete a spawned effect.",example:"InitObjectives( 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"client on which to clear the objectives."}]},{_id:645,functionName:"InLastStand",returnValue:"void",referenceVariable:"<client>",section:"client",access:"Server",description:"Check the last stand state for the client",example:"if ( self InLastStand() )",variables:[]},{_id:646,functionName:"IPrintLn",returnValue:"void",referenceVariable:"",section:"debug",access:"Server",description:"Write line to the screen",example:'IPrintLn( "Where have all the cowboys gone?" )',variables:[{name:"text",mandatory:!0,description:"text to be written"}]},{_id:647,functionName:"IPrintLnBold",returnValue:"void",referenceVariable:"",section:"debug",access:"Server",description:"write bold line to the screen",example:'IPrintLnBold( "Mitchell!" )',variables:[{name:"text",mandatory:!0,description:"text to be written"}]},{_id:648,functionName:"IsActor",returnValue:"int",referenceVariable:"",section:"ai",access:"Server",description:"Checks whether this entity is an ai character",example:"if ( IsActor( gun_owner ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that may be an ai character"}]},{_id:649,functionName:"IsActorCorpse",returnValue:"int",referenceVariable:"",section:"ai",access:"Server",description:"Checks whether this entity is an actor corpse",example:"if ( IsActorCorpse( corpse ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that might be a corpse"}]},{_id:650,functionName:"IsActorSpawner",returnValue:"int",referenceVariable:"",section:"spawn",access:"Server",description:"Checks whether this entity is an actor spawner",example:"if ( IsActorSpawner( ent ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that may be an actor spawner"}]},{_id:651,functionName:"IsADS",returnValue:"bool",referenceVariable:"",section:"player",access:"Client",description:"Returns true if this local client is in ADS, false otherwise",example:"IsADS( 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."}]},{_id:652,functionName:"IsAI",returnValue:"int",referenceVariable:"",section:"sentient",access:"Server",description:"Checks whether this entity is an ai character",example:"if ( IsAI( gun_owner ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that may be an ai character"}]},{_id:653,functionName:"IsAirborne",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Checks whether this entity is an airborne unit",example:"if ( IsAirborne( gun_owner ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object"}]},{_id:654,functionName:"IsAlive",returnValue:"int",referenceVariable:"",section:"sentient",access:"Server",description:"Checks whether this entity is alive",example:"if ( IsAlive( gun_owner ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that might be alive or dead"}]},{_id:655,functionName:"IsAnimLooping",returnValue:"int",referenceVariable:"",section:"animation",access:"Server",description:"Gets whether an animation is looped or not",example:"boolLoop = IsAnimLooping( climbAnim )",variables:[{name:"animation",mandatory:!0,description:"an animation that needs to be identified as a looping or not"}]},{_id:656,functionName:"IsArchetypeLoaded",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Returns true if a given archetype is loaded in the level.",example:"if ( IsArchetypeLoaded( ARCHETYPE_WARLORD ) )",variables:[]},{_id:657,functionName:"IsArenaMode",returnValue:"bool",referenceVariable:"",section:"level",access:"Server",description:"Returns true if we are in arena mode",example:"if ( IsArenaMode() ) ...",variables:[]},{_id:658,functionName:"IsAssetLoaded",returnValue:"bool",referenceVariable:"",section:"level",access:"Server",description:"Check whether or not an asset is loaded.",example:'IsAssetLoaded( "weapon", "rpg" )',variables:[{name:"assetType",mandatory:!0,description:'"weapon" or "material"'},{name:"assetName",mandatory:!0,description:"The name of the asset - should match zone_source"}]},{_id:659,functionName:"IsAttached",returnValue:"bool",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns true if the model is attached to the entity",example:'self IsAttached( "somemodel", "tag_origin" )',variables:[{name:"modelname",mandatory:!0,description:"The name of the model to test if attached."},{name:"tagname",mandatory:!1,description:"The tag to test"}]},{_id:660,functionName:"IsBonusCardActive",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns if the bonus card is enabled and active in the class, cannot be called on a larry",example:"primary = self IsBonusCardActive( BONUSCARD_PRIMARY_GUNFIGHTER_INDEX, self.class_num )",variables:[{name:"bonuscard",mandatory:!0,description:"BonusCard index from bonuscard.gsh"},{name:"classnum",mandatory:!0,description:"The current class num of the player"}]},{_id:661,functionName:"IsBot",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns true if the entity is a bot controlled player",example:"if( self IsBot() )",variables:[]},{_id:662,functionName:"IsCamAnimLooping",returnValue:"bool",referenceVariable:"",section:"animation",access:"Server",description:"Returns whether or not a specific camera anim loop.",example:'IsCamAnimLooping( "proto_melee_cam" )',variables:[{name:"cam_anim",mandatory:!0,description:"The animation to play"}]},{_id:663,functionName:"IsCameraSpikeToggled",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Returns 1 if the camera spike is toggled to be active, 0 otherwise",example:"if ( IsCameraSpikeToggled( 0 ) )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the camera spike owner"}]},{_id:664,functionName:"IsClientCacheStable",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Is the players client cache stable, have we loaded all other clients' resources.",example:"player IsClientCacheStable()",variables:[]},{_id:665,functionName:"IsContentScreenFilterPlaying",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Client",description:"Returns whether or not this player is playing a Graphics Content blocking filter at this moment or not.",example:null,variables:[]},{_id:666,functionName:"IsCorpse",returnValue:"int",referenceVariable:"",section:"entity",access:"Server",description:"Checks whether this entity is a corpse",example:"if ( IsCorpse( gun_owner ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that might be a corpse"}]},{_id:667,functionName:"IsCoverNode",returnValue:"int",referenceVariable:"",section:"pathnode",access:"Server",description:"returns true if the node is of type NODE_TYPEFLAGS_COVER_ONLY",example:"IsCoverNode( node )",variables:[{name:"node",mandatory:!0,description:"The node to delete"}]},{_id:668,functionName:"IsDangerous",returnValue:"bool",referenceVariable:"<pathnode>",section:"pathnode",access:"Server",description:"Returns true if the pathnode is dangerous for the given team",example:"if ( node IsDangerous( team ) ) { //do something }",variables:[{name:"team",mandatory:!0,description:"Name of the team."}]},{_id:669,functionName:"IsDedicated",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true/false if we are running on the dedicated server",example:"if ( IsDedicated() )",variables:[]},{_id:670,functionName:"IsDemoPlaying",returnValue:"int",referenceVariable:"",section:"entity",access:"Client",description:"Returns true if a demo is currently playing back",example:"if ( IsDemoPlaying() )",variables:[]},{_id:671,functionName:"IsDoubleJumping",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player is double jumping.",example:"if(player DoubleJumping())",variables:[]},{_id:672,functionName:"IsDriving",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Client",description:"Returns true if the player is driving a vehicle.",example:"if ( self IsDriving( <localClientNum> ) )",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the caller"}]},{_id:673,functionName:"IsDynEntValid",returnValue:"void",referenceVariable:"",section:"entity",access:"Client",description:"Returns if the dynEnt still valid or not",example:"if( IsDynEntValid( dyn_id) )",variables:[{name:"dynent",mandatory:!0,description:""}]},{_id:674,functionName:"IsEMPJammed",returnValue:"bool",referenceVariable:"",section:"weapon",access:"Server",description:"Returns true if this player is jammed by the emp, false otherwise",example:"if ( player IsEMPJammed() )",variables:[]},{_id:675,functionName:"IsEntity",returnValue:"bool",referenceVariable:"",section:"entity",access:"Server",description:"Checks whether given variable is of type entity.",example:"if ( IsEntity( variable ) ) ...",variables:[{name:"variable",mandatory:!0,description:"variable to test"}]},{_id:676,functionName:"IsEntityLinkedToTag",returnValue:"bool",referenceVariable:"<parententity>",section:"entity",access:"Client",description:"Returns is the entity is linked to the parententity, ( on a specific tag optional )",example:'if ( player IsEntityLinkedToTag( grenade, "j_head" ) )',variables:[{name:"entity",mandatory:!0,description:"The entity that we are checking"},{name:"tag",mandatory:!1,description:"The tag we are checking"}]},{_id:677,functionName:"IsEventServiced",returnValue:"int",referenceVariable:"<ai>",section:"ai",access:"Server",description:"Set the specified event to serviced.",example:"serviced = self IsEventServiced( 100 )",variables:[{name:"eventId",mandatory:!0,description:"The identifier of the event (integer)"}]},{_id:678,functionName:"IsFiringTurret",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Checks whether this turret is firing. The entity must be a turret",example:"turret IsFiringTurret()",variables:[]},{_id:679,functionName:"IsFlared",returnValue:"bool",referenceVariable:"",section:"player",access:"Server",description:"Check is a player is under the influence of a flare",example:"if ( player IsFlared() )",variables:[]},{_id:680,functionName:"IsFriendly",returnValue:"bool",referenceVariable:"",section:"client",access:"Client",description:"Returns true if entity is friendly",example:"if ( entity IsFriendly( <localClientNum>, [predicted] ) )",variables:[{name:"localclientnum",mandatory:!0,description:"Local client number of the local client you want to test against"},{name:"predicted",mandatory:!1,description:"Test against predicted version, false by default"}]},{_id:681,functionName:"IsGadgetMeleeCharging",returnValue:"bool",referenceVariable:"",section:"weapons",access:"Server",description:"Is the player in the process of melee charging",example:"self IsGadgetMeleeCharging()",variables:[]},{_id:682,functionName:"IsGlobalStatsServer",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true if the game is a global stats ranked server",example:"level.ranked |= IsGlobalStatsServer()",variables:[]},{_id:683,functionName:"IsGodMode",returnValue:"int",referenceVariable:"",section:"sentient",access:"Server",description:"Checks whether this entity is in god mode",example:"if ( IsGodMode( player ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object to check for god mode"}]},{_id:684,functionName:"IsGrenadeDud",returnValue:"bool",referenceVariable:"<grenade>",section:"weapons",access:"Client",description:"Returns if a grenade is a dud",example:"if ( grenade isGrenadeDud() )",variables:[]},{_id:685,functionName:"IsHidden",returnValue:"bool",referenceVariable:"<entity>",section:"entity",access:"Server",description:"return true if entity is hidden",example:"self IsHidden()",variables:[]},{_id:686,functionName:"IsInHelicopter",returnValue:"int",referenceVariable:"",section:"vehicles",access:"Client",description:"Returns true if the client is in a helicopter.",example:"if( IsInHelicopter( 0 ) )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number to check"}]},{_id:687,functionName:"IsInScrCam",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Check if the camera of local client is in scripted camera",example:"inScrCam = IsInScrCam( 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."}]},{_id:688,functionName:"IsInScritpedAnim",returnValue:"int",referenceVariable:"<entity>",section:"animation",access:"Client",description:"Returns 1 if the entity currently has scripted animation playing.",example:"if(ent IsInScritpedAnim())",variables:[]},{_id:689,functionName:"IsInSecondChance",returnValue:"bool",referenceVariable:"",section:"player",access:"Server",description:"To check if player is needs revive",example:"if ( self IsInSecondChance() )",variables:[]},{_id:690,functionName:"IsInsideHeightLock",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns whether the entity is inside the height lock or not",example:"if( self IsInsideHeightLock() ) { //do something }",variables:[]},{_id:691,functionName:"IsLaserOn",returnValue:"bool",referenceVariable:"<entity>",section:"entity",access:"Server",description:"check if the entity has laser turned on.",example:"if ( IsLaserOn( entity ) ) { ...",variables:[]},{_id:692,functionName:"IsLinkedTo",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns true if the entity is linked to the other entity",example:"if (ent IsLinkedTo( other )) { // dostuff }",variables:[{name:"other",mandatory:!0,description:"Entity"}]},{_id:693,functionName:"IsLoadingCinematicPlaying",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Is the player playing the loading cinematic",example:"player IsLoadingCinematicPlaying()",variables:[]},{_id:694,functionName:"IsLocalClientDead",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Checks if the pm_type > PM_DEAD",example:"IsLocalClientDead()",variables:[]},{_id:695,functionName:"IsLocalClientDriver",returnValue:"int",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Returns the driver of the vehicle.",example:"driver = self IsLocalClientDriver(0)",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the caller"}]},{_id:696,functionName:"IsLocalGame",returnValue:"int",referenceVariable:"",section:"client",access:"Server",description:"Returns true if the game local only",example:"level.local = IsLocalGame()",variables:[]},{_id:697,functionName:"IsLocalPlayer",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns true if the ent it's called on is a local player.",example:null,variables:[]},{_id:698,functionName:"IsLocalPlayerViewLinked",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Client",description:"Returns whether or not this entity is linked to the given local client",example:"if ( script_mover IsLocalPlayerWeaponViewOnlyLinked( localClientIndex ) ) { ... }",variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum of the caller"}]},{_id:699,functionName:"IsLocalPlayerWeaponViewOnlyLinked",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Client",description:"Returns whether or not this player is linked to an enity with weapon view only linking.",example:"weaponviewonlylinked = self IsLocalPlayerWeaponViewOnlyLinked()",variables:[]},{_id:700,functionName:"IsMantling",returnValue:"bool",referenceVariable:"<player>",section:"client",access:"Server",description:"Return true if the player is mantling, false otherwise.",example:"self IsMantling()",variables:[]},{_id:701,functionName:"IsMapSubLevel",returnValue:"bool",referenceVariable:"",section:"level",access:"Server",description:"Returns whether or not the map is a sublevel of a mission",example:'level.isSubLevel = IsMapSubLevel( "cp_mi_cairo_ramses2" )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"}]},{_id:702,functionName:"IsMature",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Checks if a player has his Graphic Content Flag is on",example:"IsMature( player )",variables:[{name:"player",mandatory:!0,description:"The player to check if his Graphic Content Flag is on"}]},{_id:703,functionName:"IsMissleInsideHeightLock",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns whether the entity is inside the height lock or not",example:"if( self IsInsideHeightLock() ) { //do something }",variables:[]},{_id:704,functionName:"IsMovingPlatform",returnValue:"bool",referenceVariable:"",section:"entity",access:"Server",description:"Returns whether platform is a moving platform or not",example:"platform IsMovingPlatform()",variables:[]},{_id:705,functionName:"IsNavVolumeLoaded",returnValue:"bool",referenceVariable:"",section:"level",access:"Server",description:"Checks whether nav volume is loaded",example:"if ( IsNavVolumeLoaded() ) ...",variables:[]},{_id:706,functionName:"IsNodeEnabled",returnValue:"int",referenceVariable:"",section:"pathnode",access:"Server",description:"returns true if the node is enabled, false otherwise",example:"IsNodeEnabled( node )",variables:[{name:"node",mandatory:!0,description:"The node to check"}]},{_id:707,functionName:"IsNodeOccupied",returnValue:"void",referenceVariable:"",section:"ai",access:"Server",description:"See if anyone has claimed a particular node.",example:"if ( IsNodeOccupied( node ) )",variables:[{name:"node",mandatory:!0,description:"which node to check."}]},{_id:708,functionName:"IsOnGround",returnValue:"int",referenceVariable:"<entity>",section:"player",access:"Server",description:"Returns true if entity is on ground",example:"if( self IsOnGround() ) { //do something }",variables:[]},{_id:709,functionName:"IsOnLadder",returnValue:"bool",referenceVariable:"<player>",section:"client",access:"Server",description:"Return true if the player is on a ladder, false otherwise.",example:"self IsOnLadder()",variables:[]},{_id:710,functionName:"IsOnSlide",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Return true if the player is in the player movement slide.",example:"self IsOnSlide()",variables:[]},{_id:711,functionName:"IsOnTurret",returnValue:"bool",referenceVariable:"",section:"turret",access:"Client",description:"Returns true if the player is currently on a turret",example:"if( IsOnTurret( 0 ) )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."}]},{_id:712,functionName:"IsPathfinder",returnValue:"int",referenceVariable:"",section:"pathnode",access:"Server",description:"Checks whether this entity is registered with navigation system so it can do pathfinding and position query",example:"if ( IsPathfinder( tank ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity to check"}]},{_id:713,functionName:"IsPaused",returnValue:"bool",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns whether a given entity is paused as part of a world pause.",example:"if ( ent IsPaused() )",variables:[]},{_id:714,functionName:"IsPeelingOut",returnValue:"int",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Returns true if the vehicle is currently peeling out.",example:"if ( self IsPeelingOut() ) { }",variables:[]},{_id:715,functionName:"IsPlayer",returnValue:"int",referenceVariable:"",section:"sentient",access:"Server",description:"Checks whether this entity is the player",example:"if ( IsPlayer( gun_owner ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that may be the player"}]},{_id:716,functionName:"IsPlayerCorpse",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns true if the ent it's called on is a player corpse.",example:null,variables:[]},{_id:717,functionName:"IsPlayerDead",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns 1 if the entity currently has health of 0 or less",example:"if(ent IsPlayerDead())",variables:[]},{_id:718,functionName:"IsPlayerDoubleJumping",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns 1 if the player is currently double jumping (boosting)",example:"if(ent IsPlayerDoubleJumping())",variables:[]},{_id:719,functionName:"IsPlayerFiring",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns 1 if the player is currently firing",example:"if(ent IsDead())",variables:[]},{_id:720,functionName:"IsPlayerJumping",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns 1 if the player is currently jumping",example:"if(ent IsPlayerJumping())",variables:[]},{_id:721,functionName:"IsPlayerNumber",returnValue:"int",referenceVariable:"",section:"client",access:"Server",description:"Returns true if the passed in int is a valid client number",example:null,variables:[]},{_id:722,functionName:"IsPlayerSliding",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns 1 if the player is currently sliding",example:"if(ent IsPlayerSliding())",variables:[]},{_id:723,functionName:"IsPlayerSprinting",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns 1 if the player is currently sprinting",example:"if(ent IsPlayerSprinting())",variables:[]},{_id:724,functionName:"IsPlayerSwimming",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Return if a player is swimming",example:"depth = get_players()[0] IsPlayerSwimming()",variables:[]},{_id:725,functionName:"IsPlayerSwimmingOnSurface",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Return if a player is swimming",example:"swimming = player IsPlayerSwimmingOnSurface()",variables:[]},{_id:726,functionName:"IsPlayerSwimmingUnderwater",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Return if a player is swimming",example:"swimming = player IsPlayerSwimmingUnderwater()",variables:[]},{_id:727,functionName:"IsPlayerTalking",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns 1 if the player is talking",example:"if(ent IsPlayerTalking())",variables:[]},{_id:728,functionName:"IsPlayerUnderwater",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Return if a player is underwater",example:"depth = get_players()[0] IsPlayerUnderwater()",variables:[]},{_id:729,functionName:"IsPlayerWallRunning",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns 1 if the player is currently wall running",example:"if(ent IsPlayerWallRunning())",variables:[]},{_id:730,functionName:"IsPlayerWallRunningRight",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns 1 if the player is currently wall running right",example:"if(ent IsPlayerWallRunning())",variables:[]},{_id:731,functionName:"IsPlayingAnimScripted",returnValue:"int",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Returns true if the entity is playing in scripted animation.",example:"if(player IsPlayingAnimScripted())",variables:[]},{_id:732,functionName:"IsPlayingLoopSound",returnValue:"bool",referenceVariable:"",section:"sound",access:"Client",description:"Returns true if the entity is playing a loop sound",example:"car IsPlayingLoopSound()",variables:[{name:"alias",mandatory:!1,description:"specific alias to check for"}]},{_id:733,functionName:"IsPointInNavVolume",returnValue:"bool",referenceVariable:"",section:"level",access:"Server",description:"Checks if a given point is within the specified navigation volume.",example:'result = IsPointInNavVolume( (10,20,30), "small volume" )',variables:[{name:"position",mandatory:!0,description:"Position to evaluate."},{name:"navVolumeName",mandatory:!0,description:'Either "navvolume_small" or "navvolume_big".'}]},{_id:734,functionName:"IsPointOnNavMesh",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Checks if a given point is valid on the NavMesh. This check performs all the necessary validation such as away from boundary, correct material, navmesh trigger, etc.",example:"isValid = IsPointOnNavMesh( (10,20,30), self )",variables:[{name:"position",mandatory:!0,description:"Position to evaluate."},{name:"entity / radius",mandatory:!1,description:"the point is for this entity to path to, or an estimate radius of the expected character radius. default to radius 0. Note"}]},{_id:735,functionName:"IsPoisoned",returnValue:"bool",referenceVariable:"",section:"player",access:"Server",description:"Check is a player is under the influence of gas",example:"if ( player IsPoisoned() )",variables:[]},{_id:736,functionName:"IsRagdoll",returnValue:"int",referenceVariable:"<player_or_playercorpse>",section:"client",access:"Server",description:"Return true if the entity is a ragdoll body, false otherwise.",example:"if( player IsRagdoll() ) { //do something }",variables:[]},{_id:737,functionName:"IsRobot",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Returns true if the ent it's called on is a sentient vehicle i.e. a Robot.",example:null,variables:[]},{_id:738,functionName:"IsScrambled",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Client",description:"Returns the if player is getting scrambled by an enemy",example:"if ( player IsScrambled( ) )",variables:[]},{_id:739,functionName:"IsSentient",returnValue:"int",referenceVariable:"",section:"sentient",access:"Server",description:"Checks whether this entity is a sentient, that is normally either an ai actor, ai vehicle or the player",example:"if ( IsSentient( vehicle.riders[j] ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that may be a sentient character"}]},{_id:740,functionName:"IsShoutcaster",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Returns 1 if the local client is shoutcasting",example:"if ( IsSpectating( localClientNum, false ) )",variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client to check"},{name:"checkFistPerson",mandatory:!1,description:"Check if we want first person spectating to be not considered as spectate"}]},{_id:741,functionName:"IsSlamming",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player is slamming.",example:"if(player IsSlamming())",variables:[]},{_id:742,functionName:"IsSliding",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player is sliding.",example:"if(player IsSliding())",variables:[]},{_id:743,functionName:"IsSpawner",returnValue:"int",referenceVariable:"<entity>",section:"spawn",access:"Server",description:"Checks whether this entity is a spawner",example:"if ( IsSpawner( ent ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that may be a spawner"}]},{_id:744,functionName:"IsSpawnPointVisible",returnValue:"bool",referenceVariable:"",section:"spawn",access:"Server",description:"Returns true or false if a point is visible to the given team",example:'if ( IsSpawnPointVisible( point_position, point_angles, "axis", player ) )',variables:[{name:"point",mandatory:!0,description:"Spawnpoint origin that needs to be checked"},{name:"angles",mandatory:!0,description:"Spawnpoint angles that needs to be checked"},{name:"team",mandatory:!0,description:"Team that we need to check against the point"},{name:"ignore player",mandatory:!0,description:"The player that we are spawning in"}]},{_id:745,functionName:"IsSpectating",returnValue:"int",referenceVariable:"",section:"client",access:"Client",description:"Returns 1 if the local client is spectating",example:"if ( IsSpectating( localClientNum, false ) )",variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client to check"},{name:"checkFistPerson",mandatory:!1,description:"Check if we want first person spectating to be not considered as spectate"}]},{_id:746,functionName:"IsSplitScreen",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true if the game is a splitscreen game",example:"level.splitscreen = IsSplitScreen()",variables:[]},{_id:747,functionName:"IsSplitScreenHost",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Client",description:"Returns true if local player is the host",example:"if ( player IsSplitScreenHost() ) { }",variables:[]},{_id:748,functionName:"IsSprinting",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player is sprinting.",example:"if(player IsSprinting())",variables:[]},{_id:749,functionName:"IsStarterPack",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player has starter pack",example:"if ( self IsStarterPack() )",variables:[]},{_id:750,functionName:"IsStartingClassDefault",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the starting class is the default class for the level",example:null,variables:[]},{_id:751,functionName:"IsStreamed",returnValue:"bool",referenceVariable:"<entity>",section:"string",access:"Client",description:"Returns true if this entity is fully streamed in",example:"thing isStream()",variables:[]},{_id:752,functionName:"IsStreamerReady",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Is the players streamer ready.",example:"player IsStreamerReady()",variables:[]},{_id:753,functionName:"IsSwimming",returnValue:"int",referenceVariable:"",section:"player",access:"Client",description:"Returns 1 if the player is swimming.",example:"isSwimming = IsSwimming( localclientnum )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."}]},{_id:754,functionName:"IsTestClient",returnValue:"bool",referenceVariable:"<entity>",section:"client",access:"Server",description:"Returns true if the entity is a bot.",example:"if( self isTestClient() )",variables:[]},{_id:755,functionName:"IsThirdPerson",returnValue:"bool",referenceVariable:"",section:"client",access:"Client",description:"Checks if the camera mode to third person if true",example:"IsThirdPerson()",variables:[]},{_id:756,functionName:"IsTouching",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns true if <other entity> is touching <entity>",example:"if( player IsTouching( e_goal_volume ) ) { //do something }",variables:[{name:"other entity",mandatory:!0,description:"Entity."}]},{_id:757,functionName:"IsTouchingSwept",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns true if <other entity> is touching <entity>",example:"if( player IsTouchingSwept( e_goal_volume ) ) { //do something }",variables:[{name:"other entity",mandatory:!0,description:"Entity."}]},{_id:758,functionName:"IsTouchingVolume",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Returns true if entity is touching the volume.",example:"if ( crate_ent IsTouchingVolume( origin + (0,0,40), mins, maxs ) )",variables:[{name:"origin",mandatory:!0,description:"Origin of the volume"},{name:"volume mins",mandatory:!0,description:"The min extents of the volume"},{name:"volume maxs",mandatory:!0,description:"The max extents of the volume"}]},{_id:759,functionName:"IsTraversing",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player is traversing.",example:"if(player IsTraversing())",variables:[]},{_id:760,functionName:"IsTriggerEnabled",returnValue:"int",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Returns true if trigger is enabled. False otherwise",example:"if( trig isTriggerEnabled() )",variables:[]},{_id:761,functionName:"IsTurretFiring",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Checks if this turret is firing",example:"if( IsTurretFiring( roof_turret ) )",variables:[]},{_id:762,functionName:"IsTurretLockedOn",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Checks whether this turret is locked onto a target. The entity must be a turret",example:"turret IsTurretLockedOn()",variables:[]},{_id:763,functionName:"IsUnderwater",returnValue:"int",referenceVariable:"",section:"player",access:"Client",description:"Returns 1 if the player is underwater.",example:"clipCount = IsUnderwater( localclientnum )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."}]},{_id:764,functionName:"IsUsingNavVolume",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Checks whether this entity is using Nav Volume. Note this is a relatively low level check. For general gameplay check whether an entity is flying, consider using IsAirborne.",example:"if ( IsUsingNavVolume( gun_owner ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object"}]},{_id:765,functionName:"IsUsingT7Melee",returnValue:"bool",referenceVariable:"",section:"weapon",access:"Server",description:"Returns true T7 Melee system is being used",example:null,variables:[]},{_id:766,functionName:"IsValidGametype",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true if the string is a valid game type",example:null,variables:[{name:"game type",mandatory:!0,description:"a string to check"}]},{_id:767,functionName:"IsVehicle",returnValue:"int",referenceVariable:"",section:"vehicles",access:"Server",description:"Checks whether this entity is an ai character",example:"if ( IsVehicle( gun_owner ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that may be an ai character"}]},{_id:768,functionName:"IsVehicleSpawner",returnValue:"int",referenceVariable:"<entity>",section:"spawn",access:"Server",description:"Checks whether this entity is a vehicle spawner",example:"if ( IsVehicleSpawner( ent ) ) ...",variables:[{name:"entity",mandatory:!0,description:"An entity object that may be a vehicle spawner"}]},{_id:769,functionName:"IsVR",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"check if this player has VR enabled",example:null,variables:[]},{_id:770,functionName:"IsVisibleByPlayer",returnValue:"int",referenceVariable:"",section:"player",access:"Client",description:"Returns 1 if the actor can be seen by a player",example:"if( IsVisibleByPlayer(ent) )",variables:[]},{_id:771,functionName:"IsWallRunning",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player is wall running.",example:"if(player IsWallRunning())",variables:[]},{_id:772,functionName:"IsWallrunNode",returnValue:"int",referenceVariable:"",section:"pathnode",access:"Server",description:"returns true if the node has the PNF_WALLRUN flag set",example:"IsWallrunNode( node )",variables:[{name:"node",mandatory:!0,description:"The node to check"}]},{_id:773,functionName:"IsWheelColliding",returnValue:"int",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Returns if the given wheel is on the ground.",example:"colliding = self IsWheelColliding( front_left )",variables:[{name:"wheel",mandatory:!0,description:"The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'"}]},{_id:774,functionName:"IsWheelPeelingOut",returnValue:"int",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Returns if the given wheel is sliding.",example:"peeling = self IsWheelPeelingOut( front_left )",variables:[{name:"wheel",mandatory:!0,description:"The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'"}]},{_id:775,functionName:"IsWheelSliding",returnValue:"int",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Returns if the given wheel is sliding.",example:"sliding = self IsWheelSliding( front_left )",variables:[{name:"wheel",mandatory:!0,description:"The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'"}]},{_id:776,functionName:"IsWorldPaused",returnValue:"bool",referenceVariable:"",section:"level",access:"Server",description:"returns whether or not the world is currently paused",example:"if ( IsWorldPaused() )",variables:[]},{_id:777,functionName:"IsZBarrier",returnValue:"bool",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns true if the entity called on is a zbarrier.",example:"if(ent IsZBarrier())",variables:[]},{_id:778,functionName:"IsZBarrierClosed",returnValue:"bool",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns true if the state of all of the zbarrier's pieces is 'closed'.",example:"closed = ent IsZBarrierClosed())",variables:[]},{_id:779,functionName:"IsZBarrierOpen",returnValue:"bool",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns true if the state of all of the zbarrier's pieces is 'open'.",example:"open = ent IsZBarrierOpen())",variables:[]},{_id:780,functionName:"ItemWeaponSetAmmo",returnValue:"void",referenceVariable:"<item>",section:"weapons",access:"Server",description:"Set the weapon ammo to the given clip ammo and reserve ammo. Can give an alternate weapon index",example:"weap ItemWeaponSetAmmo( clip, extra, 1 )",variables:[{name:"clipAmmo",mandatory:!0,description:"Ammo for the clip"},{name:"reserveAmmo",mandatory:!0,description:"Reserve ammo"},{name:"altIndex",mandatory:!1,description:"Alternate weapon index"}]},{_id:781,functionName:"Kick",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Kicks the specified player.",example:"Kick( 2 )",variables:[{name:"clientnum",mandatory:!0,description:"The client number of the player to kick."}]},{_id:782,functionName:"Kill",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Kills this entity. If the entity could not be killed, errors. Automatically sets setCanDamage( true ).",example:"level.player kill()",variables:[{name:"source position",mandatory:!1,description:"The position that the damage comes from. Defaults to entity's origin"},{name:"attacker",mandatory:!1,description:"The entity that dealt the damage (such as an AI or player)"},{name:"inflictor",mandatory:!1,description:"The entity that the damage came from (such as a grenade or turret)"},{name:"weapon",mandatory:!1,description:"eapon to do damage with"}]},{_id:783,functionName:"KillClientRadiantExploder",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Deactivates a client side radiant exploder",example:'DeactivateClientRadiantExploder( "light_switch" )',variables:[{name:"exploder id",mandatory:!0,description:"string id of exploder to deactivate"}]},{_id:784,functionName:"KillServer",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"kills the server",example:"KillServer()",variables:[]},{_id:785,functionName:"LaserOff",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Turns off entity's laser sight.",example:"self LaserOff()",variables:[]},{_id:786,functionName:"LaserOn",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Turns on entity's laser sight.",example:"self LaserOn()",variables:[]},{_id:787,functionName:"Launch",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Launch an object that interacts with the world, using an initial velocity. From this point on this object will no longer block either missiles or bullets.",example:"self Launch( (x, y, z) )",variables:[{name:"initial velocity",mandatory:!0,description:"The initial velocity of the launch."},{name:"initial angular velocity",mandatory:!1,description:"The initial angular velocity of the launch."}]},{_id:788,functionName:"LaunchBomb",returnValue:"entity",referenceVariable:"<attacker>",section:"weapons",access:"Server",description:"Launches a weapon from the given position with the given velocity. Velocity determines direction.",example:'bomb = player MagicMissile( "artillery_mp", (100,100,0), ( 0.1, 0.1, 0.1 ) )',variables:[{name:"weapon",mandatory:!0,description:"- Weapon name."},{name:"position",mandatory:!0,description:"- Position to launch from."},{name:"velocity",mandatory:!0,description:"- Direction and force of launch."},{name:"targetent",mandatory:!1,description:"The target of the bullet"}]},{_id:789,functionName:"LaunchDynEnt",returnValue:"void",referenceVariable:"",section:"entity",access:"Client",description:"Launch a dynent",example:"launchdynent( brick, (0,0,200) )",variables:[{name:"dynent",mandatory:!0,description:""},{name:"force",mandatory:!0,description:"the direction and magnitude of the force applied"},{name:"hitp",mandatory:!1,description:"the location of the hitpoint in world space"}]},{_id:790,functionName:"LaunchRagdoll",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Launch this ragdoll.",example:"self LaunchRagdoll( (0,0,100) )",variables:[{name:"force",mandatory:!0,description:"launch force"},{name:"bonename",mandatory:!1,description:"bone name to apply the force to"}]},{_id:791,functionName:"LaunchVehicle",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Launch this physics vehicle.",example:"panzer LaunchVehicle( (0,0,100) )",variables:[{name:"force",mandatory:!0,description:"launch force"},{name:"bone name",mandatory:!1,description:"bone name to apply the force to"}]},{_id:792,functionName:"LerpViewAngleClamp",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Only works if the player is currently linked to another entity and angles aren't locked. Lerps the current view angle constraints to the provided ones over the specified time.",example:null,variables:[{name:"time",mandatory:!0,description:"Lerp duration in seconds. A value of 0 means instantaneous."},{name:"accel time",mandatory:!0,description:"Acceleration time."},{name:"decel time",mandatory:!0,description:"Decelaration time."},{name:"right arc",mandatory:!0,description:"Angle to clamp view to the right."},{name:"left arc",mandatory:!0,description:"Angle to clamp view to the left."},{name:"top arc",mandatory:!0,description:"Angle to clamp view to the top."},{name:"bottom arc",mandatory:!0,description:"Angle to clamp view to the bottom."}]},{_id:793,functionName:"LinkNodes",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Connects node1 to node2. Call it again with arguments flipped if you want a two-way connection.",example:"LinkNodes( node_moving_elev_left, node_moving_elev_right )",variables:[{name:"node1",mandatory:!0,description:"first node to link"},{name:"node2",mandatory:!0,description:"second node to link"}]},{_id:794,functionName:"LinkTo",returnValue:"void",referenceVariable:"<non_player_entity>",section:"entity",access:"Server",description:"Attaches one entity to another",example:'self.rightturret LinkTo( self, "tag_gunRight", (0,0,0), (0,0,0) )',variables:[{name:"linkto entity",mandatory:!0,description:"The entity to attach this thing to"},{name:"tag",mandatory:!1,description:"The tag to attach the entity to"},{name:"originOffset",mandatory:!1,description:"The positional offset from the base position"},{name:"anglesOffset",mandatory:!1,description:"The angular offset from the base angles"}]},{_id:795,functionName:"LinkToBlendToTag",returnValue:"void",referenceVariable:"<non_player_entity>",section:"entity",access:"Server",description:"Attaches one entity to another, gradually lerping entity to the parents orientation",example:'self.rightturret LinkToBlendToTag( self, "tag_gunRight" )',variables:[{name:"linkto entity",mandatory:!0,description:"The entity to attach this thing to"},{name:"tag",mandatory:!1,description:"The tag to attach the entity to"},{name:"only yaw",mandatory:!1,description:"Tells if blending only the yaw. Default to true."},{name:"collision physics",mandatory:!1,description:"Sets whether we should use collision physics. Defaults to false."}]},{_id:796,functionName:"LinkToCamera",returnValue:"void",referenceVariable:"",section:"entity",access:"Client",description:"Links an entity directly to the camera. Good for scripted player arms.",example:"swimming_arms LinkToCamera()",variables:[{name:"linkType",mandatory:!0,description:' 0 - pitch only, 1 - yaw only, 2 - roll only, 3 - swimming, 4 - full, 5 - 3d compass. Full is the default if not specified."'},{name:"offset",mandatory:!1,description:"Vector of the offset"}]},{_id:797,functionName:"LinkToUpdateOffset",returnValue:"void",referenceVariable:"<non_player_entity>",section:"entity",access:"Server",description:"Attaches one entity to another, gradually lerping entity to the parents orientation",example:"self.rightturret LinkToUpdateOffset( originsOffset, anglesOffset )",variables:[{name:"origin_offset",mandatory:!0,description:"The origin offset"},{name:"angles_offset",mandatory:!1,description:"The angles offset"}]},{_id:798,functionName:"LinkTraversal",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Creates a user edge connecting two path nodes",example:"LinkTraversal( beginNode )",variables:[{name:"node",mandatory:!0,description:"Negotiation begin node"}]},{_id:799,functionName:"LoadSentientEventParameters",returnValue:"bool",referenceVariable:"",section:"entity",access:"Server",description:"Loads the global sentient event parameters for a given scriptbundle sentient events asset. (all AI will use these)",example:'LoadSentientEventParameters( "sentientevents" )',variables:[{name:"scriptBundle",mandatory:!0,description:"String name of the script bundle to load"}]},{_id:800,functionName:"LoadSiegeAnim",returnValue:"bool",referenceVariable:"",section:"animation",access:"Client",description:"Load a siege anim into memory",example:'LoadSiegeAnim( "flappy_bird" )',variables:[{name:"anim_name",mandatory:!0,description:"Name of the siege anim to load"}]},{_id:801,functionName:"LocalClientActive",returnValue:"bool",referenceVariable:"",section:"client",access:"Client",description:"Return whether local client is active",example:"active = LocalClientActive( 0 )",variables:[{name:"client",mandatory:!0,description:"the client to check if it is active"}]},{_id:802,functionName:"LocalToWorldCoords",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Transform the given local coordinate point to a world coordinate point",example:"ramboPoint = self LocalToWorldCoords( delta )",variables:[{name:"local coordinate",mandatory:!0,description:"The point in local coordinates (vector3)"}]},{_id:803,functionName:"LookAtEntity",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set this actor to look at the specified entity. Call this function without any entity specified to turn it off.",example:"guy LookAtEntity( otherguy )",variables:[{name:"otherguy",mandatory:!1,description:"the other guy to look at"}]},{_id:804,functionName:"LookAtPos",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set this actor to look at the specified position. Call this function without any position specified to turn it off.",example:"guy LookAtPos( pos )",variables:[{name:"pos",mandatory:!1,description:"the position to look at"}]},{_id:805,functionName:"LUINotifyEvent",returnValue:"void",referenceVariable:"",section:"lui",access:"Server",description:"Sends a notify from script to LUI.",example:'LUINotifyEvent( &"update_objectives", 1, &"LEVEL_GOTO_NEXT_PLACE" )',variables:[{name:"player",mandatory:!1,description:"the player to notify. If not specified, all players are notified."},{name:"lui event name",mandatory:!0,description:"as an IString"},{name:"num of args",mandatory:!0,description:"number of parameters"},{name:"args",mandatory:!0,description:"argument to pass to LUI"}]},{_id:806,functionName:"LUINotifyEventToSpectators",returnValue:"void",referenceVariable:"",section:"lui",access:"Server",description:"Sends a notify from script to LUI.",example:'LUINotifyEventToSpectators( &"update_objectives", 1, &"LEVEL_GOTO_NEXT_PLACE" )',variables:[{name:"lui event name",mandatory:!0,description:"as an IString"},{name:"num of args",mandatory:!0,description:"number of parameters"},{name:"args",mandatory:!0,description:"argument to pass to LUI"}]},{_id:807,functionName:"MagicBullet",returnValue:"entity",referenceVariable:"",section:"weapons",access:"Server",description:"Creates a magic bullet at the source",example:'MagicBullet( GetWeapon("sniper_hyperion"), level.sniper_loc.origin, target GetTagOrigin( "tag_eye" ), level.sniper_boss)',variables:[{name:"weapon",mandatory:!0,description:"Weapon type of the bullet"},{name:"source",mandatory:!0,description:"Where the bullet will be spawned"},{name:"destination",mandatory:!0,description:"Where the bullet will be fired at"},{name:"attacker",mandatory:!1,description:"Set the owner of the bullet to this"},{name:"targetent",mandatory:!1,description:"The target of the bullet"},{name:"targetOffset",mandatory:!1,description:"Offset the target by this vector"}]},{_id:808,functionName:"MagicGrenade",returnValue:"entity",referenceVariable:"<actor>",section:"weapons",access:"Server",description:'Creates a "Magic" grenade from an actor.',example:"self MagicGrenade( self.origin, target.origin, 2.0 )",variables:[{name:"origin",mandatory:!0,description:"The starting point of the grenade toss"},{name:"target position",mandatory:!0,description:"The target point of the grenade toss"},{name:"time to blow",mandatory:!1,description:"The grenade fuse time in seconds"},{name:"weapon",mandatory:!1,description:"The grenade weapon to use (defaults to equipped grenade weapon)"}]},{_id:809,functionName:"MagicGrenadeManual",returnValue:"entity",referenceVariable:"<actor>",section:"weapons",access:"Server",description:'creates a "Magic" grenade from an actor',example:"self MagicGrenadeManual( self.origin, target.origin, 2.0 )",variables:[{name:"origin",mandatory:!0,description:"The starting point of the grenade toss"},{name:"velocity",mandatory:!0,description:"The initial velocity vector for the grenade movement"},{name:"time to blow",mandatory:!1,description:"The grenade fuse time in seconds"}]},{_id:810,functionName:"MagicGrenadeManualPlayer",returnValue:"entity",referenceVariable:"<player>",section:"player",access:"Server",description:'creates a "Magic" grenade from a player',example:"self MagicGrenadeManual( self.origin, target.origin, 2.0 )",variables:[{name:"origin",mandatory:!0,description:"The starting point of the grenade toss"},{name:"velocity",mandatory:!0,description:"The initial velocity vector for the grenade movement"},{name:"weapon",mandatory:!0,description:"The grenade weapon to base on"},{name:"time to blow",mandatory:!1,description:"The grenade fuse time in seconds"}]},{_id:811,functionName:"MagicGrenadePlayer",returnValue:"entity",referenceVariable:"<player>",section:"player",access:"Server",description:'Creates a "Magic" grenade from a player.',example:'MagicGrenade( "sticky_grenade_mp", self.origin, toss_velocity )',variables:[{name:"weapon",mandatory:!0,description:"The grenade weapon to use"},{name:"origin",mandatory:!0,description:"The starting point of the grenade toss"},{name:"velocity",mandatory:!0,description:"The initial velocity vector for the grenade movement"}]},{_id:812,functionName:"MagicGrenadeType",returnValue:"entity",referenceVariable:"",section:"weapons",access:"Server",description:"Fire a 'magic grenade', from the source location towards the destination point.",example:'ent MagicGrenadeType( "fraggrenade", self.origin, myVelocity )',variables:[{name:"weaponName",mandatory:!0,description:"The name of the weapon"},{name:"sourceLoc",mandatory:!0,description:"The grenade starting point"},{name:"velocity",mandatory:!0,description:"The velocity of the grenade"},{name:"time to blow",mandatory:!1,description:"The grenade fuse time in seconds"}]},{_id:813,functionName:"MagicMissile",returnValue:"entity",referenceVariable:"<attacker>",section:"weapons",access:"Server",description:"Launches a weapon from the given position with the given velocity. Velocity determines direction.",example:'bomb = player MagicMissile( "artillery_mp", (100,100,0), ( 0.1, 0.1, 0.1 ) )',variables:[{name:"weapon",mandatory:!0,description:"- Weapon name."},{name:"position",mandatory:!0,description:"- Position to launch from."},{name:"velocity",mandatory:!0,description:"- Direction and force of launch."},{name:"targetent",mandatory:!1,description:"The target of the bullet"}]},{_id:814,functionName:"MakeFakeAI",returnValue:"void",referenceVariable:"<script_model>",section:"ai",access:"Server",description:"Create a drone from script model, that can be moved around with simple commands",example:"guy MakeFakeAI()",variables:[]},{_id:815,functionName:"MakeGrenadeDud",returnValue:"void",referenceVariable:"<grenade>",section:"weapons",access:"Server",description:"Turns a grenade into a dud",example:"grenade MakeGrenadeDud()",variables:[]},{_id:816,functionName:"MakePathfinder",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Register a vehicle with Havok so it can do pathfinding and position query",example:null,variables:[]},{_id:817,functionName:"MakeSentient",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Turn a vehicle or script mover into a sentient.",example:"heli MakeSentient()",variables:[]},{_id:818,functionName:"MakeTurretUnusable",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Sets a turret to be unable to be used",example:"roof_turret MakeTurretUnusable()",variables:[]},{_id:819,functionName:"MakeTurretUsable",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Sets a turret able to be used",example:"roof_turret MakeTurretUsable()",variables:[]},{_id:820,functionName:"MakeUnusable",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets this entity to be not usable by the player",example:"mover MakeUsable()",variables:[]},{_id:821,functionName:"MakeUsable",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets this entity to be usable by the player",example:"mover MakeUsable()",variables:[{name:"team",mandatory:!1,description:"The team that is allowed to use the object. Only for script movers."}]},{_id:822,functionName:"Map",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Loads a new map",example:null,variables:[{name:"map name",mandatory:!0,description:"The map to load"},{name:"save persistent",mandatory:!1,description:"if true then player info is retained"}]},{_id:823,functionName:"Map_Restart",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Restarts the map",example:"Map_Restart( true )",variables:[{name:"save persistent",mandatory:!1,description:"if true then player info is retained"}]},{_id:824,functionName:"MapExists",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true if the map with the given name exists on the server",example:null,variables:[{name:"map name",mandatory:!0,description:"The map to check."}]},{_id:825,functionName:"MapShaderConstant",returnValue:"int",referenceVariable:"",section:"level",access:"Client",description:"Maps a shader constant to an index. Returns 1 if success, 0 on failure",example:'ent mapshaderconstant( 0, "shaderColor" ); ent mapshaderconstant( 0, "shaderColor", 1, 0, 1, 1 )',variables:[{name:"localClientNum",mandatory:!0,description:"Local client for which to map the shader constant"},{name:"index",mandatory:!0,description:"the index you want this shader constant to map to"},{name:"constant name",mandatory:!0,description:"a string that's the name of the shader constant"},{name:"x",mandatory:!1,description:"initial value of x component"},{name:"y",mandatory:!1,description:"initial value of y component"},{name:"z",mandatory:!1,description:"initial value of z component"},{name:"w",mandatory:!1,description:"initial value of w component"}]},{_id:826,functionName:"MarkAsDirty",returnValue:"void",referenceVariable:"",section:"entity",access:"Client",description:"Marks the entity as dirty",example:"MarkAsDirty( entity )",variables:[]},{_id:827,functionName:"MarkDestructibleDestroyed",returnValue:"void",referenceVariable:"<destructible>",section:"string",access:"Server",description:"set destructible destroyed",example:"barrel MarkDestructibleDestroyed()",variables:[]},{_id:828,functionName:"MarkNoVehicleNavMeshFaces",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Update the novehicle flag on navmesh faces. This should only be used in MP map for now.",example:null,variables:[]},{_id:829,functionName:"MatchRecordOvertimeRound",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"call after matchRecordRoundStart to mark the round as an overtime round (only first overtimee round is actually recorded)",example:"matchRecordOvertimeRound()",variables:[]},{_id:830,functionName:"MatchRecordRoundStart",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"need a hook for round starts, to get time stamps",example:"matchRecordRoundStart()",variables:[]},{_id:831,functionName:"Matrix4x4TransformPoints",returnValue:"vector[]",referenceVariable:"",section:"animation",access:"Server",description:null,example:null,variables:[]},{_id:832,functionName:"MaySpawnEntity",returnValue:"bool",referenceVariable:"",section:"spawn",access:"Server",description:null,example:null,variables:[]},{_id:833,functionName:"MaySpawnFakeEntity",returnValue:"bool",referenceVariable:"",section:"spawn",access:"Server",description:null,example:null,variables:[]},{_id:834,functionName:"MisdirectionEnable",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Enables or disables misdirection display",example:"MisdirectionEnable( localclientnum, newVal )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number."},{name:"bool",mandatory:!0,description:"0 disables display, 1 enables it."}]},{_id:835,functionName:"Missile_DroneSetVisible",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set the missile or drone to be visible",example:"self MissileDroneSetVisible( true )",variables:[{name:"flag",mandatory:!0,description:"True to set visible, false otherwise"}]},{_id:836,functionName:"Missile_GetTarget",returnValue:"entity",referenceVariable:"<missile>",section:"missile",access:"Server",description:"Sets the target of the missile to the given entity, and resets if no entity is specified.",example:"target = missile MissileGetTarget()",variables:[]},{_id:837,functionName:"Missile_SetTarget",returnValue:"void",referenceVariable:"<missile>",section:"weapons",access:"Server",description:"Sets the target of the missile to the given entity, and resets if no entity is specified.",example:"self missile_settarget( player )",variables:[{name:"target",mandatory:!1,description:"The target of the missile"},{name:"targetOffset",mandatory:!1,description:"Offset to the target location (vector3)"}]},{_id:838,functionName:"MissionFailed",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Restarts the map",example:"MissionFailed()",variables:[]},{_id:839,functionName:"MissionHasAccolades",returnValue:"bool",referenceVariable:"",section:"objective",access:"Server",description:"Returns whether or not this mission has any accolades associated with it",example:'level.has_accolades = MissionHasAccolades( "cp_mi_cairo_ramses2" )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"}]},{_id:840,functionName:"MissionHasCollectibles",returnValue:"bool",referenceVariable:"",section:"objective",access:"Server",description:"Returns whether or not this mission has any collectibles in it",example:'level.has_collectibles = MissionHasCollectibles( "cp_mi_cairo_ramses2" )',variables:[{name:"currentmap",mandatory:!1,description:"the name of the current map. If ommitted, use Dvar sv_mapname"}]},{_id:841,functionName:"MissionRestart",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Restarts the mission, which might take you to a different BSP if this is a sublevel",example:"MissionRestart()",variables:[]},{_id:842,functionName:"MoveGravity",returnValue:"void",referenceVariable:"<script_model/script_origin/script_brushmodel>",section:"motion",access:"Server",description:"Fling this entity.",example:"self MoveGravity( break_vector, time )",variables:[{name:"initial velocity",mandatory:!0,description:"The initial velocity to fling this entity at[MANDATORY]"}]},{_id:843,functionName:"MoveSlide",returnValue:"void",referenceVariable:"<script_model/script_origin/script_brushmodel>",section:"entity",access:"Server",description:"Launches the entity in the given velocity. When on the ground it will slide smoothly. Call StopMoveSlide to make it stop moving.",example:"self MoveSlide( 16, anglesToForward( self.angles ) * 10 )",variables:[{name:"center",mandatory:!0,description:"The center of the entity's collision with the ground[MANDATORY]"},{name:"initial velocity",mandatory:!0,description:"The initial velocity to move the entity at"}]},{_id:844,functionName:"MoveTo",returnValue:"void",referenceVariable:"<script_model/script_origin/script_brushmodel>",section:"motion",access:"Server",description:"Move this entity to the given point.",example:"dummy MoveTo( dest_org, .5, .05, .05 )",variables:[{name:"point",mandatory:!0,description:"The point to move the entity to[MANDATORY]"},{name:"acceleration time",mandatory:!1,description:"The time spent accelerating"},{name:"deceleration time",mandatory:!1,description:"The time spent decelerating"}]},{_id:845,functionName:"MoveX",returnValue:"void",referenceVariable:"<script_model/script_origin/script_brushmodel>",section:"motion",access:"Server",description:"Move this entity to the given world x value",example:"train MoveX( -4400, 60, 15, 20 )",variables:[{name:"point",mandatory:!0,description:"The x value to move the entity to, as a floating point number[MANDATORY]"},{name:"acceleration time",mandatory:!1,description:"The time spent accelerating in seconds"},{name:"deceleration time",mandatory:!1,description:"The time spent decelerating in seconds"}]},{_id:846,functionName:"MoveY",returnValue:"void",referenceVariable:"<script_model/script_origin/script_brushmodel>",section:"motion",access:"Server",description:"move this entity to the given world y value",example:"hangardoor MoveY( 320, 10 )",variables:[{name:"point",mandatory:!0,description:"The y value to move the entity to, as a floating point number[MANDATORY]"},{name:"acceleration time",mandatory:!1,description:"The time spent accelerating in seconds"},{name:"deceleration time",mandatory:!1,description:"The time spent decelerating in seconds"}]},{_id:847,functionName:"MoveZ",returnValue:"void",referenceVariable:"<script_model/script_origin/script_brushmodel>",section:"motion",access:"Server",description:"Move this entity to the given world z value",example:null,variables:[{name:"point",mandatory:!0,description:"The z value to move the entity to, as a floating point number[MANDATORY]"},{name:"acceleration time",mandatory:!1,description:"The time spent accelerating in seconds"},{name:"deceleration time",mandatory:!1,description:"The time spent decelerating in seconds"}]},{_id:848,functionName:"NavPointSightFilter",returnValue:"vector[]",referenceVariable:"",section:"pathnode",access:"Server",description:"Given an array of navmesh points, filters the array based on navmesh visibility to an origin.",example:"points = NavPointSightFilter( points, nearest )",variables:[{name:"points",mandatory:!0,description:"Array of navmesh points"},{name:"origin",mandatory:!0,description:"Origin to check visibility from"},{name:"checksight",mandatory:!1,description:"True to check sight, false otherwise"}]},{_id:849,functionName:"NeedsRevive",returnValue:"void",referenceVariable:"",section:"hud",access:"Server",description:"Used for mini maps to display compass icon",example:"self NeedsRevive( true )",variables:[{name:"bool",mandatory:!0,description:"does player need to be reived"}]},{_id:850,functionName:"NodesAreLinked",returnValue:"int",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns true if node1 is connected to node2.",example:"NodesAreLinked( node_moving_elev_left, node_moving_elev_right )",variables:[{name:"node1",mandatory:!0,description:"first node"},{name:"node2",mandatory:!0,description:"second node"}]},{_id:851,functionName:"NodesVisible",returnValue:"bool",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns true if these nodes are visible to one another, false otherwise.",example:"if ( NodesVisible( cover, guy.node ) )",variables:[{name:"node1",mandatory:!0,description:"pathnode to check"},{name:"node2",mandatory:!0,description:"pathnode to check against node1"}]},{_id:852,functionName:"NotSolid",returnValue:"void",referenceVariable:"<ent>",section:"motion",access:"Server",description:"Unsets the solid flag, so that this object is no longer collidable.",example:"self NotSolid()",variables:[]},{_id:853,functionName:"NumRemoteClients",returnValue:"int",referenceVariable:"",section:"client",access:"Server",description:"Returns the number of remote clients connected to the game. Very useful for scaling content for coop play, and network balancing.",example:"num_remote_clients = NumRemoteClients()",variables:[]},{_id:854,functionName:"Obituary",returnValue:"void",referenceVariable:"",section:"hud",access:"Server",description:"Create an obituary for a character",example:"Obituary( self, attacker, sWeapon, sMeansOfDeath )",variables:[{name:"victim",mandatory:!0,description:"The victim entity"},{name:"attacker",mandatory:!0,description:"The attacker entity"},{name:"weapon",mandatory:!0,description:"The weapon name"},{name:"weapon",mandatory:!0,description:"The means of death as a string"}]},{_id:855,functionName:"Objective_Add",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Add a new objective, with ability to specify all the info for the objective",example:'Objective_Add( objective_number, "active", closest.bomb.origin, objective_text, self.objective )',variables:[{name:"objective_number",mandatory:!0,description:"The number of the objective to add"},{name:"state",mandatory:!0,description:'A string value representing the state of the objective. Valid states are "empty", "active", "invisible", "done", "current" and "failed"'},{name:"position/onEntity",mandatory:!1,description:"The position of the objective - or - <entity> entity to be tracked."},{name:"displayName",mandatory:!1,description:"The text to use for the objective. This should be a valid localized text reference"},{name:"entity",mandatory:!1,description:"The owner entity"}]},{_id:856,functionName:"Objective_ClearAllUsing",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Clears the objective of all players using status.",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"}]},{_id:857,functionName:"Objective_ClearEntity",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Clears the entity previous set on the objective",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"}]},{_id:858,functionName:"Objective_ClearPlayerUsing",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the objective to be not being used by the specified player.",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"player",mandatory:!0,description:"The player who is no longer using the objective"}]},{_id:859,functionName:"Objective_Delete",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Deletes the objective",example:"Objective_Delete( objective_number )",variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"}]},{_id:860,functionName:"Objective_FlipIcon",returnValue:"void",referenceVariable:"",section:"objective",access:"Client",description:"Flips the icon of the objective",example:"Objective_FlipIcon( self.friendlyObjID )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number"},{name:"objectiveID",mandatory:!0,description:"The index of objective"},{name:"shouldFlipMaterial",mandatory:!1,description:"1 if the material should be flipped, 0 otherwise"}]},{_id:861,functionName:"Objective_GetGamemodeFlags",returnValue:"int",referenceVariable:"",section:"objective",access:"Server",description:"Gets the gamemode flags for the objective.",example:"flags = Objective_GetGamemodeFlags( myObjNumber )",variables:[{name:"objective_index",mandatory:!0,description:"The ID of the objective."}]},{_id:862,functionName:"Objective_Icon",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Set the objective icon",example:'objective_icon( crateObjID, "compass_supply_drop_black" )',variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"icon",mandatory:!0,description:"The icon name"}]},{_id:863,functionName:"Objective_OnEntity",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the objective to get its position from an entity.",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"entity",mandatory:!0,description:"The entity to set the objective to"}]},{_id:864,functionName:"Objective_Position",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Set the objective position",example:"objective_position( self.objectiveID, self.curOrigin )",variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"position",mandatory:!0,description:"The position to set"}]},{_id:865,functionName:"Objective_Set3D",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets flag determining if 3D state for an objective is drawn.",example:"Objective_Set3D( myObjNum, true, undefined, undefined, undefined, (0,0,70) )",variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"use3D",mandatory:!0,description:"true if should render in hud"},{name:"unused",mandatory:!1,description:"not used"},{name:"unused",mandatory:!1,description:"not used"},{name:"unused",mandatory:!1,description:"not used"},{name:"unused",mandatory:!1,description:"not used"}]},{_id:866,functionName:"Objective_SetColor",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets a color for the objective that the icon will then be drawn with.",example:'Objective_SetColor( myObjNumber, 1.0, 0.0, 0.0, 1.0 )Objective_SetColor( myObjNumber, "FriendlyBlue" )',variables:[{name:"objective_index",mandatory:!0,description:"The ID of the objective."},{name:"r/colorName",mandatory:!0,description:"Red float value for objective, or color name set from the UIEditor as an IString."},{name:"g",mandatory:!1,description:"Green float value for objective."},{name:"b",mandatory:!1,description:"Blue float value for objective."},{name:"a",mandatory:!1,description:"Alpha float value for objective. Default of 1.0 if not specified."}]},{_id:867,functionName:"Objective_SetFlag",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the gamemode flags for the objective.",example:'Objective_SetFlag( myObjNumber, "active", true )',variables:[{name:"objective_index",mandatory:!0,description:"The ID of the objective to alter"},{name:"flag",mandatory:!0,description:"- active, fadeoutonscreen, perk, drawdistance, drawname, in3d, clipToMap, primary"},{name:"true/false",mandatory:!0,description:"turn the flag on or off"}]},{_id:868,functionName:"Objective_SetGamemodeFlags",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the gamemode flags for the objective. This function only works for modes not using 3d objectives (mp).",example:"Objective_SetGamemodeFlags( myObjNumber, 0 )",variables:[{name:"objective_index",mandatory:!0,description:"The ID of the objective."},{name:"flags",mandatory:!0,description:"script managed flags."}]},{_id:869,functionName:"Objective_SetIcon",returnValue:"void",referenceVariable:"",section:"objective",access:"Client",description:"Sets the icon for the objective",example:'Objective_SetIcon( localClientNum, clientObjID, "remotemissile_target" )',variables:[{name:"localClientNum",mandatory:!0,description:"The local client that is using the objective"},{name:"objectiveNumber",mandatory:!0,description:"The ID of the objective to alter"},{name:"materialName",mandatory:!0,description:"The material to set"}]},{_id:870,functionName:"Objective_SetIconSize",returnValue:"void",referenceVariable:"",section:"objective",access:"Client",description:"Sets the objective's scale for the icon.",example:"objective_SetIconSize( localClientNum, clientObjID, 50 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client that is using the objective"},{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"scale",mandatory:!0,description:"The value to scale the objective icon"}]},{_id:871,functionName:"Objective_SetInvisibleToAll",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the objective to be invisible to all players.",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"}]},{_id:872,functionName:"Objective_SetInvisibleToPlayer",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the objective to be invisible to the specified player.",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"player",mandatory:!0,description:"The player to whom the objective is now invisible"}]},{_id:873,functionName:"Objective_SetInvisibleToPlayerByIndex",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the objective to be invisible to the specified player.",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"entnum",mandatory:!0,description:"The entity number of the player to whom the objective is now invisible"}]},{_id:874,functionName:"Objective_SetPlayerUsing",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the objective to being used by the specified player.",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"player",mandatory:!0,description:"The player who is using the objective"}]},{_id:875,functionName:"Objective_SetProgress",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the progress for the objective.",example:"Objective_SetProgress( myObjNumber, 0.5 )",variables:[{name:"objective_index",mandatory:!0,description:"The ID of the objective."},{name:"percent",mandatory:!0,description:"percent float value for objective [0-1]."}]},{_id:876,functionName:"Objective_SetSize",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets a size for the objective that the icon will then be drawn at. Min is MIN_OBJECTIVE_ICON_SIZE = 5",example:"Objective_SetSize( myObjNumber, myTrigger )Objective_SetSize( myObjNumber, 20, 30 )",variables:[{name:"objective_index",mandatory:!0,description:"The ID of the objective."},{name:"entity/float",mandatory:!0,description:"The entity to get the size from or a sizeX."},{name:"float",mandatory:!1,description:"If sizeX was used in prvious arg, this is sizeY."}]},{_id:877,functionName:"Objective_SetStencil",returnValue:"void",referenceVariable:"",section:"objective",access:"Client",description:"Sets the objective's stencil for the icon.",example:"Objective_SetStencil( localClientNum, clientObjID, true )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client that is using the objective"},{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"stencil",mandatory:!0,description:"Set to true if you want the objective to stencil"}]},{_id:878,functionName:"Objective_SetUIModelValue",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Set a UI Model Value for an objective",example:'Objective_SetUIModelValue( 0, "killedCount", 4 ); or Objective_SetUIModelValue( 0, "killedCount", "Four" )',variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"lui menu data name",mandatory:!0,description:"precached name string for the data which we're trying to set."},{name:"lui menu data value",mandatory:!0,description:"value for the data which we're trying to set on the objective."}]},{_id:879,functionName:"Objective_SetVisibleToAll",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the objective to be visible to all players.",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"}]},{_id:880,functionName:"Objective_SetVisibleToPlayer",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the objective to be visible to the specified player.",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"player",mandatory:!0,description:"The player to whom the objective is now visible"}]},{_id:881,functionName:"Objective_SetVisibleToPlayerByIndex",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the objective to be visible to the specified player.",example:null,variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"entnum",mandatory:!0,description:"The entity number of the player to whom the objective is now visible"}]},{_id:882,functionName:"Objective_State",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Set a state for the objective",example:'Objective_State( obj_id, "active" )',variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"state",mandatory:!0,description:"The state to set"}]},{_id:883,functionName:"Objective_Team",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the team that the objective is for. Allows having different objectives for each team",example:'Objective_Team( 0, "allies" )',variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"team",mandatory:!0,description:"The team that the objective is for. Valid entries are 'allies', 'axis', 'team3', or 'none'"}]},{_id:884,functionName:"Objective_VisibleTeams",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the team that the objective is visible too for. Allows having different objectives for each team",example:"Objective_VisibleTeams( 0, 01101101 )",variables:[{name:"objective_number",mandatory:!0,description:"The ID of the objective to alter"},{name:"team",mandatory:!0,description:"The team that the objective is for. Valid entries are 'allies', 'axis', 'team3', or 'none'"}]},{_id:885,functionName:"OffhandWeaponsEnabled",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Determine if offhand weapons are enabled for the player",example:"enabled = player OffhandWeaponsEnabled()",variables:[]},{_id:886,functionName:"OverrideLightingOrigin",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Uses the entity origin as the lighting origin instead of the center of the entity's bounding area",example:"door OverrideLightingOrigin()",variables:[]},{_id:887,functionName:"OverrideSpawnflags",returnValue:"void",referenceVariable:"<entity>",section:"spawn",access:"Server",description:"Sets the spawnflags on this entity. Used for patching.",example:"entity OverrideSpawnflags( 64 )",variables:[]},{_id:888,functionName:"PathDistance",returnValue:"float",referenceVariable:"",section:"pathnode",access:"Server",description:"Returns the approximate/semi-accurate path distance between two points or undefined if no path can be found.",example:null,variables:[{name:"start",mandatory:!0,description:""},{name:"end",mandatory:!0,description:""},{name:"generatePathForAccurateDist",mandatory:!1,description:"If set to true, a real path will be generated and the total length of the path segments will be returned."},{name:"pathEnt",mandatory:!1,description:"Only used when generatePathForAccurateDist is set. pathEnt will be used for generating a path, so it will respect the movement type. Only supported for actors."},{name:"pathDistanceType",mandatory:!1,description:"The method of pathdistance calculation. Two options are PATHDIST_APPROXIMATE(using getApproximateFuturePositions), PATHDIST_CORNERPREDICTED (using getCornerPredictor)."}]},{_id:889,functionName:"PhysicsExplosionCylinder",returnValue:"void",referenceVariable:"",section:"physics",access:"Server",description:"Created a physics explosion cylinder",example:"PhysicsExplosionCylinder( self.origin, 600, 240, 1 )",variables:[{name:"position",mandatory:!0,description:"The origin of the cylinder"},{name:"outer radius",mandatory:!0,description:"The outer radius of the cylinder"},{name:"inner radius",mandatory:!0,description:"The inner radius of the cylinder"},{name:"magnitude",mandatory:!0,description:"The magnitude of the explosion"}]},{_id:890,functionName:"PhysicsExplosionSphere",returnValue:"void",referenceVariable:"",section:"physics",access:"Server",description:"Create a physics explosion sphere",example:"PhysicsExplosionSphere( origin, radius, radius, 5, max_damage, min_damage )",variables:[{name:"position",mandatory:!0,description:"The origin of the sphere"},{name:"outer radius",mandatory:!0,description:"The outer radius of the sphere"},{name:"inner radius",mandatory:!0,description:"The inner radius of the sphere"},{name:"magnitude",mandatory:!0,description:"The magnitude of the explosion"},{name:"outer damage",mandatory:!1,description:"The optional outer damage"},{name:"inner damage",mandatory:!1,description:"The optional inner damage"}]},{_id:891,functionName:"PhysicsJetThrust",returnValue:"void",referenceVariable:"",section:"physics",access:"Server",description:"Creates a physics jet thrust",example:"PhysicsJetThrust( self.origin, (0,0,1), 400, 1, 60)",variables:[{name:"origin",mandatory:!0,description:"origin of the thrust"},{name:"weapon facing dir",mandatory:!0,description:"The weapon facing direction"},{name:"radius",mandatory:!0,description:"The radius of the thrust"},{name:"magnitude",mandatory:!0,description:"The magnitude of the thrust"},{name:"angle limit",mandatory:!0,description:"The angle limit for the thrust"}]},{_id:892,functionName:"PhysicsJolt",returnValue:"void",referenceVariable:"",section:"physics",access:"Server",description:"Create a physics radius jolt",example:"PhysicsRadiusJolt( self.origin, 600, 240, 1 )",variables:[{name:"position",mandatory:!0,description:"The origin of the jolt"},{name:"outer radius",mandatory:!0,description:"The outer radius of the jolt"},{name:"inner radius",mandatory:!0,description:"The inner radius of the jolt"},{name:"impulse",mandatory:!0,description:"The impulse created by the explosion"}]},{_id:893,functionName:"PhysicsLaunch",returnValue:"void",referenceVariable:"<script_model>",section:"motion",access:"Server",description:"Permanently turn this entity into a physics object with an intial force vector at the specified point.",example:"dummy PhysicsLaunch( contact_point, initial_force )",variables:[{name:"contact_point",mandatory:!1,description:"The point to apply the initial force"},{name:"initial_force",mandatory:!1,description:"The force vector to apply"}]},{_id:894,functionName:"PhysicsTrace",returnValue:"string[]",referenceVariable:"",section:"trace",access:"Server",description:"Does a physics trace from start to end. Returns hit position",example:"trace = PhysicsTrace( start, end, ( 0, 0, 0 ), ( 0, 0, 0 ), self, PHYSICS_TRACE_MASK_VEHICLE_CLIP )",variables:[{name:"start",mandatory:!0,description:"starting position"},{name:"end",mandatory:!0,description:"ending position"},{name:"mins",mandatory:!1,description:"minimum bounds"},{name:"maxs",mandatory:!1,description:"maximum bounds"},{name:"ignore entity",mandatory:!1,description:"the entity to not consider"},{name:"mask type",mandatory:!1,description:"the trace modifier"}]},{_id:895,functionName:"PhysicsTraceEx",returnValue:"string[]",referenceVariable:"",section:"physics",access:"Server",description:"Physics trace, ignoring characters. Returns the full trace structure.",example:"trace = PhysicsTraceEx( start, end, (-10,-10,0), (10,10,0) )",variables:[{name:"start",mandatory:!0,description:"The start point"},{name:"end",mandatory:!0,description:"The end point"},{name:"mins",mandatory:!1,description:"trace capsule min"},{name:"maxs",mandatory:!1,description:"trace capsule max"},{name:"entity",mandatory:!1,description:"entity to ignore"},{name:"player clip",mandatory:!1,description:"collide with the player solid mask instead of ai solid mask"}]},{_id:896,functionName:"PlaceSpawnPoint",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Raises the spawn point up to make sure it's not in the ground, then drops it back down into the ground.",example:"spawnpoints[i] PlaceSpawnPoint()",variables:[]},{_id:897,functionName:"PlayBattleChatterToTeam",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Play the sound alias as if coming from the entity, so that only one team can hear it",example:'self PlaySoundToTeam( "frag_out", "axis", self )',variables:[{name:"aliasname1",mandatory:!0,description:"The first sound alias to play"},{name:"aliasname2",mandatory:!0,description:"The second sound alias to play"},{name:"teamname",mandatory:!0,description:"The team that will be able to hear the sound. Must be either 'axis' or 'allies' or 'team3'."},{name:"ignoreplayer",mandatory:!1,description:"If present, this player will not hear the sound."}]},{_id:898,functionName:"PlayerBeingSpectated",returnValue:"entity",referenceVariable:"",section:"player",access:"Client",description:"Returns the player the local client is spectating or the player himself if no spectating is going on",example:"spectated = PlayerBeingSpectated( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client to check"}]},{_id:899,functionName:"PlayerBulletTrace",returnValue:"string[]",referenceVariable:"",section:"trace",access:"Server",description:"Allows script to do a bullet point trace with CONTENTS_PLAYER, collides with player hitboxes. Returns hit position, hit entity, hit surface normal.",example:"trace = PlayerBulletTrace( magicBulletOrigin.origin, eyePos, undefined )",variables:[{name:"start",mandatory:!0,description:"The bullet start point"},{name:"end",mandatory:!0,description:"The bullet end point"},{name:"ignore entity",mandatory:!0,description:"An entity to ignore"}]},{_id:900,functionName:"PlayerCamLinkTo",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets the player's vision to look through another entity.",example:'level.player2 CameraLinkTo( cameraUpstairs, "tag_player" )',variables:[{name:"entity",mandatory:!0,description:"Entity to look through."},{name:"tagname",mandatory:!0,description:"Name of tag on host model to attach to."}]},{_id:901,functionName:"PlayerCamUnlink",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Unlinks the player's vision from an entity.",example:"level.player2 CameraUnlink( )",variables:[]},{_id:902,functionName:"PlayerGrappleTrace",returnValue:"vector",referenceVariable:"",section:"trace",access:"Server",description:"Trace to see if grapple is valid",example:"hitp = PlayerGrappleTrace(player.origin, player.origin + (0,0,-500))",variables:[{name:"start",mandatory:!0,description:"starting position"},{name:"end",mandatory:!0,description:"ending position"},{name:"ignore entity",mandatory:!1,description:"this entity should be ignored"}]},{_id:903,functionName:"PlayerLinkedOffsetDisable",returnValue:"void",referenceVariable:"<linked_player>",section:"player",access:"Server",description:"If disabled, the linked player's orientation will not use their link offset.",example:"ac130guy PlayerLinkedOffsetDisable()",variables:[]},{_id:904,functionName:"PlayerLinkedOffsetEnable",returnValue:"void",referenceVariable:"<linked_player>",section:"player",access:"Server",description:"If enabled, the linked player's orientation will use their link offset. This is traditional (CoD4) LinkTo behavior for a player.",example:"ac130guy PlayerLinkedOffsetEnable()",variables:[]},{_id:905,functionName:"PlayerLinkedSetUseBaseAngleForViewClamp",returnValue:"void",referenceVariable:"<linked_player>",section:"player",access:"Server",description:"Sets the whether the player's view clamp is based on the entity (true) or the tag selected (false). Must be called after linking using WeaponViewToDelta",example:"player PlayerLinkedSetUseBaseAngleForViewClamp( true )",variables:[{name:"enable",mandatory:!0,description:"whether or not to enable using the base entity for the view angle clamp base."}]},{_id:906,functionName:"PlayerLinkTo",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Attaches the player to an entity. Any entity rotation is added to the player's view, allow the player to look around. Rotating the parent entity/tag will not move the player's eye position, but only the player's view angles. Thus, the player's eye position is locked in place, always directly above the parent tag.",example:'level.player PlayerLinkTo( vehicle, "tag_player", 0.5 )',variables:[{name:"linkto entity",mandatory:!0,description:"The entity to attach the player to."},{name:"tag",mandatory:!1,description:"The tag to attach the player to."},{name:"view fraction",mandatory:!1,description:"How much the change in the tag's rotation effects the players view. Defaults to 0."},{name:"right arc",mandatory:!1,description:"Angle to clamp view to the right. Defaults to 180."},{name:"left arc",mandatory:!1,description:"Angle to clamp view to the left. Defaults to 180."},{name:"top arc",mandatory:!1,description:"Angle to clamp view to the top. Defaults to 180."},{name:"bottom arc",mandatory:!1,description:"Angle to clamp view to the bottom. Defaults to 180."},{name:"use tag angles",mandatory:!1,description:"Determines how the player's view will be tilted. 'False' (default) means that the orientation of the tag when the player is linked will appear flat to the player. Any rotation from that orientation will tilt the player's view. 'True' means that only a tag angles of (0,0,0) will appear flat to the player. Any rotation from (0,0,0) will tilt the player's view."},{name:"auto recenter",mandatory:!1,description:"Players view will auto recenter to the tag he is linked to. use tag angles must be true."}]},{_id:907,functionName:"PlayerLinkToAbsolute",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Attaches the player to an entity. No view movement is allowed. The player's eye position will remain fixed relative to the parent entity/tag. Thus, pitching and rolling will cause the player's eye position to move. (But the player entity always remains vertical)",example:'player PlayerLinkToAbsolute( vehicle, "tag_player" )',variables:[{name:"lockto entity",mandatory:!0,description:"The entity to attach the player to"},{name:"tag",mandatory:!1,description:"The tag to attach the player to"}]},{_id:908,functionName:"PlayerLinkToBlend",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Only works if the player is currently linked to another entity and angles aren't locked. Lerps the current view angle constraints to the provided ones over the specified time.",example:'player PlayerLinkToBlend( ice_pick, "tag_origin',variables:[{name:"parent",mandatory:!0,description:"The entity to attach the player to."},{name:"tag",mandatory:!1,description:"The tag to attach the player to."},{name:"pos time",mandatory:!1,description:"Lerp duration in seconds. Default is 1."},{name:"pos accel time",mandatory:!1,description:"Acceleration time. Default is 0."},{name:"pos decel time",mandatory:!1,description:"Decelaration time. Default is 0."},{name:"angle time",mandatory:!1,description:"angle Lerp duration in seconds. Default is <time>."},{name:"angle accel time",mandatory:!1,description:"angle Acceleration time. Default is 0."},{name:"angle decel time",mandatory:!1,description:"angle Decelaration time. Default is 0."}]},{_id:909,functionName:"PlayerLinkToDelta",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Attaches the player to an entity. Any entity rotation is added to the player's view, allow the player to look around. The player's eye position will remain fixed relative to the parent entity/tag. Thus, pitching and rolling will cause the player's eye position to move. (But the player entity always remains vertical)",example:'level.player PlayerLinkToDelta( vehicle, "tag_player", 0.5 )',variables:[{name:"linkto entity",mandatory:!0,description:"The entity to attach the player to."},{name:"tag",mandatory:!1,description:"The tag to attach the player to."},{name:"view fraction",mandatory:!1,description:"How much the change in the tag's rotation effects the players view. Defaults to 0."},{name:"right arc",mandatory:!1,description:"Angle to clamp view to the right. Defaults to 180."},{name:"left arc",mandatory:!1,description:"Angle to clamp view to the left. Defaults to 180."},{name:"top arc",mandatory:!1,description:"Angle to clamp view to the top. Defaults to 180."},{name:"bottom arc",mandatory:!1,description:"Angle to clamp view to the bottom. Defaults to 180."},{name:"use tag angles",mandatory:!1,description:"Determines how the player's view will be tilted. 'False' (default) means that the orientation of the tag when the player is linked will appear flat to the player. Any rotation from that orientation will tilt the player's view. 'True' means that only a tag angles of (0,0,0) will appear flat to the player. Any rotation from (0,0,0) will tilt the player's view."},{name:"auto recenter",mandatory:!1,description:"Players view will auto recenter to the tag he is linked to. use tag angles must be true."}]},{_id:910,functionName:"PlayerLinkWeaponViewToDelta",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Similar to PlayerLinkToDelta(), but the player's body stays behind. The player's view attaches to the tag, and any weapon fire will also come from there.",example:'level.player PlayerLinkToDelta( vehicle, "tag_player", 0.5 )',variables:[{name:"linkto entity",mandatory:!0,description:"The entity to attach the player to."},{name:"tag",mandatory:!1,description:"The tag to attach the player to."},{name:"view fraction",mandatory:!1,description:"How much the change in the tag's rotation effects the players view. Defaults to 0."},{name:"right arc",mandatory:!1,description:"Angle to clamp view to the right. Defaults to 180."},{name:"left arc",mandatory:!1,description:"Angle to clamp view to the left. Defaults to 180."},{name:"top arc",mandatory:!1,description:"Angle to clamp view to the top. Defaults to 180."},{name:"bottom arc",mandatory:!1,description:"Angle to clamp view to the bottom. Defaults to 180."},{name:"use tag angles",mandatory:!1,description:"Determines how the player's view will be tilted. 'False' (default) means that the orientation of the tag when the player is linked will appear flat to the player. Any rotation from that orientation will tilt the player's view. 'True' means that only a tag angles of (0,0,0) will appear flat to the player. Any rotation from (0,0,0) will tilt the player's view."}]},{_id:911,functionName:"PlayerPhysicsTrace",returnValue:"vector",referenceVariable:"",section:"trace",access:"Server",description:"Does a physics trace and returns the hit point.",example:"hitp = PlayerPhysicsTrace(player.origin + (0,0,72), player.origin + (0,0,-500))",variables:[{name:"start",mandatory:!0,description:"starting position"},{name:"end",mandatory:!0,description:"ending position"}]},{_id:912,functionName:"PlayerPhysicsTraceIgnoreEnt",returnValue:"vector",referenceVariable:"",section:"physics",access:"Server",description:"Does a physics trace and returns the hit point.",example:"hitp = PlayerPhysicsTrace(player.origin + (0,0,72), player.origin + (0,0,-500))",variables:[{name:"start",mandatory:!0,description:"starting position"},{name:"end",mandatory:!0,description:"ending position"}]},{_id:913,functionName:"PlayerPositionValid",returnValue:"int",referenceVariable:"",section:"player",access:"Server",description:"Returns true if the passed in origin is valid for a spawn (ie not inside something).",example:"if(playerpositionvalid(spawnpoints[i].origin))...",variables:[{name:"position",mandatory:!0,description:"The position of the potential spawn point"}]},{_id:914,functionName:"PlayerPositionValidIgnoreEnt",returnValue:"int",referenceVariable:"",section:"player",access:"Server",description:"Returns true if the passed in origin is valid for a spawn (ie not inside something).",example:"if(playerpositionvalid(spawnpoints[i].origin))...",variables:[{name:"position",mandatory:!0,description:"The position of the potential spawn point"}]},{_id:915,functionName:"PlayerSetGroundReferenceEnt",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"The ground entity's rotation will be added onto the player's view. In particular, this will cause the player's yaw to rotate around the entity's z-axis instead of the world z-axis. You only need to call this function once. After that, any rotation that the reference entity undergoes will affect the player. Call this command again with undefined to turn it off.",example:"player PlayerSetGroundReferenceEnt( seaEnt )",variables:[{name:"ground reference entity",mandatory:!0,description:"The entity used to rotate the player's view."}]},{_id:916,functionName:"PlayerSightTrace",returnValue:"int",referenceVariable:"",section:"trace",access:"Server",description:"Determines if you can see an item. Checks distance and view cone before the trace to increase efficency.",example:"if (0 == (self Playersighttrace(positionOfFlare, 200, lastHit))",variables:[{name:"position",mandatory:!0,description:"place that check if you can see if being performed"},{name:"maxDistance",mandatory:!0,description:"if the position is further than this -1 will be returned"},{name:"hitNum",mandatory:!0,description:"if you run this more than once make sure to populate this with the return of the last as it will increase efficiency"}]},{_id:917,functionName:"PlayFX",returnValue:"entity",referenceVariable:"",section:"effects",access:"Server",description:"Plays the fx at the given location.",example:'PlayFX( level._effect["nuke_fx"], nuke_pos.origin, forward, up )',variables:[{name:"fx name",mandatory:!0,description:"Name of the fx. Fx has to be cached"},{name:"position",mandatory:!0,description:"Position to play the fx at"},{name:"forward",mandatory:!1,description:"The forward vector of the fx"},{name:"up",mandatory:!1,description:"The up vector of the fx"},{name:"ignore pause",mandatory:!1,description:"True if the fx should play even when the game is paused."}]},{_id:918,functionName:"PlayFXOnCamera",returnValue:"entity",referenceVariable:"",section:"effect",access:"Server",description:"Plays the fx at the given offset from the camera.",example:'PlayFX( level._effect["bubbles"], offset, forward, up )',variables:[{name:"fx name",mandatory:!0,description:"Name of the fx. Fx has to be cached"},{name:"offset",mandatory:!1,description:"Offset from camera to play fx"},{name:"forward",mandatory:!1,description:"The forward vector of the fx"},{name:"up",mandatory:!1,description:"The up vector of the fx"},{name:"ignore pause",mandatory:!1,description:"True if the fx should play even when the game is paused."}]},{_id:919,functionName:"PlayFXOnTag",returnValue:"entity",referenceVariable:"",section:"effects",access:"Server",description:"Play fx on a particular tag of an entity",example:'PlayFxOnTag( level._effect["character_fire_death_torso"], self, "J_Spine1" )',variables:[{name:"fx name",mandatory:!0,description:"Name of the fx. Fx has to be cached"},{name:"entity",mandatory:!0,description:"The entity to play the fx on. Should have a model"},{name:"tag",mandatory:!0,description:"The tag to play the fx on"},{name:"ignore pause",mandatory:!1,description:"True if the fx should play even when the game is paused."}]},{_id:920,functionName:"PlayLoopedFX",returnValue:"entity",referenceVariable:"",section:"effects",access:"Server",description:"Play an fx which is looped",example:'PlayLoopedFX( level._effect[self.v["trailfx"]], self.v["trailfxdelay"], self.v["origin"], 0, self.v["forward"], self.v["up"] )',variables:[{name:"fx name",mandatory:!0,description:"Name of the fx. Fx has to be cached"},{name:"repeat",mandatory:!0,description:"Time to repeat after"},{name:"position",mandatory:!0,description:"Position to play the fx at"},{name:"cull distance",mandatory:!1,description:"The cull distance for the fx"},{name:"forward",mandatory:!1,description:"The forward vector of the fx"},{name:"up",mandatory:!1,description:"The up vector of the fx"}]},{_id:921,functionName:"PlayLoopSound",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Server",description:"Play a looping sound with an optional fadetime in seconds.",example:'fire_sound_ent playloopsound ("mpl_player_burn_loop")',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play"},{name:"fadetime",mandatory:!1,description:"Time to fade the sound in. Range is between 1 and 31 inclusive."}]},{_id:922,functionName:"PlayRumbleLoopOnEntity",returnValue:"void",referenceVariable:"<entity>",section:"rumble",access:"Server",description:"Plays a looping rumble on the given entity.",example:'self PlayRumbleLoopOnEntity( "damage_heavy" )',variables:[{name:"rumble name",mandatory:!0,description:"The name of the rumble to play"}]},{_id:923,functionName:"PlayRumbleLoopOnPosition",returnValue:"void",referenceVariable:"",section:"rumble",access:"Server",description:"Play a looping rumble on the given position",example:'PlayRumbleLoopOnPosition( "grenade_rumble", origin )',variables:[{name:"rumblename",mandatory:!0,description:"The rumble name"},{name:"position",mandatory:!0,description:"The rumble position"}]},{_id:924,functionName:"PlayRumbleOnEntity",returnValue:"void",referenceVariable:"<entity>",section:"rumble",access:"Server",description:"Plays a rumble on the given entity.",example:'self PlayRumbleOnEntity( "damage_heavy" )',variables:[{name:"rumble name",mandatory:!0,description:"The name of the rumble to play"}]},{_id:925,functionName:"PlayRumbleOnPosition",returnValue:"void",referenceVariable:"",section:"rumble",access:"Server",description:"Play a rumble on the given position",example:'PlayRumbleOnPosition( "grenade_rumble", origin )',variables:[{name:"rumblename",mandatory:!0,description:"The rumble name"},{name:"position",mandatory:!0,description:"The rumble position"}]},{_id:926,functionName:"PlaySound",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Server",description:"Play the sound at the entity",example:'bomb PlaySound( "zmb_bomb_explode" )',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play"}]},{_id:927,functionName:"PlaySoundAtPosition",returnValue:"void",referenceVariable:"",section:"sound",access:"Server",description:"Play the sound alias from a position",example:'PlaySoundAtPosition("Dirt_skid", ( 100, 100, 0 ) )',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play"},{name:"position",mandatory:!0,description:"The point where the sound is played"}]},{_id:928,functionName:"PlaySoundOnTag",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Server",description:"Play the sound alias as if coming from the tag",example:'self PlaySoundOnTag( soundAlias, "J_Head")',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play, this can be the string name, or the integer hash"},{name:"tag",mandatory:!1,description:"If present, the sound will play at the position of the given tag"},{name:"team",mandatory:!1,description:"If present or not undefined the sound will only be heard by the specified team"},{name:"ent",mandatory:!1,description:"If present the sound will also be heard on the specified entity"}]},{_id:929,functionName:"PlaySoundToAllButPlayer",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Server",description:"Play the sound alias as if coming from the entity, so that everyone but one player can hear it",example:'self PlaySoundToAllButPlayer( "frag_out", self )',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play (string)"},{name:"player",mandatory:!0,description:"The player that will not be able to hear the sound. (entity)"}]},{_id:930,functionName:"PlaySoundToPlayer",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Server",description:"Play the sound alias as if coming from the entity, so that only one player can hear it",example:'self PlaySoundToPlayer( "frag_out", self )',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play (string)"},{name:"player",mandatory:!0,description:"The player that will be able to hear the sound. (entity)"}]},{_id:931,functionName:"PlaySoundToTeam",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Server",description:"Play the sound alias as if coming from the entity, so that only one team can hear it",example:'self PlaySoundToTeam( "frag_out", "axis", self )',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play"},{name:"teamname",mandatory:!0,description:"The team that will be able to hear the sound. Must be either 'axis' or 'allies' or 'team3'."},{name:"ignoreplayer",mandatory:!1,description:"If present, this player will not hear the sound."}]},{_id:932,functionName:"PlaySoundWithNotify",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Server",description:"Play the sound alias as if coming from the entity",example:'self PlaySoundWithNotify("Dirt_skid","skidsound")',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play"},{name:"notification string",mandatory:!1,description:"If present, the sound will notify this string on this entity when done.stopsounds"},{name:"tag",mandatory:!1,description:"If present, the sound will play at the position of the given tag"}]},{_id:933,functionName:"PositionQuery_Filter_Directness",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Directness filter compute the direction information for each of the positions, relative to <origin> and <target>.",example:"PositionQuery_Filter_Directness( queryResult, self.origin, self.enemy.origin )",variables:[{name:"queryStruct",mandatory:!0,description:"result from PositionQuery_Source function. each point contained here will have direction info computed."},{name:"origin",mandatory:!0,description:"usually the position of AI before move."},{name:"target",mandatory:!0,description:"the position AI is trying to approach."},{name:"resultVarName",mandatory:!1,description:"by default the result directness value will be stored in pointStruct.directness, but can be override by this string."}]},{_id:934,functionName:"PositionQuery_Filter_DistanceToGoal",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Calculate the distance to <entity>.goalpos. If the point is in <entity>.goalradius, the distance will be 0. the result is in pointStruct.distToGoal",example:"PositionQuery_Filter_DistanceToGoal( queryResult, self )",variables:[{name:"queryStruct",mandatory:!0,description:'result from PositionQuery_Source function."'},{name:"entity",mandatory:!0,description:'the entity used to check goal."'}]},{_id:935,functionName:"PositionQuery_Filter_InClaimedLocation",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Check if the locations are inside other sentients claimed locations <entity>.inClaimedLocation.",example:"PositionQuery_Filter_InClaimedLocation( queryResult, self )",variables:[{name:"queryStruct",mandatory:!0,description:'result from PositionQuery_Source function."'},{name:"entity",mandatory:!0,description:'the entity used to check goal."'}]},{_id:936,functionName:"PositionQuery_Filter_Sight",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sight filter do sight check on each of the positions to a target position, and store the result in pointStruct.visibility (boolean).",example:"PositionQuery_Filter_Sight( queryResult, self.enemy.origin, self GetEye() - self.origin, self, 30, self.enemy );",variables:[{name:"queryStruct",mandatory:!0,description:'result from PositionQuery_Source function. each point contained here will be used to check sight against <targetPosition>. "'},{name:"targetPosition",mandatory:!0,description:'the position to check sight."'},{name:"offset",mandatory:!1,description:"offset to add on each point before sight checking. this is usually something like"},{name:"visibleBy_Ent",mandatory:!1,description:'if defined, the corresponding sight check function on Actor or Vehicle will be called. Otherwise the checks just do simple bullet tracing."'},{name:"numOfPassedToEarlyOut",mandatory:!1,description:"if defined and bigger than 0, the filter will early out after found this many passed sight checks. this is useful if the points are pre sorted by score and we don't care about lower scored ones.\""},{name:"ignoreEnt",mandatory:!1,description:'ignore entity during trace. if [visibleBy_Ent] is defined, it is already ignored internally. "'},{name:"resultVarName",mandatory:!1,description:'by default the results will be stored in pointStruct.visibility, but can be override by this string. "'}]},{_id:937,functionName:"PositionQuery_Source_Navigation",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Generate points around <origin>, between <minSearchRadius> and <maxSearchRadius> and within <halfHeight> height difference. For ground AI, the points will be on Nav Mesh; for flying AI, the points will be in Nav Volume. Only the points in pathable area will be kept. If the <origin> itself is in pathable area, all the points are guaranteed to be reachable from <origin>. If the <origin> is outside pathable area, all the points will still be in pathable areas surrounding <origin>, but reach-abilities cannot be guaranteed.",example:"queryResult = PositionQuery_Source_Navigation( goalpos, self.radius, self.radius * 8, heightRadius, AI_GOAL_POINT_STEP, self, AI_GOAL_POINT_STEP * 0.2 )if ( queryResult.centerOnNav ){foreach( pointStruct in queryResult.data ){position = pointStruct.origindist = pointStruct.distToOrigin2D...}}",variables:[{name:"origin",mandatory:!0,description:"Position to start the search around."},{name:"minSearchRadius",mandatory:!0,description:"the minimum radius away from origin."},{name:"maxSearchRadius",mandatory:!0,description:"the maximum radius away from origin. can equal to minSearchRadius."},{name:"halfHeight",mandatory:!0,description:"the max height difference (both positive and negative) away from origin."},{name:"innerSpacing",mandatory:!0,description:"the distance between points in."},{name:"reachableBy_Ent",mandatory:!1,description:"if defined, it will be used to make sure all the points are reachable by this entity from <origin> (not the entity's current position). Can pass in a float number radius to get points on NavMesh. Can also pass in string 'navvolume_small' or 'navvolume_big' to get points on navvolume. Note passing in entity radius only gives rough estimate, not correct result."},{name:"outerSpacing",mandatory:!1,description:"if defined, the distance between points will be Lerped from <innerSpacing> to [outerSpacing], to create a gradual distribution."},{name:"distributionBias",mandatory:!1,description:"(vec2) if defined, the density of the points will be changed gradually along the direction of this vector. the magnitude will be use as scalar, with 1 being the norm scale."}]},{_id:938,functionName:"PositionWouldTelefrag",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Returns true if the passed in origin would telefrag a player if another player was spawned there.",example:"if ( PositionWouldTelefrag( spawnpoints[i].origin ) ) ...",variables:[{name:"position",mandatory:!0,description:"The position of the potential spawn point"}]},{_id:939,functionName:"PrecacheLeaderboards",returnValue:"void",referenceVariable:"",section:"precache",access:"Server",description:"Precache a sp/mp leaderboard.",example:'PrecacheLeaderboards( "LB_KILLS LB_WINS LB_TOTALXP LB_ACCURACY" )',variables:[{name:"leaderboard names",mandatory:!0,description:"The name of the leaderboards to precache"}]},{_id:940,functionName:"PredictGrenade",returnValue:"vector",referenceVariable:"<grenade>",section:"weapons",access:"Server",description:"Predict where the grenade (self) will explode.",example:"grenade PredictGrenade()",variables:[]},{_id:941,functionName:"PredictPosition",returnValue:"vector",referenceVariable:"",section:"level",access:"Server",description:"Predict position of the entity at the end of the frames",example:"prediction = PredictPosition( ent, 4 )",variables:[{name:"ent",mandatory:!0,description:"The entity to predict position of"},{name:"frames",mandatory:!0,description:"The frame count"}]},{_id:942,functionName:"PredictSpawnPoint",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Indicates to the Texture Streamer where we expect to spawn in.",example:"player predictSpawnPoint( origin, angles )",variables:[{name:"origin",mandatory:!0,description:"The origin to spawn at"},{name:"angles",mandatory:!0,description:"The angle."}]},{_id:943,functionName:"Print",returnValue:"void",referenceVariable:"",section:"debug",access:"Server",description:"Development only - write to the console",example:'Print( "Stuff and things!" )',variables:[{name:"text",mandatory:!0,description:"text to be written"}]},{_id:944,functionName:"PrintLn",returnValue:"void",referenceVariable:"",section:"debug",access:"Server",description:"Development only - write line to the console",example:'PrintLn( "I could be doing better!" )',variables:[{name:"text",mandatory:!0,description:"text to be written"}]},{_id:945,functionName:"ProcessClientFieldsAsIfNew",returnValue:"void",referenceVariable:"<client>",section:"client",access:"Client",description:"Process the client fields again",example:"self ProcessClientFieldsAsIfNew()",variables:[]},{_id:946,functionName:"PropagateCurrentEvent",returnValue:"void",referenceVariable:"<ai_or_player>",section:"ai",access:"Server",description:"Propagate the current event to other AI.",example:"point = self PropagateCurrentEvent()",variables:[]},{_id:947,functionName:"QSortScoredSpawnPointsAscending",returnValue:"vector[]",referenceVariable:"",section:"spawn",access:"Server",description:"Sort the scored spawn points in an ascending order",example:"sorted_spawn_points = QSortScoredSpawnPointArrayAscending( scored_spawn_points )",variables:[{name:"input_array",mandatory:!0,description:"The array of points"}]},{_id:948,functionName:"QueueMeleeActionState",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Sets the queued action state to melee for the player's default hand.",example:"player QueueMeleeActionState()",variables:[]},{_id:949,functionName:"Radioactive_FX",returnValue:"void",referenceVariable:"<entity>",section:"effect",access:"Client",description:"Plays RadioActive/Fire FX",example:"entity radioactive_fx(0, true)",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"},{name:"bool",mandatory:!1,description:"true/false. Default is true."},{name:"blur level",mandatory:!1,description:"Blur. 0 - 5. Default is 0."},{name:"speed",mandatory:!1,description:"Speed. 0 - 2. Default is 1."},{name:"intensity",mandatory:!1,description:"Intensity. 0 - 5. Default is 2."}]},{_id:950,functionName:"RadiusDamage",returnValue:"void",referenceVariable:"",section:"damage",access:"Server",description:null,example:null,variables:[]},{_id:951,functionName:"ReCacheLeaderboards",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"recaches local client leaderboard",example:"recacheleaderboards(0)",variables:[]},{_id:952,functionName:"RecordBreadcrumbDataForPlayer",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"record a breadcrumb data point for player at time",example:null,variables:[]},{_id:953,functionName:"RefreshShieldAttachment",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Re-attach the shield model to the player.",example:"player RefreshShieldAttachment()",variables:[]},{_id:954,functionName:"RegisterClientField",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"Register a client field. Client fields are variable bit length fields communicated from server to client.",example:'RegisterClientField("world", "my_field", 2, "int"); // registers a world int field with 2 bits of resolution, that can hold the values 0,1,2,3.',variables:[{name:"Client field pool name",mandatory:!0,description:"Which pool the field is allocated from. Currently supported "},{name:"name",mandatory:!0,description:"Unique name to identify the field."},{name:"version",mandatory:!0,description:"Number indicating version this field was added in - see _version.gsh for defines."},{name:"num bits",mandatory:!0,description:"How many bits to use for the field. Valid values are in the range of 1-32. Only ask for as many as you need."},{name:"type",mandatory:!0,description:'Type of the field. Currently supported types "int" or "float"'}]},{_id:955,functionName:"RegisterSkipto",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Register a new skipto name",example:"struct.code_index = RegisterSkipto( msg )",variables:[{name:"skipto_name",mandatory:!0,description:"The skipto name to register"}]},{_id:956,functionName:"ReleaseClaimedTrigger",returnValue:"void",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Release a currently claimed trigger",example:"self.trigger releaseClaimedTrigger()",variables:[]},{_id:957,functionName:"RemoveAllFriendlyScramblers",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"removes all friendly scramblers",example:"player RemoveAllFriendlyScramblers( )",variables:[]},{_id:958,functionName:"RemoveAllSensorGrenadeAreas",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"removes all friendly scramblers",example:"player RemoveAllFriendlyScramblers( )",variables:[]},{_id:959,functionName:"RemoveForceNoCull",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Removes the force-no-cull flag. Entity will now be culled by portals",example:"helicopter RemoveForceNoCull()",variables:[]},{_id:960,functionName:"RemoveFriendlyScrambler",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"removes new friendly scrambler from the compass using the same handle you gave when creating it",example:"player RemoveFriendlyScrambler( scrambler.handle )",variables:[{name:"handle",mandatory:!0,description:"will be used to remove the scrambler"}]},{_id:961,functionName:"RemoveInfluencer",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Removes the given influencer",example:"RemoveInfluencer( influencer_id )",variables:[{name:"influencer id",mandatory:!0,description:"The influencer to remove"}]},{_id:962,functionName:"RemoveNoSunShadow",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Removes the no-sunshadow flag.",example:"helicopter RemoveNoSunShadow()",variables:[]},{_id:963,functionName:"RemoveSensorGrenadeArea",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Removes Sensor Grenade Area from the compass",example:"player RemoveSensorGrenadeArea( sensor.handle )",variables:[{name:"handle",mandatory:!0,description:"will be used to remove the sensor"}]},{_id:964,functionName:"RemoveZombieBoxWeapon",returnValue:"void",referenceVariable:"",section:"zombie",access:"Client",description:"Removes a zombie box weapon",example:"RemoveZombieBoxWeapon( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to remove"}]},{_id:965,functionName:"RenderHealthOverlay",returnValue:"bool",referenceVariable:"",section:"hud",access:"Client",description:"Returns the whether the health overlay should be rendered or not",example:"yesno = RenderHealthOverlay( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"}]},{_id:966,functionName:"RenderHealthOverlayHealth",returnValue:"float",referenceVariable:"",section:"hud",access:"Client",description:"Returns the whether the health overlay health ratio",example:"yesno = GetHealthOverlayHealth( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the player"}]},{_id:967,functionName:"ReportLootConsume",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Used to commit loot currency awarded during gameplay",example:'player ReportLootConsume( "zm_bgb_perkaholic", bgb_amount_used_this_game )',variables:[{name:"item_name",mandatory:!0,description:"The name of the loot to consume"},{name:"quantity",mandatory:!0,description:"The quantity of the loot to consume"}]},{_id:968,functionName:"ReportUser",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:null,example:null,variables:[]},{_id:969,functionName:"ResetAILimit",returnValue:"void",referenceVariable:"",section:"ai",access:"Server",description:"Clears any previous restrictions on the max number of AI.",example:null,variables:[]},{_id:970,functionName:"ResetDestructible",returnValue:"void",referenceVariable:"<entity>",section:"string",access:"Server",description:"Resets the destructible entity back to its start state",example:"vehicle ResetDestructible()",variables:[]},{_id:971,functionName:"ResetDoubleJumpRechargeTime",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Resets the double jump recharge timer as if the player had just used it",example:"player ResetDoubleJumpRechargeTime()",variables:[]},{_id:972,functionName:"ResetFOV",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Replace the current FOV by the default FOV",example:"player ResetFOV()",variables:[]},{_id:973,functionName:"ResetGlass",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Server side glass struct loops through all glass and resets to inital state",example:"ResetGlass()",variables:[]},{_id:974,functionName:"ResetMissileDetonationTime",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Resets the timer for a grenade or missile to its max fuse time.",example:"grenadeEnt ResetMissileDetonationTime()",variables:[{name:"time",mandatory:!1,description:"Override the reset timer from the weapon and specify the time left."}]},{_id:975,functionName:"ResetWeaponCosts",returnValue:"void",referenceVariable:"",section:"weapons",access:"Client",description:"Reset the zombie weapon costs",example:"ResetWeaponCosts( <local client num> )",variables:[{name:"local client num",mandatory:!0,description:"The local client num"}]},{_id:976,functionName:"ResetZombieBoxWeapons",returnValue:"void",referenceVariable:"",section:"zombie",access:"Client",description:"Reset the zombie box weapons",example:"ResetZombieBoxWeapons()",variables:[]},{_id:977,functionName:"ReviveObituary",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Create an revive obituary for a character",example:"Obituary( self )",variables:[{name:"victim",mandatory:!0,description:"The victim entity"}]},{_id:978,functionName:"RopeGetPosition",returnValue:"vector",referenceVariable:"",section:"client",access:"Client",description:"Queries the position of the rope.",example:"RopeGetPosition( ropeid, 1 )",variables:[{name:"ropeid",mandatory:!0,description:"The id of the rope"},{name:"frac",mandatory:!0,description:"Value between 0 and 1 specifying what position we are querying."}]},{_id:979,functionName:"RopePulse",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Creates a stimulus that will effect ropes in the area and radius of the event. Amount of movement is based on damage calculation. Cheaper than physics events, as it only effects ropes. Zero network cost, as it's on the client.",example:"RopePulse(sRopePulse.origin, 10, 150, 100, 1); // 150 damage applied at 10 units or less, 1 damage applied at 150 units distance.",variables:[{name:"origin",mandatory:!0,description:"Where the event is."},{name:"innerRadius",mandatory:!0,description:"inner radius of event. At this radius or lower, innerDamage is done."},{name:"outerRadius",mandatory:!0,description:"outer radius of event. Maximum extent at which outerDamage is done. Damage scales to innerDamage between outerRadius and innerRadius"},{name:"innerDamage",mandatory:!0,description:"how much damage is applied at innerRadius, or lower."},{name:"outerDamage",mandatory:!0,description:"how much damage is applied at outerRadius."}]},{_id:980,functionName:"Rotate",returnValue:"void",referenceVariable:"",section:"motion",access:"Server",description:"Causes a script entity to rotate, rotating around its origin",example:"self Rotate( rotationVir )",variables:[{name:"rotation vector",mandatory:!0,description:"The direction of the bobbing"}]},{_id:981,functionName:"RotatePitch",returnValue:"void",referenceVariable:"",section:"motion",access:"Server",description:"Rotate this entity to the given pitch",example:"treeorg RotatePitch( -5, 0.26, 0.15, 0.1 )",variables:[{name:"pitch angle",mandatory:!0,description:"The new pitch angle in degrees"},{name:"time",mandatory:!0,description:"The time to rotate in seconds"},{name:"acceleration time",mandatory:!1,description:"The time spent accelerating in seconds"},{name:"deceleration time",mandatory:!1,description:"The time spent decelerating in seconds"}]},{_id:982,functionName:"RotateRoll",returnValue:"void",referenceVariable:"",section:"motion",access:"Server",description:"Rotate this entity to the given roll angle",example:"self RotateRoll( (2 * 1500 + 3 * Randomfloat( 2500 )) * -1, 5, 0, 0 )",variables:[{name:"roll angle",mandatory:!0,description:"The new roll angle in degrees"},{name:"time",mandatory:!0,description:"The time to rotate in seconds"},{name:"acceleration time",mandatory:!1,description:"The time spent accelerating in seconds"},{name:"deceleration time",mandatory:!1,description:"The time spent decelerating in seconds"}]},{_id:983,functionName:"RotateTo",returnValue:"void",referenceVariable:"",section:"motion",access:"Server",description:"Rotate this entity to the given world rotation value",example:"shutter RotateTo( (shutter.angles[0], newYaw, shutter.angles[2]), newTime )",variables:[{name:"angles",mandatory:!0,description:"The new world angle to rotate to"},{name:"time",mandatory:!0,description:"The time to rotate in seconds"},{name:"acceleration time",mandatory:!1,description:"The time spent accelerating in seconds"},{name:"deceleration time",mandatory:!1,description:"The time spent decelerating in seconds"}]},{_id:984,functionName:"RotateVelocity",returnValue:"void",referenceVariable:"",section:"motion",access:"Server",description:"Rotate this entity at a particular velocity for a given time",example:"self RotateVelocity( (x,y,z), 12 )",variables:[{name:"rotate velocity",mandatory:!0,description:"The rotational velocity to rotate"},{name:"time",mandatory:!0,description:"The time to rotate in seconds"},{name:"acceleration time",mandatory:!1,description:"The time spent accelerating in seconds"},{name:"deceleration time",mandatory:!1,description:"The time spent decelerating in seconds"}]},{_id:985,functionName:"RotateYaw",returnValue:"void",referenceVariable:"",section:"motion",access:"Server",description:"Rotate this entity to the given yaw",example:null,variables:[{name:"yaw angle",mandatory:!0,description:"The new yaw angle in degrees"},{name:"time",mandatory:!0,description:"The time to rotate in seconds"},{name:"acceleration time",mandatory:!1,description:"The time spent accelerating in seconds"},{name:"deceleration time",mandatory:!1,description:"The time spent decelerating in seconds"}]},{_id:986,functionName:"ScreenShake",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Create a screen shake event on the given point.",example:"ScreenShake( jolt.origin, 0.3, 0.3, 0.3, 3, 0.2, 3, 850, 0.5, 0.25, 0.25 ); // locationalScreenShake( (0,0,0), 0.3, 0.3, 0.3, 3, 0.2, 3, 0, 0.5, 0.25, 0.25, player ); // non locational for one player only",variables:[{name:"sourcePoint",mandatory:!0,description:"The position of the earthquake."},{name:"scalepitch",mandatory:!0,description:"The scale of the shake in player's pitch. Max is 100; Accurate to 2 decimal places."},{name:"scaleyaw",mandatory:!0,description:"The scale of the shake in player's yaw. Max is 100; Accurate to 2 decimal places."},{name:"scaleroll",mandatory:!0,description:"The scale of the shake in player's roll. Max is 100; Accurate to 2 decimal places."},{name:"duration",mandatory:!0,description:"Duration in seconds."},{name:"durationfadeup",mandatory:!1,description:"Duration in seconds, included in base duration. Default is 0. Value of -1 means duration - durationfadeup."},{name:"durationfadedown",mandatory:!1,description:"Duration in seconds, included in base duration. Default is -1. Value of -1 means duration - durationfadedown."},{name:"radius",mandatory:!1,description:"The radius of shake, dampens as you move away from entity. Default is 0 = shake is global"},{name:"frequencypitch",mandatory:!1,description:"The scaled speed of the shake's pitch. Default is 1. Max is 100; Accurate to 2 decimal places."},{name:"frequencyyaw",mandatory:!1,description:"The scaled speed of the shake's yaw. Default is 1. Max is 100; Accurate to 2 decimal places."},{name:"frequencyroll",mandatory:!1,description:"The scaled speed of the shake's roll. Default is 1. Max is 100; Accurate to 2 decimal places."},{name:"exponent",mandatory:!1,description:"The scale is multiplied by itself 'exponent' times to determine how the shake falls off. Default is 1 which is a linear falloff. Max is 100; Accurate to 2 decimal places"},{name:"target",mandatory:!1,description:"Target is given if screen shake is to be shown to particular client only"}]},{_id:987,functionName:"SendFaceEvent",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Broadcast to the client a face event",example:"self SendFaceEvent( <index> )",variables:[{name:"index",mandatory:!0,description:"Face event index (string)"}]},{_id:988,functionName:"SendKillstreakDamageEvent",returnValue:"void",referenceVariable:"",section:"string",access:"Server",description:"Send a killstreak damage event to the client",example:"killstreakOwner SendKillstreakDamageEvent( 25 )",variables:[{name:"damage",mandatory:!1,description:"How much damage was done"}]},{_id:989,functionName:"ServerFieldGetValue",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Get the value of a serverfield from a given player",example:'ServerFieldGetValue(self, "my_field");',variables:[{name:"player",mandatory:!0,description:"player to get value from[MANDATORY]"}]},{_id:990,functionName:"ServerFieldIncrement",returnValue:"void",referenceVariable:"",section:"entity",access:"Client",description:"increment the value in a server field. wrap on overflow.",example:'ServerFieldIncrement(player, "my_field")',variables:[{name:"player",mandatory:!0,description:"the player to operate on[MANDATORY]"}]},{_id:991,functionName:"ServerFieldRegister",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Register a server field. Server fields are variable bit length fields communicated from client to server",example:'RegisterServerField("my_field", 2, "int"); // registers an int field with 2 bits of resolution, that can hold the values 0,1,2,3.',variables:[{name:"name",mandatory:!0,description:"Unique name to identify the field.[MANDATORY]"},{name:"type",mandatory:!0,description:'Type of the field. Currently supported types "int" or "float"'},{name:"callback",mandatory:!0,description:"Function that gets called when the value changes (each client can toggle this bit independently of the others)"}]},{_id:992,functionName:"ServerFieldSetVal",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"Register a server field. server fields are variable bit length fields communicated from client to server",example:'RegisterServerField("my_field", VERSION_SHIP, 2, "int", ',variables:[{name:"player",mandatory:!0,description:"the player to operate on[MANDATORY]"},{name:"value",mandatory:!0,description:"the value of the field "}]},{_id:993,functionName:"ServerObjective_GetObjective",returnValue:"int",referenceVariable:"",section:"objective",access:"Client",description:"Returns the index of the objective or undefined if it does not exist",example:'objective_num = ServerObjective_GetObjective( localClientNum, "dom_a" )',variables:[{name:"localClientNum",mandatory:!0,description:"The local client number"},{name:"objectiveName",mandatory:!0,description:"The name of the objective"}]},{_id:994,functionName:"ServerObjective_GetObjectiveEntity",returnValue:"entity",referenceVariable:"",section:"objective",access:"Client",description:"Returns the entity of the objective",example:"origin = ServerObjective_GetObjectiveEntity( localClientNum, objective_num )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number"},{name:"objectiveID",mandatory:!0,description:"The index of objective"}]},{_id:995,functionName:"ServerObjective_GetObjectiveGameModeFlags",returnValue:"int",referenceVariable:"",section:"objective",access:"Client",description:"Returns the origin of the objective",example:"origin = ServerObjective_GetObjectiveGameModeFlags( localClientNum, objective_num )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number"},{name:"objectiveID",mandatory:!0,description:"The index of objective"}]},{_id:996,functionName:"ServerObjective_GetObjectiveOrigin",returnValue:"vector",referenceVariable:"",section:"objective",access:"Client",description:"Returns the index of the objective or undefined if it does not exist",example:"origin = ServerObjective_GetObjectiveOrigin( localClientNum, objective_num )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number"},{name:"objectiveID",mandatory:!0,description:"The index of objective"}]},{_id:997,functionName:"ServerObjective_GetObjectiveProgress",returnValue:"float",referenceVariable:"",section:"objective",access:"Client",description:"Returns the origin of the objective",example:"origin = ServerObjective_GetObjectiveProgress( localClientNum, objective_num )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number"},{name:"objectiveID",mandatory:!0,description:"The index of objective"}]},{_id:998,functionName:"ServerObjective_GetObjectiveTeam",returnValue:"void",referenceVariable:"",section:"objective",access:"Client",description:"Returns the origin of the objective",example:"origin = ServerObjective_GetObjectiveTeam( localClientNum, objective_num )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number"},{name:"objectiveID",mandatory:!0,description:"The index of objective"}]},{_id:999,functionName:"ServiceEvent",returnValue:"void",referenceVariable:"<ai>",section:"ai",access:"Server",description:"Set the specified event to serviced.",example:"point = self ServiceEvent( 100 )",variables:[{name:"eventId",mandatory:!0,description:"The identifier of the event (integer)"}]},{_id:1e3,functionName:"ServiceEventsInRadius",returnValue:"void",referenceVariable:"<ai>",section:"ai",access:"Server",description:"Set the events within a radius to serviced.",example:"self ServiceEventsInRadius( self.origin, 500 )",variables:[{name:"origin",mandatory:!0,description:"Source position"},{name:"radius",mandatory:!0,description:"Radius of events to service (-1 for all)"}]},{_id:1001,functionName:"SessionModeAbbreviation",returnValue:"string",referenceVariable:"",section:"level",access:"Server",description:'Returns abbreviation of the current session mode, or "default" if none',example:'spawnpointname = SessionModeAbbreviation() + "_frontend_camera',variables:[]},{_id:1002,functionName:"SessionModeIsCampaignDeadOpsGame",returnValue:"int",referenceVariable:"",section:"level",access:"Client",description:"Returns true/false if the current session mode is DeadOps game",example:"if ( SessionModeIsCampaignDeadOpsGame() )",variables:[]},{_id:1003,functionName:"SessionModeIsCampaignGame",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true/false if the current session mode is a campaign game",example:"if ( SessionModeIsCampaignGame() )",variables:[]},{_id:1004,functionName:"SessionModeIsCampaignZombiesGame",returnValue:"int",referenceVariable:"",section:"zombie",access:"Server",description:"Returns true/false if the current session mode is a campaign game and the campaign mode is set to zombies.",example:"if ( SessionModeIsCampaignZombiesGame() )",variables:[]},{_id:1005,functionName:"SessionModeIsMultiplayerGame",returnValue:"int",referenceVariable:"",section:"player",access:"Server",description:"Returns true/false if the current session mode is a multiplayer game",example:"if ( SessionModeIsMultiplayerGame() )",variables:[]},{_id:1006,functionName:"SessionModeIsOnlineGame",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true/false if the current session mode is onlinegame",example:"if ( SessionModeIsOnlineGame() )",variables:[]},{_id:1007,functionName:"SessionModeIsPrivate",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true/false if the current session mode is a private game",example:"if ( SessionModeIsPrivate() )",variables:[]},{_id:1008,functionName:"SessionModeIsPrivateOnlineGame",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true/false if the current session mode is a private onlinegame",example:"if ( SessionModeIsPrivateOnlineGame() )",variables:[]},{_id:1009,functionName:"SessionModeIsSystemlink",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns true/false if the current session mode is a systemlink game",example:"if ( SessionModeIsSystemlink() )",variables:[]},{_id:1010,functionName:"SessionModeIsZombiesGame",returnValue:"int",referenceVariable:"",section:"zombie",access:"Server",description:"Returns true/false if the current session mode is a zombies game",example:"if ( SessionModeIsZombiesGame() )",variables:[]},{_id:1011,functionName:"SetActorWeapon",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Sets the actor weapon.",example:'self SetActorWeapon( "weapon_name" )',variables:[{name:"weaponname",mandatory:!0,description:"The weapon name. (string)"},{name:"weapon options",mandatory:!1,description:"options value computed using calcweaponoptions"}]},{_id:1012,functionName:"SetAILimit",returnValue:"void",referenceVariable:"",section:"ai",access:"Server",description:"Allows you to specify a max number of active AI - which over-rides the MAX_AI functionality in the engine, when it comes time to spawn in new AI. Setting the value higher will not give you more AI than the system supports.",example:"SetAILimit( 10 )",variables:[]},{_id:1013,functionName:"SetAISpread",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Sets the spread of this turret when used by an AI",example:"roof_turret SetAISpread( 0.2 )",variables:[{name:"spread",mandatory:!0,description:"The spread of the turret in degrees"}]},{_id:1014,functionName:"SetAmbientSnapshot",returnValue:"void",referenceVariable:"",section:"entity",access:"Client",description:"Sets the ambient snapshot",example:"SetAmbientSnapshot( level._sndActiveSnapshot )",variables:[{name:"name",mandatory:!0,description:"Name of the snapshot"}]},{_id:1015,functionName:"SetAnim",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:'Restart"',example:"self SetAnim( %precombatrun1, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1016,functionName:"SetAnimForceNew",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Debug only functionality that adds a new instance of an animation to an animtree setting its time to a specific point.",example:"self SetAnimForceNew( %precombatrun1, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to set this animation to after adding it. Defaults to 0."},{name:"goalTime",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1017,functionName:"SetAnimKnob",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:'See "SetAnim.',example:"self SetAnimKnob( %precombatrun1, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1018,functionName:"SetAnimKnobAll",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:'See "SetAnim.',example:"self SetAnimKnobAll( %precombatrun1, %body, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"root",mandatory:!0,description:"An ancestor of the animation."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1019,functionName:"SetAnimKnobAllLimited",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:'See "SetAnim.',example:"self SetAnimKnobAllLimited( %precombatrun1, %body, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"root",mandatory:!0,description:"An ancestor of the animation."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1020,functionName:"SetAnimKnobAllLimitedRestart",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:'See "SetAnim.',example:"self SetAnimKnobAllLimitedRestart( %precombatrun1, %body, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"root",mandatory:!0,description:"An ancestor of the animation."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1021,functionName:"SetAnimKnobAllRestart",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:'See "SetAnim.',example:"self SetAnimKnobAllRestart( %precombatrun1, %body, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"root",mandatory:!0,description:"An ancestor of the animation."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1022,functionName:"SetAnimKnobLimited",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:'See "SetAnim.',example:"self SetAnimKnobLimited( %precombatrun1, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1023,functionName:"SetAnimKnobLimitedRestart",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:'See "SetAnim.',example:"self SetAnimKnobLimitedRestart( %precombatrun1, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1024,functionName:"SetAnimKnobRestart",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:'See "SetAnim.',example:"self SetAnimKnobRestart( %precombatrun1, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1025,functionName:"SetAnimLimited",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Client",description:'See "SetAnim.',example:"self SetAnimLimited( %precombatrun1, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1026,functionName:"SetAnimLimitedRestart",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Client",description:'See "SetAnim.',example:"self SetAnimLimitedRestart( %precombatrun1, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1027,functionName:"SetAnimRestart",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Client",description:'See "SetAnim.',example:"self SetAnimRestart( %precombatrun1, 1, 0.1, 1 )",variables:[{name:"animation",mandatory:!0,description:"The animation or animtree node to change."},{name:"weight",mandatory:!1,description:"Goal weight of this animation. Defaults to 1.0."},{name:"time",mandatory:!1,description:"Time to transition to this weight in seconds. Defaults to 0.2."},{name:"rate",mandatory:!1,description:"Playback rate of the animation. Defaults to 1.0."}]},{_id:1028,functionName:"SetAnimTime",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Get the animation time for the given animation.",example:"if ( (self GetAnimTime( %walk_and_run_loops ) ) < 0.5 )",variables:[{name:"animation",mandatory:!0,description:"animation to manipulate"}]},{_id:1029,functionName:"SetAnimTimeByName",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Set the animation normalized time for the given animation.",example:'self SetAnimTimeByName( "ai_anim_walk", 0.5)',variables:[{name:"animation",mandatory:!0,description:"animation to manipulate"},{name:"time",mandatory:!0,description:"0->1"}]},{_id:1030,functionName:"SetArchive",returnValue:"void",referenceVariable:"",section:"system",access:"Server",description:"deprecated function, does nothing",example:null,variables:[]},{_id:1031,functionName:"SetAssassinationEnabled",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Enable or disable assassinations on the AI. Also turns on/off the can assassinate indicator.",example:"quadtank SetAssassinationEnabled( true )",variables:[{name:"flag",mandatory:!0,description:"Whether to use infrared material or not (boolean)"}]},{_id:1032,functionName:"SetAttachmentCosmeticVariantIndex",returnValue:"void",referenceVariable:"<weapon>",section:"weapons",access:"Server",description:"Set the attachment cosmetic variant index for the weapon",example:"level.weapon_clientscript_cac_model[type] SetAttachmentCosmeticVariantIndex( weaponFullName, level.attachment_names[i], 0 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon full name"},{name:"attachment name",mandatory:!0,description:"The attachment name of the weapon"},{name:"acvi",mandatory:!0,description:"The attachment cosmetic variant index"}]},{_id:1033,functionName:"SetAttachmentCosmeticVariantIndexes",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets the previously calculated SetAttachmentCosmeticVariantIndexes of the entity. The entity should not be a player",example:"killcamEnt SetAttachmentCosmeticVariantIndexes( acvi )",variables:[{name:"acvi",mandatory:!0,description:"The AttachmentCosmeticVariantIndexes to set"}]},{_id:1034,functionName:"SetAttachmentCosmeticVariants",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Set the AttachmentCosmeticVariantIndexes data to be passed in to the weapon",example:'SetAttachmentCosmeticVariants( "mp7_mp", "acog", 2, "grip", 1 )',variables:[{name:"weaponname",mandatory:!0,description:"the name of the base weapon to return[OPTIONAL]"},{name:"variantindex_1",mandatory:!1,description:"the index of the cosmetic variant to use for the first attachment"},{name:"attachmentname_2",mandatory:!1,description:"the name of the second attachment[OPTIONAL]"},{name:"attachmentname_3",mandatory:!1,description:"the name of the third attachment"},{name:"variantindex_3",mandatory:!1,description:"the index of the cosmetic variant to use for the third attachment[OPTIONAL]"},{name:"variantindex_4",mandatory:!1,description:"the index of the cosmetic variant to use for the fourth attachment"},{name:"attachmentname_5",mandatory:!1,description:"the name of the fifth attachment[OPTIONAL]"},{name:"attachmentname_6",mandatory:!1,description:"the name of the sixth attachment"},{name:"variantindex_6",mandatory:!1,description:"the index of the cosmetic variant to use for the sixth attachment[OPTIONAL]"},{name:"variantindex_7",mandatory:!1,description:"the index of the cosmetic variant to use for the seventh attachment"},{name:"attachmentname_8",mandatory:!1,description:"the name of the eighth attachment[OPTIONAL]"}]},{_id:1035,functionName:"SetAvoidanceMask",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set the avoidance mask of this Havok character.",example:'randEnemy SetAvoidanceMask("avoid none")',variables:[{name:"Mask",mandatory:!0,description:"(const string) Mask must be 'avoid all', 'avoid none', 'avoid actor', 'avoid ai'(actors+vehicles), 'avoid player', or 'avoid vehicle'"}]},{_id:1036,functionName:"SetAvoidanceProperty",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set the avoidance properties of this Havok character.",example:'randAlly SetAvoidanceProperty("collision penalty", 0.1)',variables:[{name:"Property",mandatory:!0,description:"(const string) Property must be 'collision penalty' or 'dodge penalty'"},{name:"Value",mandatory:!0,description:"(float) The value to set the property to"}]},{_id:1037,functionName:"SetBallPassAllowed",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Enables or disables ball passing for the given player.",example:"player SetBallPassAllowed( true )",variables:[]},{_id:1038,functionName:"SetBeastModeIconMaterial",returnValue:"void",referenceVariable:"",section:"hud",access:"Client",description:"sets the material used by beast mode icons",example:'SetBeastModeIconMaterial( 1, "cool_icon_1" )',variables:[{name:"iconid",mandatory:!0,description:"1 melee 2 electricity 3 grapple"},{name:"materialname",mandatory:!0,description:"material name"}]},{_id:1039,functionName:"SetBGBCost",returnValue:"void",referenceVariable:"",section:"zombie",access:"Client",description:"Sets the current BGB cost",example:"SetBGBCost( 115935 )",variables:[{name:"local client num",mandatory:!0,description:"The local client num[MANDATORY]"}]},{_id:1040,functionName:"SetBlur",returnValue:"void",referenceVariable:"<entity>",section:"effects",access:"Server",description:"Blur the screen over a period of time.",example:"setblur( 10.3, 3.0 )",variables:[{name:"target_blur",mandatory:!0,description:"The final blur. The value is pixels for Gaussian blur at 640x480. Must be a floating point value greater than 0."},{name:"time",mandatory:!0,description:"Time in seconds"}]},{_id:1041,functionName:"SetBlurByLocalClientNum",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Sets the blur for the local client given",example:"SetBlurByLocalClientNum( localClientNum, curr_info.magnitude, curr_info.transition_in )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client number"},{name:"blurFinalValue",mandatory:!0,description:"The blur value (must be positive)"},{name:"blurTime",mandatory:!0,description:"The time to blur (must be positive)"}]},{_id:1042,functionName:"SetBodyRenderOptions",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets the entity body, helmet and head render options.",example:"heroModel SetBodyRenderOptions( bodyRenderOptions, helmetRenderOptions, headRenderOptions )",variables:[{name:"bodyRenderOptions",mandatory:!0,description:"The packed body render options - calculated with GetHeroBodyRenderOptions"},{name:"helmetRenderOptions",mandatory:!0,description:"The packed helmet render options - calculated with GetHeroHelmetRenderOptions"},{name:"headRenderOptions",mandatory:!0,description:"The packed head render options - calculated with GetHeroHeadRenderOptions"}]},{_id:1043,functionName:"SetBodyRenderOptionsPacked",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Sets the packed value of body render options (body type, style, colors)",example:"gibEntity SetBodyRenderOptionsPacked( 0 )",variables:[{name:"value",mandatory:!0,description:"Usually returned value from GetBodyRenderOptionsPacked()"}]},{_id:1044,functionName:"SetBombTimer",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Bomb timer set in the match state",example:'SetBombTimer( "A", 50000 )',variables:[{name:"flag bit",mandatory:!0,description:"The flag bit to change"},{name:"value",mandatory:!0,description:"The new value of the bit"}]},{_id:1045,functionName:"SetBurn",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set the entity burning for the given time",example:"self SetBurn( 3.0 )",variables:[{name:"time",mandatory:!0,description:"Time to burn for ( greater than 0 )"}]},{_id:1046,functionName:"SetCameraSpikeActive",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets the state of a player's camera spike.",example:"player SetCameraSpikeActive( 1 )",variables:[{name:"toggle",mandatory:!0,description:"0 for off, 1 for on"}]},{_id:1047,functionName:"SetCanDamage",returnValue:"void",referenceVariable:"",section:"damage",access:"Server",description:"Set the candamage flag for this entity - this means that it can respond to notifies from bullets and grenade hits",example:"self SetCanDamage( true )",variables:[{name:"can damage",mandatory:!0,description:"The can damage flag"}]},{_id:1048,functionName:"SetClearanceCeiling",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets a new clearance ceiling. If the value is larger than the current ceiling, cut faces will be invalidated.",example:"SetClearanceCeiling( 15.0 )",variables:[]},{_id:1049,functionName:"SetClientNameMode",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"alters the way that the player name is updated, to prevent cheating by spectators altering their name to communicate with active players.",example:'SetClientNameMode( "auto_change" )',variables:[{name:"name mode",mandatory:!0,description:"either 'auto_change' or 'manual_change'"}]},{_id:1050,functionName:"SetClone",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets the contents for the clone.",example:"clone SetClone()",variables:[]},{_id:1051,functionName:"SetCompassIcon",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Sets the icon to be shown on the minimap",example:"plane setCompassIcon(iconName)",variables:[{name:"iconName",mandatory:!0,description:"Name of compass material"}]},{_id:1052,functionName:"SetContents",returnValue:"int",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets contents of the entity to the given content",example:"reconModel SetContents( 0 )",variables:[{name:"content",mandatory:!0,description:"The content to set for the entity"}]},{_id:1053,functionName:"SetCorpseGibState",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Sets the gib state for the body rendering.",example:"corpse SetCorpseGibState( leg_state, arm_state )",variables:[{name:"leg state",mandatory:!0,description:"0 - 3 state"},{name:"arm state",mandatory:!0,description:"0 - 3 state"}]},{_id:1054,functionName:"SetCullDist",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Set the cull distance for a level",example:"SetCullDist( 7200 )",variables:[{name:"cull distance",mandatory:!0,description:"The cull distance"}]},{_id:1055,functionName:"SetCursorHint",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Attach a cursor hint to the entity.",example:"self setCursorHint( cursor_hint, cursor_hint_weapon )",variables:[]},{_id:1056,functionName:"SetDamageDirectionIndicator",returnValue:"void",referenceVariable:"",section:"hud",access:"Client",description:"Use the armor version of the hit indicator",example:null,variables:[{name:"indicator",mandatory:!0,description:"0 = regular, 1 = armor"}]},{_id:1057,functionName:"SetDangerous",returnValue:"void",referenceVariable:"<pathnode>",section:"pathnode",access:"Server",description:"Set this node to be a dangerous node for a particular team. works only on pathnodes.",example:"self SetDangerous( self.team, true )",variables:[{name:"team",mandatory:!0,description:"Name of the team."},{name:"flag",mandatory:!0,description:"True if dangerous. False otherwise"}]},{_id:1058,functionName:"SetDedicatedShadow",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Enabled or Disables dedicated shadow for a model",example:"thing SetDedicatedShadow( true )",variables:[{name:"flag",mandatory:!1,description:"True or False, enabled or disabled"}]},{_id:1059,functionName:"SetDefaultDropPitch",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Set the default drop pitch that the turret attempts to return to when it is not in use.",example:"turret SetDefaultDropPitch( -90 )",variables:[{name:"pitch",mandatory:!0,description:"yaw of the turret (side to side) in degrees."}]},{_id:1060,functionName:"SetDemoIntermissionPoint",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Sets the intermission point for the demos.",example:"setDemoIntermissionPoint( spawnpoint.origin, spawnpoint.angles )",variables:[{name:"origin",mandatory:!0,description:""},{name:"angles",mandatory:!0,description:""}]},{_id:1061,functionName:"SetDepthOfField",returnValue:"void",referenceVariable:"<entity>",section:"player",access:"Server",description:"Set the Depth of Field.",example:"self SetDepthOfField( 0, 0, 512, 4000, 4, 0 )",variables:[{name:"nearStart",mandatory:!0,description:"Near start (should be greater than 0)"},{name:"nearEnd",mandatory:!0,description:"Near end (should be greater than 0)"},{name:"farStart",mandatory:!0,description:"Far start (should be greater than 0)"},{name:"farEnd",mandatory:!0,description:"Far end (should be greater than 0)"},{name:"nearBlur",mandatory:!0,description:"Near blur"},{name:"farBlur",mandatory:!0,description:"Far blur"}]},{_id:1062,functionName:"SetDoubleJumpEnergy",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets a double jump energy amount on the player",example:"player SetDoubleJumpEnergy( <energy> )",variables:[{name:"energy",mandatory:!0,description:"% energy to set on the player"}]},{_id:1063,functionName:"SetDrawInfrared",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Draw this entity using infrared material when using infrared scope.",example:"helicopter SetDrawInfrared( true )",variables:[{name:"flag",mandatory:!0,description:"Whether to use infrared material or not (boolean)"}]},{_id:1064,functionName:"SetDrawName",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Sets the drawnname of client ent",example:'dude SetDrawName( "dJVahn" )',variables:[{name:"text",mandatory:!0,description:"The name."},{name:"force vis",mandatory:!1,description:"bool"},{name:"alpha",mandatory:!1,description:"alpha level int"}]},{_id:1065,functionName:"SetDrawOwnerName",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Draws the entity's owners name above the entity.",example:"entity SetDrawOwnerName( true, true )",variables:[{name:"bool",mandatory:!0,description:"Enable/Disable using the owners name."},{name:"bool",mandatory:!1,description:"Whether to always draw the name rega"}]},{_id:1066,functionName:"SetDvar",returnValue:"void",referenceVariable:"",section:"dvars",access:"Server",description:"Sets the value of a dvar.",example:'SetDvar( "r_eyesAdjust", "1" )',variables:[{name:"dvar",mandatory:!0,description:"The dvar name as a string."},{name:"value",mandatory:!0,description:"The dvar value."}]},{_id:1067,functionName:"SetDynEntBodyRenderOptionsPacked",returnValue:"void",referenceVariable:"",section:"entity",access:"Client",description:"Sets the packed value of body render options (body type, style, colors)",example:"SetDynEntBodyRenderOptionsPacked( gibEntity, 0 )",variables:[{name:"dynent",mandatory:!0,description:"the entity to set"},{name:"packed render options",mandatory:!0,description:"Usually returned value from GetBodyRenderOptionsPacked()"}]},{_id:1068,functionName:"SetDynEntEnabled",returnValue:"void",referenceVariable:"",section:"entity",access:"Client",description:"Set this dyn ent to enabled or disabled. Disabled stops the physics and hides the dyn ent.",example:"SetDynEntEnabled( brick, 1 )",variables:[{name:"dynent",mandatory:!0,description:"the entity to set"},{name:"enabled",mandatory:!1,description:"1 if dynent is enabled, 0 otherwise"}]},{_id:1069,functionName:"SetElectrified",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Electrify the entity for the given time",example:"self SetElectrified( 3.0 )",variables:[{name:"time",mandatory:!0,description:"Time to get electrified for ( greater than 0 )"}]},{_id:1070,functionName:"SetEMPJammed",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Sets whether a player/client is affected by EMP",example:"player SetEMPJammed( true )",variables:[{name:"isJammed",mandatory:!0,description:"Whether the player should be jammed or not. ( boolean )"}]},{_id:1071,functionName:"SetEnableNode",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Disables or enabled this node.",example:"SetEnableNode( node, false )",variables:[{name:"node",mandatory:!0,description:"the node to enable/disable"},{name:"truefalse",mandatory:!1,description:"whether it should be enabled"}]},{_id:1072,functionName:"SetEnemyGlobalScrambler",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Set to true if there is a global enemy scrambler active",example:"player SetEnemyGlobalScrambler( 1 )",variables:[{name:"bool",mandatory:!0,description:"true if there is a scrabler active, false otherwise"}]},{_id:1073,functionName:"SetEnemyModel",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Sets the model of the actor that actors enemies will see to the given model name",example:'dog SetEnemyModel( "german_shepard_black" )',variables:[{name:"model name",mandatory:!0,description:"The name of the model to set this actor to"}]},{_id:1074,functionName:"SetEnemyScramblerAmount",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Sets the amount alpha of the scrambler applied to the compass",example:"player SetEnemyScramblerAmount( 1.0 )",variables:[{name:"float",mandatory:!0,description:"Between 0.0 and 1.0"}]},{_id:1075,functionName:"SetEntBeastModeIconType",returnValue:"void",referenceVariable:"",section:"hud",access:"Client",description:"sets the beast mode icon shown for a particular entity",example:"object SetBeastModeIconMaterial( 2, object.origin )",variables:[{name:"iconid",mandatory:!0,description:"1 melee 2 electricity 3 grapple"},{name:"location",mandatory:!1,description:"icon location"}]},{_id:1076,functionName:"SetEntGravityTrajectory",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets the gravity trajectory type for the entity.",example:"player SetEntGravityTrajectory( 0 )",variables:[{name:"trajectory",mandatory:!0,description:"0 = TR_GRAVITY, 1 = TR_MOON_GRAVITY"}]},{_id:1077,functionName:"SetEntityAnimRate",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"set the entity animation rate - ZOMBIES ONLY",example:"self SetEntityAnimRate( 1.0 )",variables:[{name:"rate",mandatory:!0,description:"animation rate"}]},{_id:1078,functionName:"SetEntityPaused",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets whether a given entity will advance normally.",example:"ent SetEntityPaused( true )",variables:[{name:"ignore",mandatory:!0,description:"Whether or not to advance normally."}]},{_id:1079,functionName:"SetEntityWeapon",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Set weapon ent field from script.",example:'ent SetEntityWeapon( "kniferang_mp" )',variables:[{name:"weapon name",mandatory:!0,description:"the weapon name"}]},{_id:1080,functionName:"SetExcludeTeamForTrigger",returnValue:"void",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Set the team that this trigger will not react to. Reacts to all other teams.",example:'self SetExcludeTeamForTrigger( game["attackers"] )',variables:[{name:"team name",mandatory:!0,description:"The name of the team that the trigger will not respond to. Must be either 'axis', 'allies', 'team3', 'team4', 'team5', 'team6' or 'none'"}]},{_id:1081,functionName:"SetExpFog",returnValue:"void",referenceVariable:"",section:"effects",access:"Server",description:"Creates an exponential fog.",example:"SetExpFog(.0001144, 131/255, 116/255, 71/255, 0)",variables:[{name:"startDist",mandatory:!0,description:"The distance, in world units, at which the fog begins."},{name:"halfwayDist",mandatory:!0,description:"The distance, beyond the startDist, at which the scene will be 50% fogged."},{name:"red",mandatory:!0,description:"The red component of the fog as a value between 0.0 and 1.0"},{name:"green",mandatory:!0,description:"The red component of the fog as a value between 0.0 and 1.0"},{name:"blue",mandatory:!0,description:"The red component of the fog as a value between 0.0 and 1.0"},{name:"transition time",mandatory:!0,description:"transition time in seconds"}]},{_id:1082,functionName:"SetFakeFire",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Simulates gun fire. Sound and radar blip.",example:"entity SetFakeFire( <enabled> )",variables:[]},{_id:1083,functionName:"SetFlagAsAway",returnValue:"void",referenceVariable:"<flag>",section:"level",access:"Client",description:"Sets a flag as away/home.",example:"flag SetFlagAsAway( localClientNum, 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client number"},{name:"away",mandatory:!0,description:"A value of 1 sets the flag as away, 0 sets the flag as home"}]},{_id:1084,functionName:"SetForceNoCull",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets the force-no-cull flag. Entity will not be culled by portals",example:"helicopter SetForceNoCull()",variables:[]},{_id:1085,functionName:"SetForceNotSimple",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Set the forceNotSimple flag on the entity",example:"self SetForceNotSimple()",variables:[]},{_id:1086,functionName:"SetFOVForKillcam",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets the fov for use with this killcam entity. Setting it to zero makes it use the default fov.",example:"killCamEnt SetFOVForKillcam( 25 )",variables:[{name:"fov",mandatory:!0,description:"The fov you want to use for the killcam"}]},{_id:1087,functionName:"SetFriendlyNameDraw",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"turns on or off local client friendly name drawing",example:"SetFriendlyNameDraw( true )",variables:[{name:"onOff",mandatory:!0,description:"True if friendly name drawing is turned on"}]},{_id:1088,functionName:"SetFriendlyScramblerAmount",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Sets the amount alpha of the friendly scrambler applied",example:"player SetFriendlyScramblerAmount( 1.0 )",variables:[{name:"float",mandatory:!0,description:"Between 0.0 and 1.0"}]},{_id:1089,functionName:"SetGameEndTime",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the time the current match will end",example:"setGameEndTime( getTime() + int(timeLeft) )",variables:[{name:"time",mandatory:!0,description:"The time to set"}]},{_id:1090,functionName:"SetGametypeSetting",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the value of a gametype setting.",example:'SetGametypeSetting( "timeLimit", 0 )',variables:[{name:"setting",mandatory:!0,description:"The setting name as a string."},{name:"value",mandatory:!0,description:"The new value for the setting."}]},{_id:1091,functionName:"SetGlobalFutz",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Sets the global futz",example:"SetGlobalFutz( futz_name )",variables:[{name:"name",mandatory:!0,description:"The Futz name"}]},{_id:1092,functionName:"SetGrapplableType",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Set how an entity is grappled.",example:"platform SetGrapplableType( 1 )",variables:[]},{_id:1093,functionName:"SetGravity",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"sets the gravity in inches per second per second.",example:"SetGravity( 800 )",variables:[{name:"gravity",mandatory:!0,description:"The gravity to set"}]},{_id:1094,functionName:"SetGroupSnapshot",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Sets the group snapshot",example:"SetGroupSnapshot( level._sndActiveSnapshot )",variables:[{name:"name",mandatory:!0,description:"Name of the snapshot"}]},{_id:1095,functionName:"SetHealthSnapshot",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Sets the health snapshot",example:"SetHealthSnapshot( sn_name, sn_amount )",variables:[{name:"name",mandatory:!0,description:"The snapshot name"},{name:"amount",mandatory:!0,description:"The amount"}]},{_id:1096,functionName:"SetHideonClientWhenScriptedAnimCompleted",returnValue:"void",referenceVariable:"",section:"client",access:"Server",description:"hides the entity on the client side onces its scripted animation ends",example:"SetHideonClientWhenScriptedAnimCompleted( ent )",variables:[{name:"entity",mandatory:!0,description:"An entity"}]},{_id:1097,functionName:"SetHideWhenScriptedAnimationCompleted",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Client",description:"When playing a scene this will hide the entity when the scripted animation ends on it.",example:"entity SetHideWhenScriptedAnimationCompleted()",variables:[]},{_id:1098,functionName:"SetHighDetail",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Enabled or Disables High Detail rendering for a model",example:"thing SetHighDetail( true )",variables:[{name:"flag",mandatory:!1,description:"True or False, enabled or disabled"}]},{_id:1099,functionName:"SetHintLowPriority",returnValue:"void",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Sets this as a low priority hint which is lower priority then everything other then turrets and dropped weapons",example:"m_e_hack_trigger SetHintLowPriority( true )",variables:[{name:"bool",mandatory:!0,description:"True\\False if its on or off"}]},{_id:1100,functionName:"SetHintString",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set the hint string for the entity",example:'t_door SetHintString( "Press and Hold ^3[{+activate}]^7 to transmit unlock code" )',variables:[{name:"hint string",mandatory:!0,description:"The hint string that will be displayed to the player"},{name:"...",mandatory:!1,description:"Additional arguments may be appended to the hint string"}]},{_id:1101,functionName:"SetHintStringForPerk",returnValue:"void",referenceVariable:"",section:"string",access:"Server",description:"Shows this hint string to the player if the player has the specified perk",example:null,variables:[{name:"perk",mandatory:!0,description:"The perk that the player needs to have to see this hint string"},{name:"hint string",mandatory:!0,description:"The hint string that will be displayed to the player that has the perk"}]},{_id:1102,functionName:"SetHintStringForPlayer",returnValue:"void",referenceVariable:"",section:"string",access:"Server",description:"Sets the trigger hint string for one specific player",example:null,variables:[{name:"player",mandatory:!0,description:"The player that will see the hint string"},{name:"hint string",mandatory:!0,description:"The hint string that will be displayed to the player"},{name:"...",mandatory:!1,description:"Additional arguments may be appended to the hint string in the same way as SetHintString."}]},{_id:1103,functionName:"SetIgnoreEntForTrigger",returnValue:"void",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Ignores this entity when doing trigger sight traces. Currently only works for trigger_radius_use",example:"self SetIgnoreEntForTrigger( camera_spike_ent )",variables:[{name:"entity to ignore",mandatory:!0,description:"The entity that will be ignored during sight trace checks"}]},{_id:1104,functionName:"SetIgnorePauseWorld",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets whether a given entity will advance normally when the world is paused.",example:"ent SetIgnorePauseWorld( true )",variables:[{name:"ignore",mandatory:!0,description:"Whether or not to advance normally when the world is paused."}]},{_id:1105,functionName:"SetIncludeMeshes",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets a streamer hint entity to include mesh data",example:"self setIncludeMeshes( true )",variables:[{name:"enabled",mandatory:!0,description:""}]},{_id:1106,functionName:"SetInfluenceAt",returnValue:"bool",referenceVariable:"",section:"level",access:"Server",description:"Sets the influence value on the influence map, returns true/false if the value was set.",example:"SetInfluenceAt(influenceMapIndex, origin, influence)",variables:[{name:"influenceMapIndex",mandatory:!0,description:"Index of the influence map"},{name:"origin",mandatory:!0,description:"The location to set the influence value"},{name:"influence",mandatory:!0,description:"The influence value to set"}]},{_id:1107,functionName:"SetInfluencerTeamMask",returnValue:"void",referenceVariable:"",section:"teams",access:"Server",description:"Sets the team mask for the given influencer",example:"SetInfluencerTeamMask( influencer_id, team_mask )",variables:[{name:"influencer id",mandatory:!0,description:"The influencer id"},{name:"team mask",mandatory:!0,description:"The team mask to apply"}]},{_id:1108,functionName:"SetInfluencerTimeout",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Sets the timeout for the influencer in seconds from current time",example:"SetInfluencerTimeout( influencer_id, 2.5 )",variables:[{name:"influencer id",mandatory:!0,description:"The influencer id"},{name:"time",mandatory:!0,description:"The timeout for the influencer"}]},{_id:1109,functionName:"SetInfraredVision",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Switches using the infrared vision (infrared visionset and thermal characters)",example:"player SetInfraredVision( true )",variables:[{name:"is infrared vision",mandatory:!0,description:"Whether using infrared vision"}]},{_id:1110,functionName:"SetInfraredVisionSet",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Set the vision when using infrared",example:'entity SetInfraredVisionSet("visionName")',variables:[{name:"visionNameInfrared",mandatory:!0,description:"name of the vision set"}]},{_id:1111,functionName:"SetInitialPlayersConnected",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Set initialPlayersConnected bool in match state to true",example:"SetInitialPlayersConnected()",variables:[]},{_id:1112,functionName:"SetInTacticalHud",returnValue:"void",referenceVariable:"",section:"hud",access:"Client",description:"Sets if the player has the tactical hud open",example:null,variables:[{name:"onOff",mandatory:!0,description:"false = off, true = on"}]},{_id:1113,functionName:"SetInvisibleToAll",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set entity invisible to all players",example:"use_trigger SetInvisibleToAll()",variables:[]},{_id:1114,functionName:"SetInvisibleToPlayer",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Make the entity invisible to the player",example:"hackable._trigger SetInvisibleToPlayer( player, false )",variables:[{name:"player",mandatory:!0,description:"The player to set the entity invisible to."},{name:"setInvisible",mandatory:!1,description:"True if entity has to be invisible to player. False otherwise"}]},{_id:1115,functionName:"SetJumpHeight",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Set the global jump height of all players. Minimum value of 0, maximum value of 1023.",example:"SetJumpHeight( 100 )",variables:[{name:"height_in_inches",mandatory:!0,description:"The height to jump in inches"}]},{_id:1116,functionName:"SetLevelFadeSnapshot",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"Sets the level fade snapshot",example:"SetLevelFadeSnapshot( sn_name, sn_amount )",variables:[{name:"name",mandatory:!0,description:"The snapshot name"},{name:"amount",mandatory:!0,description:"The level fade amount"}]},{_id:1117,functionName:"SetLightColor",returnValue:"void",referenceVariable:"<light>",section:"entity",access:"Server",description:"Sets the current color of the light, as an RGB vector.",example:"self SetLightColor( (0.5, 0.75, 1.0) )",variables:[{name:"color",mandatory:!0,description:"An RGB vector with components in the range 0 to 1. The given values get rounded before they are stored. (vector3)"}]},{_id:1118,functionName:"SetLightExponent",returnValue:"void",referenceVariable:"<light>",section:"entity",access:"Server",description:"Sets the current exponent of the light.",example:"self SetLightExponent( 1 )",variables:[{name:"exponent",mandatory:!0,description:"A new value for the exponent of the light. This should be an integer in the range of 0 to 100. (integer)"}]},{_id:1119,functionName:"SetLightFovRange",returnValue:"void",referenceVariable:"<light>",section:"entity",access:"Server",description:"Sets the current fov range of the light.",example:"self SetLightFovRange( 200, 50 )",variables:[{name:"fov_outer",mandatory:!0,description:"A new value for the outer FOV of the light, in degrees. This cannot be larger than the fov when the map was compiled, or less than 1. (float)"},{name:"fov_inner",mandatory:!1,description:"A new value for the inner FOV of the light, in degrees. This cannot be larger than fov_outer, or less than 0. If not specified, the map value is used. (float)"}]},{_id:1120,functionName:"SetLightingOnly",returnValue:"void",referenceVariable:"",section:"light",access:"Server",description:"Sets a streamer hint entity to only hint lighting data",example:"self setLightingOnly( true )",variables:[{name:"enabled",mandatory:!0,description:""}]},{_id:1121,functionName:"SetLightingState",returnValue:"void",referenceVariable:"",section:"light",access:"Server",description:"Changes lighting state for the map",example:"SetLightingState( 2 )",variables:[{name:"new light state",mandatory:!0,description:"new state to change to. Lighting state defaults to 1 at start of game"}]},{_id:1122,functionName:"SetLightIntensity",returnValue:"void",referenceVariable:"<light>",section:"entity",access:"Server",description:"Sets the current intensity of the light.",example:"self SetLightIntensity( 1.5 )",variables:[{name:"intensity",mandatory:!0,description:"A new value for the intensity of the light. 1 is fullbright, but values can be larger than 1. (float)"}]},{_id:1123,functionName:"SetLightRadius",returnValue:"void",referenceVariable:"<light>",section:"entity",access:"Server",description:"Sets the current radius of the light.",example:"self SetLightRadius( 200 )",variables:[{name:"radius",mandatory:!0,description:"A new value for the radius of the light. This cannot be larger than the radius when the map was compiled. (float)"}]},{_id:1124,functionName:"SetLocalRadarEnabled",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Sets whether a client's local radar is enabled.",example:"SetLocalRadarEnabled( localClientNum, 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number to set local radar on"},{name:"enabled",mandatory:!0,description:"0 if disabled, 1 if enabled"}]},{_id:1125,functionName:"SetLocalRadarPosition",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Sets the position of a client's local radar.",example:"SetLocalRadarPosition( localClientNum, self.origin )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number to set local radar position on"},{name:"position",mandatory:!0,description:"New position of the local radar"}]},{_id:1126,functionName:"SetLoopState",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"set pitch and volume per entity/alias",example:'car SetLoopState( "peugeot_idle_low", 0.5, 1.0, 0.5, 0.2 )',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play"},{name:"attenuation",mandatory:!0,description:"The desired volume attenuation"},{name:"pitch",mandatory:!0,description:"The desired pitch"},{name:"attenuation_rate",mandatory:!1,description:"The desired attenuation rate"},{name:"pitch_rate",mandatory:!1,description:"The desired pitch rate"}]},{_id:1127,functionName:"SetMapCenter",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Set the center of the map (used by the network code to optimize position data)",example:"SetMapCenter( level.mapCenter )",variables:[{name:"mapCenter",mandatory:!0,description:"The map center"}]},{_id:1128,functionName:"SetMapLatLong",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"Sets the map's real world latitude & longitude and their corresponding map coordinates.",example:"SetMapLatLong( 1000, 500, -118.448689, 34.021566 )",variables:[{name:"mapX",mandatory:!0,description:"map X coordinate for which the longitude is given"},{name:"mapY",mandatory:!0,description:"map Y coordinate for which the longitude is given"},{name:"longitude",mandatory:!0,description:"world longitude of the given map position"},{name:"latitude",mandatory:!0,description:"world latitude of the given map position"}]},{_id:1129,functionName:"SetMatchFlag",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Flags a bit in the match state",example:'SetMatchFlag( "bomb_timer", "1" )',variables:[{name:"flag bit",mandatory:!0,description:"The flag bit to change"},{name:"value",mandatory:!0,description:"The new value of the bit"}]},{_id:1130,functionName:"SetMatchTalkFlag",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Flags a bit in the match talk state",example:'SetMatchTalkFlag( "DeadChatWithDead", "1" )',variables:[{name:"flag bit",mandatory:!0,description:"The flag bit to change"},{name:"value",mandatory:!0,description:"The new value of the bit"}]},{_id:1131,functionName:"SetMaterialOverride",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Set the material override",example:'self SetMaterialOverride("water")',variables:[{name:"surfaceName",mandatory:!0,description:"The new material"}]},{_id:1132,functionName:"SetmaxHealth",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets the max health of this entity",example:"self SetMaxHealth( required_amount )",variables:[{name:"health",mandatory:!0,description:"The new max health"}]},{_id:1133,functionName:"SetMiniMap",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the minimap bounds and material",example:"setMiniMap(material, northwest[0], northwest[1], southeast[0], southeast[1])",variables:[{name:"material",mandatory:!0,description:"Sets the material"},{name:"upperLeftX",mandatory:!0,description:"Upper left X value"},{name:"upperLeftY",mandatory:!0,description:"Upper left Y value"},{name:"lowerRightX",mandatory:!0,description:"Lower right X value"},{name:"lowerRightY",mandatory:!0,description:"Lower right Y value"}]},{_id:1134,functionName:"SetMissileBrake",returnValue:"void",referenceVariable:"<missile>",section:"missile",access:"Server",description:"Tells a remote missile to disable brake",example:"missile DisableMissileBrake( true )",variables:[{name:"flag",mandatory:!0,description:"True to enable or disable missile brake."}]},{_id:1135,functionName:"SetMissileCoasting",returnValue:"void",referenceVariable:"<missile>",section:"missile",access:"Server",description:"Tells a remote missile to start coasting at a reduced speed.",example:"missile SetMissleCoasting( true )",variables:[{name:"flag",mandatory:!0,description:"True to start coasting at reduced speed."}]},{_id:1136,functionName:"SetMissileOwner",returnValue:"void",referenceVariable:"<missile>",section:"missile",access:"Server",description:"Sets the missile entity owner.",example:"grenade SetMissileOwner( player )",variables:[{name:"player",mandatory:!0,description:"the player"}]},{_id:1137,functionName:"SetMode",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Set the mode of a turret.",example:'turret SetMode( "auto_ai" )',variables:[{name:"mode",mandatory:!0,description:'The turret mode. Possible modes are "auto_ai", "manual", "manual_ai" and "auto_nonai'}]},{_id:1138,functionName:"SetModel",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set the model for the entity",example:'raps_meteor SetModel( "veh_t7_drone_raps" )',variables:[{name:"model alias",mandatory:!0,description:"Name of the model"}]},{_id:1139,functionName:"SetMoveSpeedScale",returnValue:"void",referenceVariable:"<entity>",section:"player",access:"Server",description:"Sets the speed scale multiplier for the entity",example:"self SetMoveSpeedScale( HOLDING_CRATE_MOVEMENT_SPEED )",variables:[{name:"speed scale multiplier",mandatory:!0,description:"The speed scale multiplier (float)"}]},{_id:1140,functionName:"SetMovingPlatformEnabled",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Enbles the moving platfrom.",example:"platform SetMovingPlatformEnabled( true )",variables:[]},{_id:1141,functionName:"SetNearestEnemyScrambler",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Set the nearest enemy scrambler",example:"player AddEnemyScrambler( scrambler )",variables:[{name:"cent",mandatory:!0,description:"scrambler centity"}]},{_id:1142,functionName:"SetNemesisXUID",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the Nemesis XUID",example:'player setNemesisXuid( player.pers["nemesis_xuid"] )',variables:[{name:"nemesisXuidString",mandatory:!0,description:"The Nemesis XUID string"}]},{_id:1143,functionName:"SetNodePriority",returnValue:"void",referenceVariable:"",section:"ai",access:"Server",description:"Enable or disable the priority for this node.",example:null,variables:[{name:"node",mandatory:!0,description:"(node) A priority allowed node."},{name:"enable",mandatory:!0,description:"(boolean) True if this node is enabled."}]},{_id:1144,functionName:"SetNormalHealth",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set health of entity. Input health is normalized.",example:"self SetNormalHealth( 0.8 )",variables:[{name:"normal health",mandatory:!0,description:"Health in normalized form. Range 0 - 1"}]},{_id:1145,functionName:"SetNoSunShadow",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets the no-sunshadow flag.",example:"helicopter SetNoSunShadow()",variables:[]},{_id:1146,functionName:"SetObjectivePointStatus",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Objective status set in the match state",example:'SetObjectivePointStatus( 1, "allies", 80 )',variables:[{name:"objective_index",mandatory:!0,description:"The objective index in the matchstate"},{name:"team",mandatory:!0,description:"The team of the objective"},{name:"percent",mandatory:!0,description:"Percentage completed"}]},{_id:1147,functionName:"SetOnTargetAngle",returnValue:"void",referenceVariable:"<turret_or_vehicle>",section:"vehicles",access:"Server",description:"Set the angle range at which the turret_on_target notify will occur.",example:"boat SetOnTargetAngle( 0, 15 )",variables:[{name:"angle",mandatory:!0,description:"In degrees (float)"},{name:"gunnerIndex",mandatory:!1,description:"Which gun, 0-3."}]},{_id:1148,functionName:"SetOwner",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets the entity owner.",example:"grenade SetOwner( player )",variables:[{name:"player",mandatory:!0,description:"the player"}]},{_id:1149,functionName:"SetPauseWorld",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"pauses playback of animations and effects, but doesn't affect the server tick the way slomo does",example:"SetPauseWorld( 1 )",variables:[{name:"pause",mandatory:!0,description:"Whether or not to pause the world"}]},{_id:1150,functionName:"SetPerkForTrigger",returnValue:"void",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Set the perk that the player must have for this trigger will react to",example:'self SetPerkForTrigger( "specialty_fastinteract" )',variables:[{name:"perk name",mandatory:!0,description:"The name of the perk that the trigger will respond to."}]},{_id:1151,functionName:"SetPlayerCollision",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Use to turn on off the collision with the player.",example:"self SetPlayerCollision( true )",variables:[{name:"on_off",mandatory:!0,description:"True for on and false for off"}]},{_id:1152,functionName:"SetPlayerCurrentObjective",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets the current objective information on the player",example:'SetPlayerCurrentObjective( "flag_a", 1 )',variables:[{name:"objective_index",mandatory:!0,description:"The objective index in the matchstate"},{name:"objective_type",mandatory:!0,description:"Type of the objective"}]},{_id:1153,functionName:"SetPlayerCurrentStreak",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets the current kill streak count on the player",example:"SetPlayerCurrentStreak( 3 )",variables:[{name:"current streak",mandatory:!0,description:"The current kill streak count"}]},{_id:1154,functionName:"SetPlayerGravity",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets the gravity override value for the player.",example:"player SetPlayerGravity( 600 )",variables:[{name:"gravity",mandatory:!0,description:"The gravity to set"}]},{_id:1155,functionName:"SetPlayerIgnoreRadiusDamage",returnValue:"void",referenceVariable:"",section:"damage",access:"Server",description:"Set the player to take or ignore radius damage",example:"SetPlayerIgnoreRadiusDamage( true )",variables:[{name:"flag",mandatory:!0,description:"true to ignore radius damage, false otherwise"}]},{_id:1156,functionName:"SetPlayerSpread",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Sets the spread of this turret when used by the player",example:"roof_turret SetPlayerSpread( 0.2 )",variables:[{name:"spread",mandatory:!0,description:"The spread of the turret in degrees"}]},{_id:1157,functionName:"SetPlayerStateLoadoutBonusCards",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set the player state to have bonus card info, for codcaster to view it",example:"self SetPlayerStateLoadoutBonusCards( class_num )",variables:[{name:"custom Class",mandatory:!0,description:"Class Num"}]},{_id:1158,functionName:"SetPlayerStateLoadoutWeapons",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set the player state to have primary and secondary weapon info, for codcaster to view it",example:"self SetPlayerStateLoadoutWeapons( class_num )",variables:[{name:"custom Class",mandatory:!0,description:"Class Num"}]},{_id:1159,functionName:"SetRenderInThirdPersonSpectate",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"render the entity when spectated in 3rd person.",example:"SetRenderInThirdPersonSpectate( true )",variables:[{name:"enable",mandatory:!0,description:"Enable or disable redering the entity in 3rd person"}]},{_id:1160,functionName:"SetReviveHintString",returnValue:"void",referenceVariable:"",section:"string",access:"Server",description:"Set the revive hint string to show to all or to a team.",example:'self.revivetrigger setReviveHintString( &"GAME_BUTTON_TO_REVIVE_PLAYER", self.team )',variables:[{name:"hint string",mandatory:!0,description:"The hint string that will be displayed to the player that has the perk"},{name:"team",mandatory:!1,description:"The team to show the hint to"}]},{_id:1161,functionName:"SetRoundsPlayed",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Set rounds played in match state",example:'SetRoundsPlayed( game["roundsplayed"] )',variables:[{name:"value",mandatory:!0,description:"The number of rounds played"}]},{_id:1162,functionName:"SetSAnim",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Client",description:"Set the anim shot to play on a static model",example:"thing SetSAnim( anim, shot, 1 )",variables:[{name:"string anim name",mandatory:!0,description:"name of a SANIM asset"},{name:"string shot name",mandatory:!1,description:"shot name of the sub animation to play, pass in <int> 0 to play the first one."},{name:"float time",mandatory:!1,description:"frame to start playing on, default is 0."}]},{_id:1163,functionName:"SetScale",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set the model scale on a script mover.",example:"entity SetScale(2.0)",variables:[{name:"scale",mandatory:!0,description:"The scale factor. (float)"}]},{_id:1164,functionName:"SetScanningPitch",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Set the pitch that the turret attempts to use while scanning for enemies.",example:"turret SetScanningPitch( -45 )",variables:[{name:"pitch",mandatory:!0,description:"of the turret (up and down) in degrees."}]},{_id:1165,functionName:"SetScoreboardColumns",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Set the scoreboard columns.",example:'SetScoreboardColumns( "score", "kills", "deaths", "kdratio", "assists" )',variables:[{name:"column1",mandatory:!0,description:"to <column5>"},{name:"...",mandatory:!1,description:"More columns if needed."}]},{_id:1166,functionName:"SetScriptMoverFlag",returnValue:"void",referenceVariable:"<non_player_entity>",section:"motion",access:"Server",description:"Sets flag 0-7 on the script mover ent.",example:"some_script_model SetScriptMoverFlag( 1 )",variables:[{name:"flag_number",mandatory:!0,description:""}]},{_id:1167,functionName:"SetScriptStreamBias",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Sets the base importance of materials being forced from script",example:"setScriptStreamBias( 1.0 )",variables:[{name:"bias",mandatory:!0,description:"Streaming bias (0 is the highest importance)"}]},{_id:1168,functionName:"SetSessStat",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets the indicated stat",example:'self SetSessStat( "byteStat", 0, 12 )',variables:[{name:"stat path",mandatory:!0,description:"The path to the stat to set the value for."}]},{_id:1169,functionName:"SetShaderConstant",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Set the value of a previously-mapped shader constant",example:'ent setshaderconstant( 0, "shaderColor" , 0, 0, 0, 0)',variables:[{name:"localClientNum",mandatory:!0,description:"Local client for which to set the shader constant"},{name:"index",mandatory:!0,description:"An 0-based index that refers to a previously-mapped shader constant(see MapShaderConstant)"},{name:"x",mandatory:!0,description:"A float value, x component of the shader constant"},{name:"y",mandatory:!0,description:"A float value, y component of the shader constant"},{name:"z",mandatory:!0,description:"A float value, z component of the shader constant"},{name:"w",mandatory:!0,description:"A float value, w component of the shader constant"}]},{_id:1170,functionName:"SetSharedViewPort",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the view mode to either shared or independent, shared combines all views into a single shared viewport, modifies the way input is handled, and places the camera into scripted camera mode (i.e. control it with script).",example:"SetSharedViewPort(true)",variables:[{name:"mode",mandatory:!0,description:"true if shared viewport, false for independent (default splitscreen behavior)"}]},{_id:1171,functionName:"SetShowcaseWeaponPaintshopXUID",returnValue:"void",referenceVariable:"",section:"weapons",access:"Client",description:"Set the showcase weapon paintshop XUID for the given local client num",example:"SetShowcaseWeaponPaintshopXUID( localClientNum, xuid )",variables:[]},{_id:1172,functionName:"SetSkipTos",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Set skip tos",example:"SetSkiptos( ToLower( skipto ) )",variables:[{name:"skipto",mandatory:!0,description:"The skipto name"}]},{_id:1173,functionName:"SetSlowMotion",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"sets the current slow motion timescale interpolation.",example:"SetSlowMotion( 1.0, 0.25, 0.5 )",variables:[{name:"startTimescale",mandatory:!0,description:"The initial timescale."},{name:"endTimescale",mandatory:!1,description:"The final timescale. Default to 1."},{name:"deltaTime",mandatory:!1,description:"The time to go from start to end timescale. Default to 1. (in seconds)"}]},{_id:1174,functionName:"SetSModelSAnimShot",returnValue:"void",referenceVariable:"",section:"animation",access:"Client",description:"Set the anim shot to play on a static model",example:'SetSModelSAnimShot("tiny_bot_blend", "", -1, true, false, true, 5*30)',variables:[{name:"target name",mandatory:!0,description:"target name of the static model or <int index> The index of the static model or <array int indices> The indices of the static models (string)"},{name:"shot name",mandatory:!1,description:"shot name of the sub animation to play, pass in <int> 0 to play the first one. (string)"},{name:"time",mandatory:!1,description:"frame to start playing on, pass in -1 to use the static model random frame, this is the default. (float)"},{name:"loop",mandatory:!1,description:"this is unused, looping is set in the asset editor. (integer)"},{name:"append",mandatory:!1,description:"If !0 the animation will be played after the current animation(s), any loop flags in current animations are ignored. If 0, it will replace the current and any appended animation with the current one.(integer)"},{name:"blend",mandatory:!1,description:"If !0 new animation will blend into the new one. default is 0 (integer)"},{name:"frames to blend",mandatory:!1,description:"If number of frames to blend over (float)"}]},{_id:1175,functionName:"SetSonarAttachmentEnabled",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Set the sonar attachment to be enabled or disabled",example:"entity SetSonarAttachmentEnabled(false)",variables:[{name:"enable",mandatory:!0,description:"true/false"}]},{_id:1176,functionName:"SetSoundContext",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Set the sound context",example:'SetSoundContext ("ringoff_plr", "outdoor"); //for weapon decay\'s',variables:[{name:"type",mandatory:!0,description:"The type of context"},{name:"value",mandatory:!0,description:"The value for that type"}]},{_id:1177,functionName:"SetSoundEntContext",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Client",description:"Sets the entity sound context",example:'car SetSoundEntContext("type", "value")',variables:[{name:"type",mandatory:!0,description:"Sound Context type"},{name:"value",mandatory:!0,description:"Sound Context value"}]},{_id:1178,functionName:"SetSoundPitch",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Set the sound pitch",example:null,variables:[{name:"playbackId",mandatory:!0,description:"The sound id"},{name:"pitch",mandatory:!0,description:"The new pitch"}]},{_id:1179,functionName:"SetSoundPitchRate",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Set the sound pitch rate",example:null,variables:[{name:"playbackId",mandatory:!0,description:"The sound id"},{name:"pitchRate",mandatory:!0,description:"The new pitch rate"}]},{_id:1180,functionName:"SetSoundVolume",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Set the sound volume",example:null,variables:[{name:"playbackId",mandatory:!0,description:"The sound id"},{name:"attenuation",mandatory:!0,description:"The attenuation of the sound"}]},{_id:1181,functionName:"SetSoundVolumeRate",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Set the sound volume rate",example:null,variables:[{name:"playbackId",mandatory:!0,description:"The sound id"},{name:"attenuationRate",mandatory:!0,description:"The new volume rate"}]},{_id:1182,functionName:"SetSpawnClientFlag",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set a flag on a client's spawn client data in the spawning system.",example:'player SetSpawnClientFlag( "SCDFL_DISABLE_LOGGING" )',variables:[{name:"flag",mandatory:!0,description:"Flag to set"}]},{_id:1183,functionName:"SetSpawnPointRandomVariation",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Random value will be added into the spawn point weighting calculation.",example:"SetSpawnPointRandomVariation( 10 )",variables:[{name:"variation",mandatory:!0,description:"random range will be [0, variation]"}]},{_id:1184,functionName:"SetSpawnPointsBaseWeight",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"If the spawn point is facing the objective position then it will have an additional score applied",example:"SetSpawnPointsBaseWeight( team_mask, point, 30, 100 )",variables:[{name:"team mask",mandatory:!0,description:"teams that this command will affect"},{name:"objective position",mandatory:!0,description:"Position of the objective that will be used in the facing calculations"},{name:"angle",mandatory:!0,description:"max angle that will be accepted"},{name:"score",mandatory:!0,description:"additional score that will be applied"}]},{_id:1185,functionName:"SetStableMissile",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set the stable missile flag of the entity",example:"self SetStableMissile( true )",variables:[{name:"flag",mandatory:!0,description:"Set to true if the stable flag should be set. False otherwise"}]},{_id:1186,functionName:"SetStance",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets the stance of the player. It only works for the player.",example:'player SetStance( "stand" );\\',variables:[{name:"stance",mandatory:!0,description:"The stance. Possible values are 'crouch', 'prone' and 'stand'"}]},{_id:1187,functionName:"SetStepTriggerSound",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Client",description:"Set the sound that is triggered by steps",example:"trigPlayer SetStepTriggerSound(self.script_label + suffix)",variables:[{name:"sound alias",mandatory:!0,description:"The sound name"}]},{_id:1188,functionName:"SetStowedWeapon",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Sets the stowed weapon for the player",example:'self SetStowedWeapon( "mp40_mp" )',variables:[{name:"weaponName",mandatory:!0,description:"The weapon name to attach (string)."}]},{_id:1189,functionName:"SetStreamerRequest",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Put a streamer hint asset into a request slot (0-7)",example:'setStreamerRequest(0, "apple_pie")',variables:[{name:"slot",mandatory:!0,description:"Request slot"},{name:"name",mandatory:!0,description:"Name of the streamer hint asset"}]},{_id:1190,functionName:"SetStunned",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Client",description:"Puts the vehicle or takes the vehicle out of stun mode. Only works for nitrous vehicles.",example:"vehicle SetStunned( 0, true )",variables:[{name:"stunned",mandatory:!0,description:"True/false stun state"}]},{_id:1191,functionName:"SetTargetEntity",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Sets the target of this turret",example:"roof_turret SetTargetEntity( target )",variables:[{name:"target",mandatory:!0,description:"the turret target"}]},{_id:1192,functionName:"SetTargetOrigin",returnValue:"void",referenceVariable:"<turret_or_vehicle>",section:"vehicles",access:"Server",description:"Sets the target origin of this turret or vehicle weapon",example:"roof_turret SetTargetOrigin( origin )",variables:[{name:"origin",mandatory:!0,description:"the turret target origin"}]},{_id:1193,functionName:"SetTeam",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets the entity team.",example:"panzer SetTeam( team )",variables:[{name:"team",mandatory:!0,description:"the team name"}]},{_id:1194,functionName:"SetTeamForTrigger",returnValue:"void",referenceVariable:"<trigger>",section:"client",access:"Server",description:"Set the team that this trigger will react to",example:'self SetTeamForTrigger( game["attackers"] )',variables:[{name:"team name",mandatory:!0,description:"The name of the team that the trigger will respond to. Must be either 'axis', 'allies', 'team3' or 'none'"}]},{_id:1195,functionName:"SetTeamReviveIcon",returnValue:"void",referenceVariable:"",section:"teams",access:"Client",description:"Set the revive icon used by particular teams",example:'SetTeamReviveIcon( "allies", "waypoint_revive_cdc_zm" )',variables:[{name:"team",mandatory:!0,description:""},{name:"material",mandatory:!0,description:"The icon to use"}]},{_id:1196,functionName:"SetTeamSatellite",returnValue:"void",referenceVariable:"",section:"teams",access:"Server",description:"Sets whether a team has Spyplane or not",example:'SetTeamSatellite( "allies", true )',variables:[{name:"team",mandatory:!0,description:"The name of a team. Must be either Must be 'axis', 'allies', 'team3' or 'none'."},{name:"availability",mandatory:!0,description:"Whether the team has Satellite; defaults to false"}]},{_id:1197,functionName:"SetTeamScore",returnValue:"void",referenceVariable:"",section:"teams",access:"Server",description:"Set a team's score",example:'SetTeamScore( "allies", 100 )',variables:[{name:"team",mandatory:!0,description:"The name of a team. Must be either 'axis' or 'allies' or 'team3'."},{name:"score",mandatory:!0,description:"The new team score"}]},{_id:1198,functionName:"SetTeamSpyplane",returnValue:"void",referenceVariable:"",section:"teams",access:"Server",description:"Sets whether a team has Spyplane or not",example:'SetTeamSpyplane( "allies", true )',variables:[{name:"team",mandatory:!0,description:"The name of a team. Must be either Must be 'axis', 'allies', 'team3' or 'none'."},{name:"availability",mandatory:!0,description:"Whether the team has Spyplane; defaults to false"}]},{_id:1199,functionName:"SetThirdPerson",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Sets the camera mode to third person if true",example:"SetThirdPerson( true )",variables:[{name:"onOff",mandatory:!0,description:"set third person mode to this value"}]},{_id:1200,functionName:"SetTmodeProvider",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Enables (or disables) the actor to provide tmode traces to the player.",example:"entity SetTmodeProvider( 1 )",variables:[{name:"value",mandatory:!0,description:"(int) 1-enable 0-disable"}]},{_id:1201,functionName:"SetTopDownCameraYaw",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Set the top down camera yaw that is used in DOA to get the player controls to work correctly in bgpmove.",example:"SetTopDownCameraYaw( 180 )",variables:[{name:"yaw_angle",mandatory:!0,description:"The yaw angle to set"}]},{_id:1202,functionName:"SetTopScorer",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the top scorer for the end game screen.",example:"SetTopScorer( 0, player, weapon, renderoptions, acvi)",variables:[{name:"index",mandatory:!0,description:"position [0..2] of the player"},{name:"player",mandatory:!0,description:"player who is the top scorer"},{name:"taunt",mandatory:!0,description:"players selected taunt index"},{name:"gesture0",mandatory:!0,description:"players selected gesture type 0 index"},{name:"gesture1",mandatory:!0,description:"players selected gesture type 1 index"},{name:"gesture2",mandatory:!0,description:"players selected gesture type 2 index"},{name:"weapon",mandatory:!0,description:"players weapon"},{name:"weapon render options",mandatory:!1,description:"players weapon renderoptions"},{name:"acvi",mandatory:!1,description:"players attachment cosmetic variant indexes"}]},{_id:1203,functionName:"SetTurretAccuracy",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Currently does nothing.",example:"roof_turret SetTargetAccuracy()",variables:[]},{_id:1204,functionName:"SetTurretCarried",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Sets whether a turret is being carried.",example:"turret SetTurretCarried( true )",variables:[{name:"flag",mandatory:!0,description:"True if the turret is being carried"}]},{_id:1205,functionName:"SetTurretMinimapVisible",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Sets whether a turret is visible on the minimap.",example:"sentry SetTurretMinimapVisible( true )",variables:[{name:"flag",mandatory:!0,description:"True if the turret is visible on the minimap"}]},{_id:1206,functionName:"SetTurretNode",returnValue:"void",referenceVariable:"",section:"ai",access:"Server",description:"Set this turretnode to use this turret.",example:"SetTurretNode( node, turret )",variables:[{name:"node",mandatory:!0,description:"The turret node to connect to the turret"},{name:"turret",mandatory:!0,description:"The turret to connect to the node"}]},{_id:1207,functionName:"SetTurretOwner",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Sets the turret entity owner.",example:"turret SetTurretOwner( player )",variables:[{name:"player",mandatory:!0,description:"the player"}]},{_id:1208,functionName:"SetTurretSpinning",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Set the minigun spin for the turret on this entity. Works for vehicles also.",example:"roof_turret SetTurretSpinning( true )",variables:[{name:"onoff",mandatory:!0,description:"Turn it on or off (boolean)"}]},{_id:1209,functionName:"SetTurretType",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Sets the turret Type, Sentry or TOW.",example:'turret SetTurretType( "sentry" )',variables:[{name:"string",mandatory:!0,description:'must be either "sentry" or "tow"'}]},{_id:1210,functionName:"SetUnderwaterVisionSet",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Set the vision when underwater",example:'entity SetUnderwaterVisionSet("visionName")',variables:[{name:"visionNameUnderwater",mandatory:!0,description:"name of the vision set"}]},{_id:1211,functionName:"SetupClientFieldAnimSpeedCallbacks",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Registers a code callback for each of the given clientfield names in a field pool.",example:'SetupClientFieldAnimSpeedCallbacks( "world", 1, "flag_a_owner" )',variables:[]},{_id:1212,functionName:"SetupClientFieldCodeCallbacks",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:"Registers a LUI code callback for each of the given clientfield names in a field pool.",example:'SetupClientFieldLuiCodeCallbacks( "world", 1, "flag_a_owner" )',variables:[]},{_id:1213,functionName:"SetupClientFieldLuiCodeCallbacks",returnValue:"void",referenceVariable:"",section:"lui",access:"Client",description:"Registers a LUI code callback for each of the given clientfield names in a field pool.",example:'SetupClientFieldLuiCodeCallbacks( "world", 1, "flag_a_owner" )',variables:[]},{_id:1214,functionName:"SetupFieldOpsKitLoadouts",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets up all the field ops custom classes (using slots 6 through 9)",example:"SetupFieldOpsKitLoadouts( mapname )",variables:[{name:"mapname",mandatory:!0,description:"The map to load the field ops kits for"}]},{_id:1215,functionName:"SetViewAngleResistance",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets the zones in the player's view cone in which resistance will be applied in the direction of the view limit",example:"level.player SetViewAngleResistance( 40, 40, 20, 0, 0 )",variables:[{name:"right arc",mandatory:!0,description:"Angle to resist against the right plane of the view cone."},{name:"left arc",mandatory:!0,description:"Angle to resist against the left plane of the view cone."},{name:"top arc",mandatory:!0,description:"Angle to resist against the top plane of the view cone."},{name:"bottom arc",mandatory:!0,description:"Angle to resist against the bottom plane of the view cone."},{name:"snap to",mandatory:!1,description:"false when the resistance will be blended to over time. True by default."}]},{_id:1216,functionName:"SetViewModelDepthOfField",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set the view model depth of field of the player",example:"self SetViewModelDepthOfField(0,1000)",variables:[{name:"start",mandatory:!0,description:"Start DOF ( >= 0 )"},{name:"end",mandatory:!0,description:"End DOF ( >= 0 )"}]},{_id:1217,functionName:"SetVisibleToAll",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Make the entity visible to all players",example:"trigger SetVisibleToAll()",variables:[]},{_id:1218,functionName:"SetVisibleToAllExceptTeam",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set self visible to all teams except the selected teams",example:"plane SetVisibleToAllExceptTeam( self.team )",variables:[{name:"team",mandatory:!0,description:"Which to teams not to show this entity too"}]},{_id:1219,functionName:"SetVisibleToPlayer",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Make the entity visible to the player",example:"trigger SetVisibleToPlayer( self )",variables:[{name:"player",mandatory:!0,description:"The player to set the entity visible to."}]},{_id:1220,functionName:"SetVisibleToTeam",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Set self visible only to selected team",example:"plane SetVisibleToSquad( self.team )",variables:[{name:"team",mandatory:!0,description:"Which to show this entity to"}]},{_id:1221,functionName:"SetVisionSetForPlayer",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Specify the server override visionset and the transition time into it.",example:'player SetVisionSetForPlayer( "mortar_thermal", 1.5 )',variables:[{name:"visionset name",mandatory:!0,description:"Vision set to transition into (string)"},{name:"transition time",mandatory:!1,description:"How long, in seconds, to take transitioning to the new vision set if a transition is possible. Default is one second. (float)"}]},{_id:1222,functionName:"SetVolFog",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Creates an exponential fog.",example:"SetVolFog(0.0001144, 0.01, 131/255, 116/255, 71/255, 0)",variables:[{name:"startDist",mandatory:!0,description:"The distance, in world units, at which the fog begins."},{name:"halfwayDist",mandatory:!0,description:"The distance at which the scene will be 50% fogged."},{name:"halfwayHeight",mandatory:!0,description:"The height at which the scene will be 50% fogged."},{name:"baseHeight",mandatory:!0,description:"The ground-level Z position at which the fog will start from."},{name:"red",mandatory:!0,description:"The red component of the fog as a value between 0.0 and 1.0"},{name:"green",mandatory:!0,description:"The green component of the fog as a value between 0.0 and 1.0"},{name:"blue",mandatory:!0,description:"The blue component of the fog as a value between 0.0 and 1.0"},{name:"transition time",mandatory:!0,description:"transition time in seconds"},{name:"startDist",mandatory:!0,description:"The distance, in world units, at which the fog begins."},{name:"halfwayDist",mandatory:!0,description:"The distance at which the scene will be 50% fogged."},{name:"halfwayHeight",mandatory:!0,description:"The height at which the scene will be 50% fogged."},{name:"baseHeight",mandatory:!0,description:"The ground-level Z position at which the fog will start from."},{name:"red",mandatory:!0,description:"The red component of the fog as a value between 0.0 and 1.0"},{name:"green",mandatory:!0,description:"The green component of the fog as a value between 0.0 and 1.0"},{name:"blue",mandatory:!0,description:"The blue component of the fog as a value between 0.0 and 1.0"},{name:"fogColorScale",mandatory:!0,description:"The scaler for the colors as a value between 1 and 10000.0"},{name:"sunFogRed",mandatory:!0,description:"The red component of the fog as a value between 0.0 and 1.0"},{name:"sunFogGreen",mandatory:!0,description:"The green component of the fog as a value between 0.0 and 1.0"},{name:"sunFogBlue",mandatory:!0,description:"The blue component of the fog as a value between 0.0 and 1.0"},{name:"sunFogDirX",mandatory:!0,description:"The X component of the fog direction as a value between -1.0 and 1.0"},{name:"sunFogDirY",mandatory:!0,description:"The Y component of the fog direction as a value between -1.0 and 1.0"},{name:"sunFogDirZ",mandatory:!0,description:"The Z component of the fog direction as a value between -1.0 and 1.0"},{name:"sunFogStartAng",mandatory:!0,description:"The starting angle of the sun fog as a value between 0 and 180"},{name:"sunFogEndAng",mandatory:!0,description:"The ending angle of the sun fog as a value between 0 and 180"},{name:"fog max opacity",mandatory:!0,description:"The maximum opacity of the fog as a value between 0 and 1"},{name:"transition time",mandatory:!0,description:"transition time in seconds"}]},{_id:1223,functionName:"SetVoteNoCount",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the number of No votes",example:null,variables:[{name:"no count",mandatory:!0,description:"Number of 'no' votes"}]},{_id:1224,functionName:"SetVoteString",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the string for a vote",example:null,variables:[{name:"string",mandatory:!0,description:"The vote string"}]},{_id:1225,functionName:"SetVoteTime",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the start time for a vote",example:null,variables:[{name:"time",mandatory:!0,description:"The vote time in ms"}]},{_id:1226,functionName:"SetVoteYesCount",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the number of Yes votes",example:null,variables:[{name:"no count",mandatory:!0,description:"Number of 'yes' votes"}]},{_id:1227,functionName:"SetWaterDisturbanceParams",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Sets parameters describing the water disturbance created by the (script mover) entity",example:"self SetWaterDisturbanceParams( 0.5, 500, 1500, 0.2, 70 )",variables:[{name:"force",mandatory:!0,description:"The force of the disturbance influences the height and size of the wave"},{name:"length",mandatory:!0,description:"How long the wave is in the direction of travel"},{name:"width",mandatory:!0,description:"How wide the wave is (across direction of travel)"},{name:"damping",mandatory:!0,description:"How much the wave damps the water after it travels; larger values (>1) will cause the wave to leave very little wake, smaller values will leave lots of disturbance behind the wave. Keep > 0."},{name:"angle",mandatory:!0,description:"The angle of the surge line in degrees; 0 -> +X"}]},{_id:1228,functionName:"SetWaterDrops",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets water drops equal to the count",example:"self SetWaterDrops( 3 )",variables:[{name:"count",mandatory:!0,description:"Number of water drops (should be >= 0)"}]},{_id:1229,functionName:"SetWaveWaterEnabled",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"Makes a water completely appear or disappear",example:'SetWaveWaterEnabled( "huge_lake", true )',variables:[{name:"water name",mandatory:!0,description:"The name of the water affected, or empty string for all"},{name:"enable",mandatory:!0,description:"whether water should be visible"}]},{_id:1230,functionName:"SetWaveWaterGeneratorAmplitude",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the wave water amplitude of the generator.",example:'SetWaveWaterGeneratorAmplitude( "exampleGenerator", 1.1 )',variables:[{name:"generator name",mandatory:!0,description:"The generator name"},{name:"amplitude",mandatory:!0,description:"The amplitude for the generator"}]},{_id:1231,functionName:"SetWaveWaterHeight",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"Sets the height of one or all waters in a level",example:'SetWaveWaterHeight( "huge_lake", 15.0 )',variables:[{name:"water name",mandatory:!0,description:"The name of the water affected, or empty string for all"},{name:"height",mandatory:!0,description:"The new height value in world coordinates"}]},{_id:1232,functionName:"SetWeapon",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Sets the weapon of the entity. The entity should not be a player",example:"killcamEnt SetWeapon( self.weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to set"}]},{_id:1233,functionName:"SetWeaponCosts",returnValue:"void",referenceVariable:"",section:"weapons",access:"Client",description:"Sets the cost of a weapon for use by prompts",example:"SetWeaponCosts( weapon, weapon.cost, weapon.ammoCost, weapon.secretshopperCost )",variables:[{name:"local client num",mandatory:!0,description:"The local client num[MANDATORY]"},{name:"weaponCost",mandatory:!0,description:"Cost to buy the weapon"},{name:"ammoCost",mandatory:!0,description:"Cost to buy ammo[MANDATORY]"}]},{_id:1234,functionName:"SetWeaponOptions",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Sets the previously calculated weapon options of the entity. The entity should not be a player",example:"killcamEnt SetWeaponOptions( weapon_options )",variables:[{name:"weaponOptions",mandatory:!0,description:"The weapon options to set"}]},{_id:1235,functionName:"SetWeaponRenderOptions",returnValue:"void",referenceVariable:"<entity>",section:"weapons",access:"Server",description:"Sets the weapon render options in the entity.",example:"level.weapon_clientscript_model SetWeaponRenderOptions( level.camo_index, level.reticle_index, level.show_player_tag, level.show_emblem, level.show_paintshop )",variables:[{name:"camo index",mandatory:!0,description:""},{name:"reticle index",mandatory:!0,description:""},{name:"show player tag",mandatory:!0,description:""},{name:"show emblem",mandatory:!0,description:""},{name:"show paintshop",mandatory:!0,description:""}]},{_id:1236,functionName:"SetWinningPlayer",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets a player to be the winner",example:null,variables:[{name:"player",mandatory:!0,description:"The player to set as the winning player"}]},{_id:1237,functionName:"SetWinningTeam",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets a team to be the winner",example:null,variables:[{name:"team",mandatory:!0,description:"The team name of the winning team. Must be 'axis', 'allies' or 'none'"}]},{_id:1238,functionName:"SetWorldFogActiveBank",returnValue:"void",referenceVariable:"<client>",section:"client",access:"Server",description:"Sets world fog volumes active bank mask.",example:"self setworldfogactivebank(1)",variables:[{name:"bankMask",mandatory:!0,description:"Active bank"}]},{_id:1239,functionName:"SetZBarrierColModel",returnValue:"void",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Sets the collision model for a zbarrier.",example:'ent SetZBarrierColModel("p6_anim_zm_barricade_board_collision")',variables:[{name:"model",mandatory:!0,description:"The model."}]},{_id:1240,functionName:"SetZBarrierPieceState",returnValue:"void",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Set's the state of the piece indexed in the zbarrier ent. States are open, opening, closed and closing.",example:'ent SetZBarrierPieceState(1, "open", 0.8)',variables:[{name:"piece number",mandatory:!0,description:"The piece index."},{name:"state",mandatory:!0,description:"State to set - valid states are open, opening, closed and closing."},{name:"animation scalar",mandatory:!1,description:"Valid range 0.1 - 2.0, changes the playback speed of the animation in the set state - numbers less than 1.0 are faster."}]},{_id:1241,functionName:"SetZombieName",returnValue:"void",referenceVariable:"<actor>",section:"zombie",access:"Server",description:"Set this actors name",example:'guy SetZombieName( "zombie11" )',variables:[]},{_id:1242,functionName:"ShellShock",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Start a shell shock sequence for the entity for given duration.",example:'self shellShock( "frag_grenade_mp", 0.2 )',variables:[{name:"shellshockname",mandatory:!0,description:""},{name:"duration",mandatory:!0,description:"duration in seconds. The duration must be between 0 and 60 seconds."},{name:"allowReduceShellShockPerk",mandatory:!1,description:"true if shell shock perk should be reduced"}]},{_id:1243,functionName:"ShootTurret",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Shoots a turret",example:"roof_turret ShootTurret()",variables:[]},{_id:1244,functionName:"ShootUp",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Gives an entity vertical movement",example:"betty ShootUp( 350 )",variables:[{name:"float",mandatory:!0,description:"upwards velocity"}]},{_id:1245,functionName:"ShouldDoInitialWeaponRaise",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set weaponstate to force or prevent first raise animation the next time the player switches to it. Only works if the player currently has it",example:'old_state = self ShouldDoInitialWeaponRaise( "ak47", false )',variables:[{name:"weapon",mandatory:!0,description:"The weapon to set the first raise anim state for[MANDATORY]"}]},{_id:1246,functionName:"Show",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Show the entity",example:"self Show()",variables:[]},{_id:1247,functionName:"ShowAllParts",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Show all parts of an entity.",example:"self ShowAllParts()",variables:[]},{_id:1248,functionName:"ShowInDemo",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Used to show the entity in demo",example:"self ShowInDemo()",variables:[]},{_id:1249,functionName:"ShowInfoVolume",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Enables an info volume to be drawn with the specified color",example:"InfoVolumeDebug_ShowVolume( info_volume GetEntityNumber(), ( 0.2, 0.2, 0.5 ), 0.5 )",variables:[{name:"entnum",mandatory:!0,description:"The entity number of the info volume[OPTIONAL]"},{name:"alpha",mandatory:!1,description:"The alpha that the info volume will be drawn with"}]},{_id:1250,functionName:"ShowMiscModels",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Show all misc models with this targetname",example:'ShowMiscModels( "crash_destruct" )',variables:[{name:"targetname",mandatory:!0,description:"targetname of misc model(s)."}]},{_id:1251,functionName:"ShowPart",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Show part of an entity.",example:'self ShowPart( "tag_weapon", "weapon_saw" )',variables:[{name:"tagname",mandatory:!0,description:"The tag to show. All surfaces with a vertex weighted to the tag will be shown. (string)"},{name:"modelname",mandatory:!1,description:"The optional model name to help specify the part location. (string)"},{name:"bApplyToChildren",mandatory:!1,description:"Optional flag to specify if we should apply the operation to children bones as well. (boolean)"}]},{_id:1252,functionName:"ShowToPlayer",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Show the entity to a given client",example:null,variables:[{name:"player",mandatory:!0,description:"The player to show the entity to."}]},{_id:1253,functionName:"ShowToTeam",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Show the entity to a particular team",example:"self ShowToTeam( team )",variables:[{name:"team",mandatory:!0,description:"The team to show the entity to."}]},{_id:1254,functionName:"ShowZBarrierPiece",returnValue:"void",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Allows the indexed piece to be drawn.",example:"ent ShowZBarrierPiece(1)",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:1255,functionName:"SiegeCmd",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Client",description:"Apply a number of anim commands on a siege model",example:'thing SiegeCmd( "set_shot", "myshot", "unpause',variables:[{name:"string cmd",mandatory:!0,description:"cmd to execute."},{name:"string cmd",mandatory:!1,description:"more cmd's..."}]},{_id:1256,functionName:"SightConeTrace",returnValue:"void",referenceVariable:"<entity>",section:"trace",access:"Server",description:"Determines how much the entity can be seen from the given position, using the same check that is used by grenades. Performs multiple sight traces and returns an approximation to how much of the entity is visible from the given point (between 0 and 1). In SinglePlayer this will always be 1 if the entity is partially visible.",example:"tankVisibilityFraction = tank SightConeTrace( player.origin, player, player.angles, 65)",variables:[{name:"sight position",mandatory:!0,description:"The point the sight starts at"},{name:"ignore entity",mandatory:!1,description:"An entity to ignore when doing the traces"},{name:"cone forward",mandatory:!1,description:"The forward direction of the cone, whose base is at the <sight position>. Must be normalized."},{name:"cone angle",mandatory:!1,description:"Angle in degrees from the line of sight to the edge of the cone. Defaults to 65."}]},{_id:1257,functionName:"SightTracePassed",returnValue:"bool",referenceVariable:"",section:"trace",access:"Server",description:"Does a sight trace from start to end. Returns true if doesnt hit anything",example:"passed = SightTracePassed( player.origin + ( 0, 0, 64 ), self.origin + ( 0, 0, 64 ), false, undefined )",variables:[{name:"start",mandatory:!0,description:"The bullet start point"},{name:"end",mandatory:!0,description:"The bullet end point"},{name:"hit characters",mandatory:!0,description:"An entity to ignore"},{name:"ignore entity",mandatory:!0,description:"An entity to ignore"}]},{_id:1258,functionName:"SModelAnimCmd",returnValue:"void",referenceVariable:"",section:"animation",access:"Client",description:"Apply a number of anim commands on a siege model",example:'SModelAnimCmd("targetName","pause")',variables:[{name:"target",mandatory:!0,description:"target name of the static model or <int index> The index of the static model or <array int indices> The indices of the static models (string)"},{name:"cmd",mandatory:!0,description:"cmd to execute. (string)"},{name:"cmd",mandatory:!1,description:"more cmd's... (string)"}]},{_id:1259,functionName:"SnapshotAcknowledged",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns 1 if all clients have acknowledged the snapshot or the timeout has expired. Otherwise returns undefined.",example:"acked = GetSnapshotIndexArray( snapindices )",variables:[{name:"array",mandatory:!0,description:"The array returned by GetSnapshotIndexArray."}]},{_id:1260,functionName:"Solid",returnValue:"void",referenceVariable:"<ent>",section:"motion",access:"Server",description:"Set the solid flag, so that this object is collidable.",example:"self Solid()",variables:[]},{_id:1261,functionName:"SoundExists",returnValue:"bool",referenceVariable:"",section:"sound",access:"Server",description:"Returns true if the given sound exists",example:"if( SoundExists( soundAlias )) { //do something }",variables:[{name:"soundName",mandatory:!0,description:"The sound alias"}]},{_id:1262,functionName:"SoundGetAlias",returnValue:"string",referenceVariable:"",section:"sound",access:"Server",description:"The the string alias of a sound from the hashed sound id. Will return undefined if no sound is found",example:"soundAlias = SoundGetAlias( soundId )",variables:[{name:"soundId",mandatory:!0,description:"the hashed sound id of the alias"}]},{_id:1263,functionName:"SoundGetPlaybackTime",returnValue:"int",referenceVariable:"",section:"sound",access:"Server",description:"Get the playback time for the sound",example:'playbackTime = SoundGetPlaybackTime( "evt_infection_record_oneshot" )',variables:[{name:"soundName",mandatory:!0,description:"The sound alias"}]},{_id:1264,functionName:"SoundLineEmitter",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Play a sound from start point to end point",example:'SoundLineEmitter( "wpn_micro_turret_loop", start, end )',variables:[{name:"alias",mandatory:!0,description:"The sound alias name"},{name:"origin 1",mandatory:!0,description:"start point"},{name:"origin 2",mandatory:!0,description:"end point"}]},{_id:1265,functionName:"SoundLoopEmitter",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Play a sound loop at the position",example:'SoundLoopEmitter("evt_beacon_loop_red", self.origin)',variables:[{name:"alias",mandatory:!0,description:"The sound alias name"},{name:"position",mandatory:!0,description:"The position to play sound at"}]},{_id:1266,functionName:"SoundPlayAutoFX",returnValue:"void",referenceVariable:"",section:"effect",access:"Client",description:"This function is used to play audio on createfx ents.",example:'SoundPlayAutoFX( "fx_fire_barrel", "amb_fire_small", 5, -10, 5, false, 20, 5, "amb_fire_large" )',variables:[{name:"fxid",mandatory:!0,description:"The ID of the FX you want to play alias off."},{name:"alias",mandatory:!0,description:"Audio alias."},{name:"offsetx",mandatory:!1,description:"Offset x from effect origin to play the sound."},{name:"offsety",mandatory:!1,description:"Offset y from effect origin to play the sound."},{name:"offset",mandatory:!1,description:"Offset z from effect origin to play the sound."},{name:"onground",mandatory:!1,description:"Do a trace to ground to ensure audio is played above ground."},{name:"area",mandatory:!1,description:"If #threshold multiple effects of same id in target radius #area, play alias_override at center of fx instead."},{name:"threshold",mandatory:!1,description:"If #threshold multiple effects of same id in target radius #area, play alias_override at center of fx instead."},{name:"alias_override",mandatory:!1,description:"If #threshold multiple effects of same id in target radius #area, play alias_override at center of fx instead."}]},{_id:1267,functionName:"SoundPlaying",returnValue:"bool",referenceVariable:"",section:"sound",access:"Client",description:"Returns true if the sound given by sound id is playing",example:"while( soundplaying( soundId ) )",variables:[{name:"playbackId",mandatory:!0,description:"The sound id"}]},{_id:1268,functionName:"SoundRattle",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Set the rattle sound's origin, min distance and max distance",example:"soundrattle(origin,min,max)",variables:[{name:"origin",mandatory:!0,description:"The position"},{name:"minDist",mandatory:!0,description:"The min distance to play sound"},{name:"maxDist",mandatory:!1,description:"The max distance to play sound"}]},{_id:1269,functionName:"SoundRattleSetup",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Play a rattle sound at the position",example:"SoundRattleSetup(rattles[i].script_sound, rattles[i].origin)",variables:[{name:"alias",mandatory:!0,description:"The sound alias name"},{name:"position",mandatory:!0,description:"The position to play sound at"}]},{_id:1270,functionName:"SoundSetMusicState",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Set the music state for the sound",example:"SoundSetMusicState( state_id )",variables:[{name:"state id",mandatory:!0,description:"The state identifier"}]},{_id:1271,functionName:"SoundStopLineEmitter",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Stops the sound playing from start point to end point",example:'SoundStopLineEmitter( "wpn_micro_turret_loop", start, end )',variables:[{name:"alias",mandatory:!0,description:"The sound alias name"},{name:"origin 1",mandatory:!0,description:"start point"},{name:"origin 2",mandatory:!0,description:"end point"}]},{_id:1272,functionName:"SoundStopLoopEmitter",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Stop the sound loop emitter at the position",example:'SoundStopLoopEmitter("evt_beacon_loop_green", self.origin)',variables:[{name:"alias",mandatory:!0,description:"The sound alias name"},{name:"position",mandatory:!0,description:"The position"}]},{_id:1273,functionName:"SoundTimeScale",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Set the sound time scale",example:"SoundTimeScale( 1.1 )",variables:[{name:"time",mandatory:!0,description:"The new time scale"}]},{_id:1274,functionName:"SoundUpdateLineEmitter",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Updates the sound playing from previous start point to previous end point",example:'SoundUpdateLineEmitter( "wpn_micro_turret_loop", previousStart, previousEnd, start, end )',variables:[{name:"alias",mandatory:!0,description:"The sound alias name"},{name:"previous origin 1",mandatory:!0,description:"start point"},{name:"previous origin 2",mandatory:!0,description:"end point"},{name:"origin 1",mandatory:!0,description:"start point"},{name:"origin 2",mandatory:!0,description:"end point"}]},{_id:1275,functionName:"Spawn",returnValue:"entity",referenceVariable:"",section:"spawn",access:"Server",description:"Spawn an entity.",example:'Spawn( "trigger_radius", trigger_origin )',variables:[{name:"classname",mandatory:!0,description:"The classname of the entity to spawn"},{name:"origin",mandatory:!0,description:"The position to spawn at"},{name:"spawnflags",mandatory:!1,description:"Optional spawn flags (up to 5)"}]},{_id:1276,functionName:"SpawnActor",returnValue:"entity",referenceVariable:"",section:"spawn",access:"Server",description:"Spawns an actor from an actor spawner, if possible (the spawner won't spawn if the player is looking at the spawn point, or if spawning would cause a telefrag)",example:'spawned = SpawnActor( "spawner_bo3_soldier_ally_sniper_tool", origin, angles, "george", false )',variables:[{name:"AIType",mandatory:!0,description:"AI type (constant string)"},{name:"origin",mandatory:!0,description:"The position of the vehicle (vector)"},{name:"angles",mandatory:!0,description:"The angle to spawn the vehicle at (vector)"},{name:"targetname",mandatory:!1,description:"sets the targetname of the spawned entity"},{name:"forcespawn",mandatory:!1,description:"forces a guy to spawn even if the spawn may be visible to the player"},{name:"fullyaware",mandatory:!1,description:"gives the AI full awareness of all enemies"},{name:"spawnerEnt",mandatory:!1,description:"if passed in, then the fields of the spawnerEnt will be duplicated to the newly spawned actor"}]},{_id:1277,functionName:"SpawnCollision",returnValue:"entity",referenceVariable:"",section:"spawn",access:"Server",description:"Spawns a script mover thats used only for collision",example:null,variables:[{name:"modelname",mandatory:!0,description:"The name of the model to spawn (constant string)"},{name:"targetname",mandatory:!0,description:"target name (constant string)"},{name:"origin",mandatory:!0,description:"The position of the collision (vector)"},{name:"angles",mandatory:!0,description:"The angle to spawn the collision at (vector)"}]},{_id:1278,functionName:"SpawnDynEnt",returnValue:"dynentity",referenceVariable:"",section:"spawn",access:"Client",description:"Spawn a dynent",example:'twig = spawndynent( "trashcan", origin, angles )',variables:[{name:"model",mandatory:!0,description:"The model of the dynent"},{name:"origin",mandatory:!0,description:"The position"},{name:"angles",mandatory:!0,description:"The angles"}]},{_id:1279,functionName:"SpawnFromSpawner",returnValue:"entity",referenceVariable:"",section:"spawn",access:"Server",description:"Spawns an actor or vehicle from a spawner, if possible (the spawner won't spawn if the player is looking at the spawn point, or if spawning would cause a telefrag) Unsupplied optional fields will use flag values from the entity",example:'spawned = spawnerent SpawnFromSpawner( "george", false )',variables:[{name:"targetname",mandatory:!1,description:"sets the targetname of the spawned entity"},{name:"forcespawn",mandatory:!1,description:"forces a guy to spawn even if the spawn may be visible to the player"},{name:"makeroom",mandatory:!1,description:"will remove an undeletable entity if necessary to spawn a new one"},{name:"infinitespawn",mandatory:!1,description:"don't increment the spawn count"},{name:"classnameOverride",mandatory:!1,description:"override the spawner's classname"}]},{_id:1280,functionName:"SpawnFX",returnValue:"entity",referenceVariable:"",section:"effects",access:"Server",description:"Spawn an FX",example:"fx = SpawnFx( level._effect[player.light_playFX], monkey.origin + (0,0,-12),(1,0,0),(0,0,1) )",variables:[{name:"fx name",mandatory:!0,description:"Name of the fx. Fx has to be cached"},{name:"position",mandatory:!0,description:"Position to play the fx at"},{name:"forward",mandatory:!1,description:"The forward vector of the fx"},{name:"up",mandatory:!1,description:"The up vector of the fx"}]},{_id:1281,functionName:"SpawnHelicopter",returnValue:"entity",referenceVariable:"",section:"spawn",access:"Server",description:"Spawns a helicopter",example:'heliGuard = spawnHelicopter( self, startPos, startAng, "heli_guard_mp" , "veh_t6_drone_overwatch_light" )',variables:[{name:"owner",mandatory:!0,description:"the owner entity"},{name:"origin",mandatory:!0,description:"the location"},{name:"angles",mandatory:!0,description:"the angles"},{name:"vehicle name",mandatory:!0,description:"the vehicle name"},{name:"model name",mandatory:!0,description:"the model name"}]},{_id:1282,functionName:"SpawnNapalmGroundFlame",returnValue:"void",referenceVariable:"<entity>",section:"spawn",access:"Server",description:"Spawn a napalm ground flame at the origin with the direction.",example:"self SpawnNapalmGroundFlame( bot_pos , weapon, forward)",variables:[{name:"origin",mandatory:!0,description:"The origin of the flame"},{name:"weapon",mandatory:!0,description:"The weapon"},{name:"direction",mandatory:!0,description:"The direction of the flame"},{name:"time",mandatory:!1,description:"The time to live"}]},{_id:1283,functionName:"SpawnPathNode",returnValue:"pathnode",referenceVariable:"",section:"spawn",access:"Server",description:"Spawn a dynamically created path node or cover node",example:"node = SpawnPathNode( cover_left, origin, angles )",variables:[{name:"classname",mandatory:!0,description:"The class name"},{name:"origin",mandatory:!0,description:"The origin"},{name:"angles",mandatory:!0,description:"The view angles"},{name:"key1",mandatory:!1,description:"Key 1"},{name:"value1",mandatory:!1,description:"Value for key 1"},{name:"key2",mandatory:!1,description:"Key 2"},{name:"value2",mandatory:!1,description:"Value for key 2"}]},{_id:1284,functionName:"SpawnPlane",returnValue:"entity",referenceVariable:"",section:"spawn",access:"Server",description:"Spawns a plane at the origin",example:'plane = spawnplane( owner, "script_model", origin )',variables:[{name:"player",mandatory:!0,description:"the owner"},{name:"classname",mandatory:!0,description:"class of entity"},{name:"origin",mandatory:!0,description:"location to spawn at"},{name:"spawnflags",mandatory:!1,description:"optional spawn flags"}]},{_id:1285,functionName:"SpawnStruct",returnValue:"struct",referenceVariable:"",section:"spawn",access:"Server",description:null,example:null,variables:[]},{_id:1286,functionName:"SpawnTimedFX",returnValue:"entity",referenceVariable:"",section:"effect",access:"Server",description:"Spawns a broadcast entity that plays an oriented timed FX using the weapon's property projExplosionEffect",example:"ent = SpawnTimedFX( smokeGrenade, position, directionUp, duration )",variables:[{name:"weapon",mandatory:!0,description:"weapon to spawn fx on"},{name:"origin",mandatory:!0,description:"the position to spawn fx at"},{name:"direction",mandatory:!1,description:"default (0,0,1)"},{name:"time",mandatory:!1,description:"default 10 seconds"},{name:"team",mandatory:!1,description:"defaults to TEAM_FREE"}]},{_id:1287,functionName:"SpawnTurret",returnValue:"void",referenceVariable:"",section:"spawn",access:"Server",description:"Unsupported function. Do not use.",example:null,variables:[]},{_id:1288,functionName:"SpawnVehicle",returnValue:"entity",referenceVariable:"",section:"spawn",access:"Server",description:"Spawns a new vehicle and returns a reference to it",example:null,variables:[{name:"vehicletype",mandatory:!0,description:"vehicle type (constant string)"},{name:"origin",mandatory:!0,description:"The position of the vehicle (vector)"},{name:"angles",mandatory:!0,description:"The angle to spawn the vehicle at (vector)"},{name:"targetname",mandatory:!1,description:"vehicle target name (constant string)"},{name:"destructibledef",mandatory:!1,description:"The destructibledef to use to make this vehicle a destructible"}]},{_id:1289,functionName:"StartBinocs",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Start Binoculars on player",example:"player StartBinocs()",variables:[{name:"player",mandatory:!0,description:""}]},{_id:1290,functionName:"StartFadingBlur",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Blurs the screen, then fades out the blur to 0, over a period of time.",example:"player StartFadingBlur( 3, 2 )",variables:[{name:"blur_amount",mandatory:!0,description:"The initial blur amount. The value is pixels for Gaussian blur at 640x480. Must be a floating point value greater than 0."},{name:"time",mandatory:!0,description:"Time in seconds, how long the fade out will take"}]},{_id:1291,functionName:"StartFiring",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Starts a turret firing",example:"turret StartFiring()",variables:[]},{_id:1292,functionName:"StartMission",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Start the (server side) mission script for the specified mission - all loading (on all clients) should be completed before calling - use client side LoadMission to load missions",example:"StartMission()",variables:[{name:"mission_index",mandatory:!0,description:"index of the mission name to start - mission names can be retrieved by calling GetMissions to return the available mission array"}]},{_id:1293,functionName:"StartPoisoning",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Start poisoning player",example:"player StartPoisoning()",variables:[{name:"player",mandatory:!0,description:""}]},{_id:1294,functionName:"StartRagdoll",returnValue:"void",referenceVariable:"<player_or_playercorpse>",section:"client",access:"Server",description:"Begin ragdoll physics for this entity. Does nothing if the entity is already a ragdoll.",example:"self StartRagdoll()",variables:[{name:"immediate",mandatory:!1,description:"Start the ragdoll immediately and don't do the velocity capture on the client."}]},{_id:1295,functionName:"StartResurrectViewAngleTransition",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Finishes the flashback",example:"self StartResurrectViewAngleTransition()",variables:[]},{_id:1296,functionName:"StopAllLoopSounds",returnValue:"void",referenceVariable:"",section:"sound",access:"Client",description:"Stops a loop sound",example:"car StopAllLoopSounds( 0.5 )",variables:[{name:"fade",mandatory:!1,description:"The fade out time"}]},{_id:1297,functionName:"StopAllRumbles",returnValue:"void",referenceVariable:"",section:"rumble",access:"Server",description:"Stop all the rumbles playing right now",example:"StopAllRumbles()",variables:[]},{_id:1298,functionName:"StopAnimScripted",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Halts animscript on this entity.",example:"self StopAnimScripted()",variables:[{name:"blend",mandatory:!1,description:"The blend out time for the animation"},{name:"ImmediateStop",mandatory:!1,description:"Stop the animation immediatly on the client side (no client/server time sync)"}]},{_id:1299,functionName:"StopBinocs",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Stop Binoculars on player",example:"player StopBinocs()",variables:[{name:"player",mandatory:!0,description:""}]},{_id:1300,functionName:"StopDemoRecording",returnValue:"void",referenceVariable:"",section:"entity",access:"Server",description:"Stops demo recording",example:"Demo_End()",variables:[]},{_id:1301,functionName:"StopFiring",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Stops a turret firing",example:"turret StopFiring()",variables:[]},{_id:1302,functionName:"StopForceStreamingMaterial",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Forces the streamer to load the texture LODs for a material even if it isn't yet visible. Returns true when all levels are loaded. Call StopForceStreamingMaterial when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",example:"StopForceStreamingMaterial( material )",variables:[{name:"material",mandatory:!0,description:"Material to stop force streaming"}]},{_id:1303,functionName:"StopForceStreamingXModel",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Forces the streamer to load model and texture LODs for a model even if it isn't yet visible. Returns true when all levels are loaded. Call StopForceStreamingXModel when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",example:"areAllForcedLodsLoaded = CScr_StopForceStreamingXModel( model )",variables:[{name:"model",mandatory:!0,description:"The model to stop force streaming"}]},{_id:1304,functionName:"StopForcingStreamer",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Remove all streamer forcing",example:"StopForcingStreamer()",variables:[]},{_id:1305,functionName:"StopJukeMove",returnValue:"void",referenceVariable:"",section:"motion",access:"Server",description:"Stops the player juke movement in progress",example:"player StopJukeMove()",variables:[]},{_id:1306,functionName:"StopLoopSound",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Server",description:"Stops the looping sound with an optional fadetime.",example:"m_chasm stoploopsound( 5 )",variables:[{name:"fadetime",mandatory:!1,description:"Time to fade the sound in. Range is between 1 and 31 inclusive."}]},{_id:1307,functionName:"StopMission",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"fire Mission_Stop event to terminate the current mission",example:"StopMission()",variables:[]},{_id:1308,functionName:"StopMoveSlide",returnValue:"void",referenceVariable:"",section:"motion",access:"Server",description:"Stops the movement caused by MoveSlide().",example:"self StopMoveSlide()",variables:[]},{_id:1309,functionName:"StopPoisoning",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Stop poisoning player",example:"player StopPoisoning()",variables:[{name:"player",mandatory:!0,description:""}]},{_id:1310,functionName:"StopRumble",returnValue:"void",referenceVariable:"<entity>",section:"rumble",access:"Server",description:"Plays a looping rumble on the given entity.",example:'self StopRumble( "damage_heavy" )',variables:[{name:"rumble name",mandatory:!0,description:"The name of the rumble to play"}]},{_id:1311,functionName:"StopShellShock",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Stops the shell shock sequence for the player",example:"player StopShellShock()",variables:[]},{_id:1312,functionName:"StopShootTurret",returnValue:"void",referenceVariable:"<turret>",section:"turret",access:"Server",description:"Stops a turrent from firing.",example:"roof_turret StopShootTurret()",variables:[]},{_id:1313,functionName:"StopSound",returnValue:"void",referenceVariable:"",section:"sound",access:"Server",description:"Stop a particular sound on an entity *WARNING*, You must have a wait between StopSounds() and delete() or the sound will not stop.",example:'beatBox StopSound("alias");',variables:[]},{_id:1314,functionName:"StopSounds",returnValue:"void",referenceVariable:"<entity>",section:"sound",access:"Server",description:"Stop all sounds on an entity. *WARNING*, You must have a wait between StopSounds() and delete() or the sound will not stop.",example:"beatBox StopSounds()",variables:[]},{_id:1315,functionName:"StreamerModelHint",returnValue:"void",referenceVariable:"",section:"string",access:"Server",description:"Force a model to be loaded for a set period of time.",example:'streamerModelHint( "c_hro_hendricks_base_fb", 10 )',variables:[{name:"modelname",mandatory:!0,description:"The name of the model."},{name:"duration",mandatory:!0,description:"Length of time (in seconds) to keep it loaded."}]},{_id:1316,functionName:"StreamerNotify",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Send a streamer notify to the server indicating that the streamer is ready",example:"StreamerNotify(1)",variables:[{name:"id",mandatory:!0,description:"integer value indicating the current streamer notify"}]},{_id:1317,functionName:"StreamerRequest",returnValue:"int",referenceVariable:"",section:"string",access:"Server",description:"Streamer request",example:'streamerRequest( "set", "ramses_igc1" )',variables:[{name:"command",mandatory:!0,description:'"set", "clear" or "play"'},{name:"name",mandatory:!0,description:"Name of the streamer hint asset"}]},{_id:1318,functionName:"StreamerSkiptoDebug",returnValue:"void",referenceVariable:"",section:"debug",access:"Server",description:null,example:null,variables:[]},{_id:1319,functionName:"StreamTextureList",returnValue:"void",referenceVariable:"",section:"string",access:"Client",description:"Specify a texture list file for the streamer to load",example:'StreamTextureList( "igc1" )',variables:[{name:"name",mandatory:!0,description:"Texturelist to stream"}]},{_id:1320,functionName:"SubtitlePrint",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"print to the subtitle channel",example:'SubtitlePrint( 0, 100, "zombies everywhere")',variables:[{name:"localClientNum",mandatory:!0,description:"The localClientNum to flush the subtitles for"},{name:"msec",mandatory:!0,description:"The time to display the subtitle for"},{name:"subtitle",mandatory:!0,description:"The message to display"}]},{_id:1321,functionName:"SwitchMap_Load",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Start loading a map/level.",example:'SwitchMap_Load( "cp_sh_cairo", "coop", 0 )',variables:[{name:"map name",mandatory:!0,description:"the name of the map to preload"}]},{_id:1322,functionName:"SwitchMap_Preload",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Start preloading a map/level. A 'switchmap_preload_finished' notify is sent to the level when its finished.",example:'SwitchMap_Preload( "cp_sh_cairo" )',variables:[{name:"map name",mandatory:!0,description:"the name of the map to preload"}]},{_id:1323,functionName:"SwitchMap_SetLoadingMovie",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Set the loading movie to play",example:"SwitchMap_SetLoadingMovie( str_intro_movie )",variables:[{name:"movie_name",mandatory:!0,description:"The name of the movie"}]},{_id:1324,functionName:"SwitchMap_Switch",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Switch to the loaded map/level",example:"SwitchMap_Switch()",variables:[]},{_id:1325,functionName:"Target_BoundingIsUnderReticle",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player's cursor is roughly inside of the target's bounding box.",example:"player Target_BoundingIsUnderReticle( player, enemy_chopper, 1000 )",variables:[{name:"player",mandatory:!0,description:"The player entity"},{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"maxDistance",mandatory:!0,description:"The maximum distance to check for target intersection"}]},{_id:1326,functionName:"Target_ClearReticleLockOn",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Cancels any lock-on sequence on the hud.",example:"Target_ClearReticleLockOn()",variables:[]},{_id:1327,functionName:"Target_GetArray",returnValue:"entity[]",referenceVariable:"",section:"objective",access:"Server",description:"Gets an array of entities that are set as targets",example:"mytargets = Target_GetArray()",variables:[]},{_id:1328,functionName:"Target_GetOffset",returnValue:"vector",referenceVariable:"",section:"entity",access:"Server",description:"Gets the target offset",example:"offset = Target_GetOffset( entity )",variables:[{name:"entity",mandatory:!0,description:"The entity that is the target"}]},{_id:1329,functionName:"Target_IsInCircle",returnValue:"bool",referenceVariable:"",section:"objective",access:"Server",description:"Returns whether a target is within a given radius from the center of the player's screen",example:"player Target_IsInCircle( enemy_chopper, player, 65, 100 )",variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"player",mandatory:!0,description:"The player entity"},{name:"fov",mandatory:!0,description:"The player's field of view"},{name:"radius",mandatory:!0,description:"radius of the circle, centered at the center of the screen"},{name:"zoffset",mandatory:!1,description:"if entity is not in target array, use optional zoffset for target pos"}]},{_id:1330,functionName:"Target_IsInRect",returnValue:"bool",referenceVariable:"",section:"objective",access:"Server",description:"Returns whether a target is within a given rectangle, centered in the center of the player's screen",example:"player Target_IsInRect( enemy_chopper, player, 65, 100, 100 )",variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"player",mandatory:!0,description:"The player entity"},{name:"fov",mandatory:!0,description:"The player's field of view"},{name:"halfwidth",mandatory:!0,description:"half the width of the rectangle"},{name:"halfheight",mandatory:!0,description:"half the height of the rectangle"}]},{_id:1331,functionName:"Target_IsTarget",returnValue:"bool",referenceVariable:"",section:"objective",access:"Server",description:"Returns whether an entity has been marked as a target",example:"if ( Target_IsTarget( foundEnt ) ) ...",variables:[{name:"entity",mandatory:!0,description:"The entity to check"}]},{_id:1332,functionName:"Target_OriginIsInCircle",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns whether a target is within a given radius from the center of the player's screen",example:"player Target_IsInCircle( enemy_chopper, player, 65, 100 )",variables:[{name:"origin",mandatory:!0,description:"The origin to test"},{name:"player",mandatory:!0,description:"The player entity"},{name:"fov",mandatory:!0,description:"The player's field of view"},{name:"radius",mandatory:!0,description:"radius of the circle, centered at the center of the screen"}]},{_id:1333,functionName:"Target_Remove",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Removes a target",example:"Target_Remove( enemy_chopper )",variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"}]},{_id:1334,functionName:"Target_ScaleMinMaxRadius",returnValue:"float",referenceVariable:"",section:"level",access:"Server",description:"Returns the ratio from 0-1 of where the target is in relation to the radius min and radius max",example:"scale = Target_ScaleMinMaxRadius( target, self, level.hackerToolLockOnFOV, radiusInner, radiusOuter )",variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"player",mandatory:!0,description:"The player entity"},{name:"fov",mandatory:!0,description:"The player's field of view"},{name:"radius_min",mandatory:!0,description:"radius of the circle, centered at the center of the screen"},{name:"radius_max",mandatory:!0,description:"radius of the circle, centered at the center of the screen"}]},{_id:1335,functionName:"Target_Set",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Adds a new target to draw on the hud",example:"Target_Set( enemy_chopper )",variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"target offset",mandatory:!1,description:"The offset of the target position from the entity's origin"}]},{_id:1336,functionName:"Target_SetAllowHighSteering",returnValue:"void",referenceVariable:"",section:"missile",access:"Server",description:"Target will allow incoming missiles to steer more making the target easier to hit",example:"Target_SetAllowHighSteering( enemy_tank, true )",variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"bool",mandatory:!0,description:'true/false"'}]},{_id:1337,functionName:"Target_SetAttackMode",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets how missiles and rockets should approach the target.",example:'Target_SetAttackMode( enemy_tank, "top" )',variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"mode name",mandatory:!0,description:'"top" or "direct"'}]},{_id:1338,functionName:"Target_SetJavelinOnly",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Target will only draw on player's hud when they are looking through the Javelin-weapon's site.",example:"Target_SetJavelinOnly( enemy_tank, true )",variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"mode name",mandatory:!0,description:'"top" or "direct"'}]},{_id:1339,functionName:"Target_SetOffscreenShader",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Sets the material that is used when a target clamps to the edge of the screen. The target must have already been created with target_set()",example:'Target_SetOffscreenShader( enemy_chopper, "arrow" )',variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"materialname",mandatory:!0,description:"The shader for the quad drawn over the target"}]},{_id:1340,functionName:"Target_SetOffset",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Sets the offset for a particular target",example:"Target_SetOffset( enemy_chopper, ( 0, 0, -100 ) )",variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"target offset",mandatory:!1,description:"The offset of the target position from the entity's origin"}]},{_id:1341,functionName:"Target_SetShader",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Changes the material of a target. The target must have already been created with target_set()",example:'Target_SetShader( enemy_chopper, "locked_on_shader" )',variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"materialname",mandatory:!0,description:"The shader for the quad drawn over the target"}]},{_id:1342,functionName:"Target_SetTurretAquire",returnValue:"void",referenceVariable:"",section:"turret",access:"Server",description:"Sets if the target can be attacked by SAM turrets",example:"Target_SetTurretAquire( chopper, false )",variables:[{name:"entity",mandatory:!0,description:"The entity to set the flag"},{name:"bool",mandatory:!1,description:"false if you want the SAM turret to ignore the targe. default is true."}]},{_id:1343,functionName:"Target_StartReticleLockOn",returnValue:"void",referenceVariable:"",section:"objective",access:"Server",description:"Begins the lock-on sequence for the target on the hud. This affects the animation of the vehicle reticle.",example:"Target_StartReticleLockOn( enemy_chopper, 4 )",variables:[{name:"target entity",mandatory:!0,description:"The entity that is the target"},{name:"duration",mandatory:!0,description:"The amount of time between now and fully locked-on, in seconds."}]},{_id:1344,functionName:"TestSpawnPoint",returnValue:"bool",referenceVariable:"",section:"spawn",access:"Server",description:"Returns true if the player would not be in a solid when spawned at the given point.",example:"TestSpawnPoint( self.origin )",variables:[{name:"point",mandatory:!0,description:"the point to test"}]},{_id:1345,functionName:"TmodeSetServerUser",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"informs the server if the entity is using tmode",example:"entity TmodeSetServerUser( 1 )",variables:[{name:"value",mandatory:!0,description:"(int) 1-using 0-not usuing"}]},{_id:1346,functionName:"ToggleNoVehicleFaceTraversability",returnValue:"void",referenceVariable:"",section:"vehicles",access:"Server",description:"Set whether the entity can use NoVehicleFaces. This should only be used in MP map for now.",example:null,variables:[]},{_id:1347,functionName:"TracePassedOnNavMesh",returnValue:"bool",referenceVariable:"",section:"trace",access:"Server",description:"Run a trace on NavMesh to see if a character can go straight from start to end.",example:"posOnNavMesh = TracePassedOnNavMesh( (10,20,30), 25, 15 )",variables:[{name:"start",mandatory:!0,description:"start of the trace"},{name:"end",mandatory:!0,description:"end of the trace"},{name:"characterRadius",mandatory:!1,description:"the radius of the capsule used in trace. default to 0."},{name:"materialFlags",mandatory:!1,description:"the flags marking whether a face type can be used"}]},{_id:1348,functionName:"TracePoint",returnValue:"string[]",referenceVariable:"",section:"trace",access:"Client",description:"Traces a poitn throught the world with MASK_SHOT. Returns hit position, hit surface normal.",example:"trace = TracePoint( p0, p1 )",variables:[{name:"start",mandatory:!0,description:"Start point"},{name:"end",mandatory:!0,description:"End point"}]},{_id:1349,functionName:"TriggerEnable",returnValue:"void",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Enables or disables the trigger",example:"trig TriggerEnable( true )",variables:[{name:"flag",mandatory:!0,description:"True if trigger should be enabled, false otherwise"}]},{_id:1350,functionName:"TriggerFX",returnValue:"void",referenceVariable:"",section:"effects",access:"Server",description:"Trigger the fx after some time delay",example:"triggerFx( domFlag.enemyBaseEffect, 0.001 )",variables:[{name:"entity",mandatory:!0,description:"The fx entity"},{name:"time delay",mandatory:!1,description:"The time delay for the fx to play"}]},{_id:1351,functionName:"TriggerIgnoreTeam",returnValue:"void",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Trigger ignores team",example:"trig TriggerIgnoreTeam()",variables:[]},{_id:1352,functionName:"UnderWater",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Client",description:"checks if the player or actor is underwater",example:"if( player Underwater() ) ...",variables:[]},{_id:1353,functionName:"Unlink",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Unlinks a linked entity from another entity",example:"guy Unlink()",variables:[]},{_id:1354,functionName:"UnlinkNodes",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Disconnects node1 from node2. Call it again with arguments flipped if you want to completely disconnect the two nodes.",example:"UnlinkNodes( node_moving_elev_left, node_moving_elev_right )",variables:[{name:"node1",mandatory:!0,description:"first node to unlink"},{name:"node2",mandatory:!0,description:"second node to unlink"}]},{_id:1355,functionName:"UnlinkTraversal",returnValue:"void",referenceVariable:"",section:"pathnode",access:"Server",description:"Destroys a user edge connecting two path nodes",example:"UnlinkTraversal( beginNode )",variables:[{name:"node",mandatory:!0,description:"Negotiation begin node"}]},{_id:1356,functionName:"UnloadSiegeAnim",returnValue:"void",referenceVariable:"",section:"animation",access:"Client",description:"Unload a siege anim from memory",example:'UnloadSiegeAnim( "flappy_bird" )',variables:[{name:"anim_name",mandatory:!0,description:"Name of the siege anim to unload"}]},{_id:1357,functionName:"UnlockSongByAlias",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Unlock the the sound alias",example:'self UnlockSongByAlias( "frag_out" )',variables:[{name:"aliasname",mandatory:!0,description:"The sound alias to play (string)"}]},{_id:1358,functionName:"UnSetTurretNode",returnValue:"void",referenceVariable:"",section:"ai",access:"Server",description:"Unset the turret from this node.",example:"UnSetTurretNode( node )",variables:[{name:"node",mandatory:!0,description:"The turret node to disconnect"}]},{_id:1359,functionName:"UpdateClientNames",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Update all of the client names",example:null,variables:[]},{_id:1360,functionName:"UpdateNavTriggers",returnValue:"void",referenceVariable:"",section:"trigger",access:"Server",description:"Optimized code that performs the update_nav_triggers() script functionality",example:"UpateNavTriggers()",variables:[]},{_id:1361,functionName:"UpdateUnlockedAttachmentBits",returnValue:"void",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Updates client->unlockedAttachments",example:"self UpdateUnlockedAttachmentBits()",variables:[]},{_id:1362,functionName:"UseAlternateAimParams",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Client",description:"Forces the local player to use alternate values for aim assist. Only works in zombie/campaign mode. Can only be called on players",example:"self UseAlternateAimParams( )",variables:[]},{_id:1363,functionName:"UseAlternateHud",returnValue:"void",referenceVariable:"",section:"hud",access:"Client",description:"Use the alternate HUD in lui. Zombies only",example:null,variables:[{name:"onOff",mandatory:!0,description:"0 = regular, 1 = alternate"}]},{_id:1364,functionName:"UseAlternateReviveIcon",returnValue:"void",referenceVariable:"",section:"hud",access:"Client",description:"Use the alternate revive icon",example:"UseAlternateReviveIcon( 1 )",variables:[{name:"use",mandatory:!0,description:"1 to use alternate revive icon, 0 otherwise"}]},{_id:1365,functionName:"UseAnimTree",returnValue:"void",referenceVariable:"<entity>",section:"animation",access:"Server",description:"Sets the anim tree for the entity",example:"self UseAnimTree( #animtree )",variables:[{name:"anim tree",mandatory:!0,description:"The anim tree to set"}]},{_id:1366,functionName:"UseBuildKitWeaponModel",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Use a build kit weapon model",example:"wall_weapon_model UseBuildKitWeaponModel( player, magicbox.weapon )",variables:[{name:"player",mandatory:!0,description:"The player whose build kit data will be used"},{name:"weapon",mandatory:!0,description:"The weapon to base the build kit on"},{name:"camoIndex",mandatory:!1,description:"The index of the camo to override the build kit's camo with"},{name:"upgraded",mandatory:!1,description:"bool whether this should be the upgraded version. If so extclip and fmj will be added"}]},{_id:1367,functionName:"UseBy",returnValue:"entity",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Uses the entity with the passed in entity as the activator",example:"self UseBy( player )",variables:[{name:"activator entity",mandatory:!0,description:""}]},{_id:1368,functionName:"UseServerVisionset",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Switches using the server supplied (via SetVisionSetForPlayer()) visionset.",example:"player UseServerVisionset( true )",variables:[{name:"use it",mandatory:!0,description:"Whether using the server override visionset"}]},{_id:1369,functionName:"UseTriggerIgnoreUseHoldTime",returnValue:"void",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Set the require look at flag for the trigger",example:"e_trig_mobile_armory UseTriggerIgnoreUseHoldTime()",variables:[]},{_id:1370,functionName:"UseTriggerRequireLookAt",returnValue:"void",referenceVariable:"<trigger>",section:"entity",access:"Server",description:"Set the require look at flag for the trigger",example:"e_trig_plaza_igc UseTriggerRequireLookAt()",variables:[]},{_id:1371,functionName:"UseTriggerRequireLookToward",returnValue:"void",referenceVariable:"<trigger>",section:"triggers",access:"Server",description:"Set the require look along flag for the trigger",example:"e_trig_plaza_igc UseTriggerRequireLookToward()",variables:[]},{_id:1372,functionName:"UseWeaponHideTags",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Hides tags on this entity based on the hidetags value of the provided weaponname",example:"wall_weapon_model UseWeaponHideTags()",variables:[{name:"weaponName",mandatory:!0,description:"The name of the weapon to base the tags to hide on"}]},{_id:1373,functionName:"UseWeaponModel",returnValue:"void",referenceVariable:"",section:"weapons",access:"Server",description:"Use a weapon model",example:'wall_weapon_model UseWeaponModel("m16_zm")',variables:[{name:"weaponName",mandatory:!0,description:"The name of the weapon to base the tags to hide on"},{name:"model",mandatory:!1,description:"The name of a model to use. If none is specified the world model for the weapon will be used"},{name:"weapon options",mandatory:!1,description:"The weapon options"}]},{_id:1374,functionName:"Vibrate",returnValue:"void",referenceVariable:"",section:"motion",access:"Server",description:"Causes a script entity to vibrate, rotating around its origin, along a given vector dir",example:"self Vibrate( directionVir, 0.3, 0.4, 1.0 )",variables:[{name:"direction vector",mandatory:!0,description:"The direction of the vibration"},{name:"amplitude",mandatory:!0,description:"The amount of the vibration in degrees"},{name:"period",mandatory:!0,description:"The period of the vibration in seconds"},{name:"time",mandatory:!0,description:"The length of time of the vibration in seconds"}]},{_id:1375,functionName:"VideoPause",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Pause video playback",example:'VideoPause( "MyAwesomeMovie" )',variables:[{name:"name",mandatory:!0,description:"name of movie to pause. do not add a file suffix (like .mp4)"}]},{_id:1376,functionName:"VideoPrime",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Preload the first second of a movie. Call this several seconds before the movie needs to play to prevent any delay",example:'VideoPrime( "MyAwesomeMovie" )',variables:[{name:"name",mandatory:!0,description:"name of movie to play. do not add a file suffix (like .mp4)"},{name:"loop",mandatory:!1,description:"Set this to true if the movie should automatically restart when it reaches the end."}]},{_id:1377,functionName:"VideoStart",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Start a video for playback on an in-game surface",example:'VideoStart( "MyAwesomeMovie" )',variables:[{name:"name",mandatory:!0,description:"name of movie to play. do not add a file suffix (like .mp4)"},{name:"loop",mandatory:!1,description:"Set this to true if the movie should automatically restart when it reaches the end."}]},{_id:1378,functionName:"VideoStop",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Stop a video being played on an in-game surface",example:'VideoStop( "MyAwesomeMovie" )',variables:[{name:"name",mandatory:!0,description:"name of movie to stop. do not add a file suffix (like .mp4)"}]},{_id:1379,functionName:"VideoUnpause",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Unpause video playback",example:'VideoUnpause( "MyAwesomeMovie" )',variables:[{name:"name",mandatory:!0,description:"name of movie to pause. do not add a file suffix (like .mp4)"}]},{_id:1380,functionName:"ViewKick",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Give the player a view kick",example:"entity ViewKick( 25, self.origin )",variables:[{name:"damage",mandatory:!0,description:"The damage to inflict"},{name:"origin",mandatory:!0,description:"The origin of the kick"}]},{_id:1381,functionName:"ViewmodelHasTag",returnValue:"void",referenceVariable:"",section:"client",access:"Client",description:null,example:null,variables:[{name:"local_client_num",mandatory:!0,description:"The client number[MANDATORY]"}]},{_id:1382,functionName:"VisionSetLastStand",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Sets players' laststand vision. Optionally give a transition time from the current vision.",example:'VisionSetLastStand( "armada", 1.5 )',variables:[{name:"vision name",mandatory:!0,description:"Vision to transition to."},{name:"transition time",mandatory:!1,description:"How long, in seconds, to take transitioning to the new vision set if a transition is possible. Default is one second."}]},{_id:1383,functionName:"VisionSetLerpRatio",returnValue:"void",referenceVariable:"",section:"player",access:"Server",description:"Determines if you can see an item. Checks distance and view cone before the trace to increase efficency.",example:"self VisionSetLerpRatio ( currentDistance / maxDistance )",variables:[{name:"float",mandatory:!0,description:"ratio between 0 and 1"}]},{_id:1384,functionName:"VisionSetNaked",returnValue:"void",referenceVariable:"",section:"effects",access:"Server",description:"Set the vision and its duration",example:'VisionSetNaked( "cp_igc_chinatown_intro", 0.05 )',variables:[{name:"name",mandatory:!0,description:"The vision set name"},{name:"duration",mandatory:!1,description:"The duration of the vision"}]},{_id:1385,functionName:"VRIsActive",returnValue:"void",referenceVariable:"",section:"level",access:"Client",description:"Returns whether the game is currently in VR mode.",example:"do_vr_stuff = VrIsActive() ...",variables:[]},{_id:1386,functionName:"WalkUnderwater",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets if a player should walk while underwater",example:"depth = get_players()[0] WalkUnderwater( true )",variables:[{name:"boolean",mandatory:!0,description:"true if player should walk underwater. False if player should swim"}]},{_id:1387,functionName:"WeaponFriendlyHacking",returnValue:"bool",referenceVariable:"",section:"weapons",access:"Client",description:"Returns the value of the friendlyHacking bit on the specified weapon of the specified player",example:"currentWeapon = GetCurrentWeapon( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client number of the player"},{name:"localClientNum",mandatory:!0,description:"Weapon to check"}]},{_id:1388,functionName:"WeaponHasAttachment",returnValue:"bool",referenceVariable:"",section:"weapons",access:"Server",description:"Does the weapon have all the attachments specified?",example:'WeaponHasAttachment( weapon, "extbarrel", "damage, "fmj" )',variables:[]},{_id:1389,functionName:"WeaponHasAttachmentAndUnlocked",returnValue:"bool",referenceVariable:"",section:"weapons",access:"Server",description:"Does the weapon have all the attachments specified? And are they all unlocked for challenge stat purposes?",example:'player WeaponHasAttachmentAndUnlocked( weapon, "extbarrel", "damage, "fmj" )',variables:[{name:"weapon",mandatory:!0,description:"weapon"},{name:"string",mandatory:!0,description:"string id for attachment"}]},{_id:1390,functionName:"WorldEntNumber",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Returns the entity number for the world",example:null,variables:[]},{_id:1391,functionName:"WorldToLocalCoords",returnValue:"vector",referenceVariable:"<entity>",section:"entity",access:"Server",description:"Transform the given world point into the local space of the entity",example:"local_point = self WorldToLocalCoords( world_point )",variables:[{name:"world coords",mandatory:!0,description:"The point in world coordinates (vector3)"}]},{_id:1392,functionName:"WorldTrace",returnValue:"string[]",referenceVariable:"",section:"trace",access:"Server",description:"Trace from start to end",example:"trace = WorldTrace( start_pos, end_pos )",variables:[{name:"start",mandatory:!0,description:"The trace start point"},{name:"end",mandatory:!0,description:"The trace end point"}]},{_id:1393,functionName:"ZBarrierGetPiece",returnValue:"entity",referenceVariable:"<entity>",section:"zombie",access:"Client",description:"Gets the entity for the zbarrier's given piece index",example:"zbarrier ZBarrierGetPiece( 3 )",variables:[{name:"piece_index",mandatory:!0,description:"piece index to get"}]},{_id:1394,functionName:"ZBarrierPieceUseAlternateModel",returnValue:"void",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Sets the indexed piece to use the alternate model.",example:"ent ZBarrierPieceUseAlternateModel(1)",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:1395,functionName:"ZBarrierPieceUseAttachWeapon",returnValue:"void",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Sets the indexed piece to attach the zbarrier's weapon to tag_weapon (and tag_weapon_left if it's dual wield).",example:"ent ZBarrierPieceUseAttachWeapon( 1 )",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:1396,functionName:"ZBarrierPieceUseBoxRiseLogic",returnValue:"void",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Sets the indexed piece to use the box rise logic.",example:"ent ZBarrierPieceUseBoxRiseLogic(1)",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:1397,functionName:"ZBarrierPieceUseDefaultModel",returnValue:"void",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Sets the indexed piece to use the default model.",example:"ent ZBarrierPieceUseDefaultModel(1)",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:1398,functionName:"ZBarrierPieceUseUpgradedModel",returnValue:"void",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Sets the indexed piece to use the upgraded model.",example:"ent ZBarrierPieceUseUpgradedModel(1)",variables:[{name:"piece number",mandatory:!0,description:"The piece index."}]},{_id:1399,functionName:"ZBarrierSupportsZombieReachThroughAttacks",returnValue:"int",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns true if this zbarrier supports zombie reach through attacks.",example:"useAttack = ent ZBarrierSupportsZombieReachThroughAttacks()",variables:[]},{_id:1400,functionName:"ZBarrierSupportsZombieTaunts",returnValue:"int",referenceVariable:"<entity>",section:"zombie",access:"Server",description:"Returns true if this zbarrier supports zombie taunt anims.",example:"useTaunt = ent ZBarrierSupportsZombieTaunts()",variables:[]},{_id:1401,functionName:"ZeroGravityVolumeOff",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Disables Zero Gravity Volume.",example:'ZeroGravityVolumeOff( "area_four" )',variables:[{name:"volume name",mandatory:!0,description:"The volume name."}]},{_id:1402,functionName:"ZeroGravityVolumeOn",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Enables Zero Gravity Volume.",example:'ZeroGravityVolumeOn( "area_four" )',variables:[{name:"volume name",mandatory:!0,description:"The volume name."}]},{_id:1403,functionName:"AddSentientEventListener",returnValue:"void",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Registers entity to listen to a specific event. Call waittill(<event>) to get the notification in script.",example:'self AddSentientEventListener("bulletwhizby")',variables:[{name:"event",mandatory:!0,description:"The event name"}]},{_id:1404,functionName:"AIThrowGrenade",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Throw a grenade. CheckGrenadeThrowPos() or CheckGrenadeThrow() must be called first.",example:"self ThrowGrenade()",variables:[]},{_id:1405,functionName:"AllowPitchAngle",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Allows AI to pitch on stairs",example:"guy AllowPitchAngle ( 1 )",variables:[{name:"on_off",mandatory:!0,description:"1 to allow and 0 to disallow"}]},{_id:1406,functionName:"AnimMode",returnValue:"void",referenceVariable:"<entity>",section:"ai",access:"Server",description:"Set the way that animation deltas are interpreted by the game engine",example:'self AnimMode( "gravity" )',variables:[{name:"mode",mandatory:!0,description:"which animmode to use. Must be 'gravity', 'nogravity', 'angle deltas', 'pos deltas', 'normal', 'normal_nogravity', 'zonly_physics', 'nophysics', 'none'"},{name:"clear path",mandatory:!1,description:"The clear path flag"}]},{_id:1407,functionName:"AtDangerousNode",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Determine whether this actor is near a dangerous node.",example:"if ( ai atDangerousNode() )...",variables:[]},{_id:1408,functionName:"AttackedRecently",returnValue:"bool",referenceVariable:"<sentient>",section:"AI",access:"Server",description:'Returns true if given sentient has attacked the entity within last "time" sec.',example:"self AttackedRecently(self.enemy)",variables:[{name:"entity",mandatory:!0,description:"The enemy entity"},{name:"time",mandatory:!0,description:"Time interval in seconds."}]},{_id:1409,functionName:"BotCancelPath",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Cancels the path to the current goal.The bot remains under Havok control, but Havok will not steer it anywhere.",example:"self BotCancelPath()",variables:[]},{_id:1410,functionName:"BotClassAddAttachment",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Adds this attachment to the current class index",example:'self BotClassAddAttachment( weaponclass, weapon, a1, "primaryattachment1" )',variables:[{name:"loadoutClass",mandatory:!0,description:"The loadout class"},{name:"weapon",mandatory:!0,description:"The weapon to add attachment for"},{name:"attachmentName",mandatory:!0,description:"The attachment name"},{name:"attachmentSlot",mandatory:!0,description:"The attachment slot"}]},{_id:1411,functionName:"BotClassAddItem",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Equips this class with this item",example:"self BotClassAddItem( weaponclass, weapon )",variables:[{name:"loadout class",mandatory:!0,description:"The loadout class"},{name:"item name",mandatory:!0,description:"The item to add"}]},{_id:1412,functionName:"BotClassSetWeaponOption",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Set weapon option (camo/reticle) for this class",example:"self BotClassSetWeaponOption( weaponclass, primary, optionType, level.botWeaponOptionsId[optionType][i] )",variables:[{name:"loadout class",mandatory:!0,description:"the loadout class"},{name:"primary",mandatory:!0,description:"True if primary weapon"},{name:"option type",mandatory:!0,description:"camo / rectile"},{name:"option index",mandatory:!0,description:"The option index "}]},{_id:1413,functionName:"BotDropClient",returnValue:"void",referenceVariable:"",section:"AI",access:"Server",description:" Drop the bot client from the game",example:" self BotDropClient()",variables:[]},{_id:1414,functionName:"BotGetGoalPosition",returnValue:"vector",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Get the center point of the bot's current goal",example:"goalPos = self BotGetGoalPosition()",variables:[]},{_id:1415,functionName:"BotGetGoalRadius",returnValue:"int",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Get the radius of the bot's current goal",example:"goalRadius = self BotGetGoalRadius()",variables:[]},{_id:1416,functionName:"BotGetJetEnergy",returnValue:"float",referenceVariable:"",section:"AI",access:"Server",description:" Returns the percentage (between 0 and 1) of jet energy remaining",example:" if( self BotGetJetEnergy() >= 0.5 )",variables:[]},{_id:1417,functionName:"BotGoalReached",returnValue:"bool",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Does a state based check that returns true if the bot has reached the current goal",example:"if( self BotGoalReached() )",variables:[]},{_id:1418,functionName:"BotGoalSet",returnValue:"bool",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Returns true if the bot has a valid unreached goal",example:"if( self BotGoalSet() )",variables:[]},{_id:1419,functionName:"BotInLastStand",returnValue:"bool",referenceVariable:"",section:"AI",access:"Server",description:" Returns true if the bot is in any of the last stand states, PM_LASTSTAND, PM_REVIVEE, PM_LASTSTAND_TRANSITION",example:" if( self BotInLastStand() )",variables:[]},{_id:1420,functionName:"BotInLowReady",returnValue:"bool",referenceVariable:"",section:"AI",access:"Server",description:" Returns true is the bot has the PMF_LOWREADY flag set",example:" if( self BotInLowReady() )",variables:[]},{_id:1421,functionName:"BotLeaveGame",returnValue:"void",referenceVariable:"",section:"AI",access:"Server",description:" Drop the bot client from the game",example:" self BotDropClient()",variables:[]},{_id:1422,functionName:"BotLookAtPoint",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Specify a world point for the bot to look towards every frame",example:"self BotAtPoint( (0, 0, 0 ) )",variables:[{name:"position",mandatory:!0,description:"The world point to look at"}]},{_id:1423,functionName:"BotLookForward",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Update every frame to look in the direction of movement.",example:"self BotLookForward()",variables:[]},{_id:1424,functionName:"BotLookNone",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Look angles will not be set on the command sent to the server.",example:"self BotLookNone()",variables:[]},{_id:1425,functionName:"BotPressButton",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Press the specified button until asked to release it",example:"self BotPressButton( BOT_BUTTON_BIT_ATTACK )",variables:[{name:"buttonbit",mandatory:!0,description:"The number of the button to press"}]},{_id:1426,functionName:"BotPressButtonForGadget",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Bot presses the button for the specified gadget for one frame",example:"self BotPressButtonForGadget( weapon )",variables:[{name:"gadget",mandatory:!0,description:"The gadget weapon to activate"}]},{_id:1427,functionName:"BotReleaseButton",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Release the specified button",example:"self BotReleaseButton( BOT_BUTTON_BIT_ATTACK )",variables:[{name:"buttonbit",mandatory:!0,description:"The number of the button to release"}]},{_id:1428,functionName:"BotReleaseButtons",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Release all buttons ( tapped and held )",example:"self BotReleaseButtons()",variables:[]},{_id:1429,functionName:"BotRequestPath",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Requests a path from Havok to the current goal provided the bot is under Havok control.",example:"self BotRequestPath()",variables:[]},{_id:1430,functionName:"BotSetDefaultClass",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Equips this class number with the default class",example:'self BotSetDefaultClass( 6, "class_smg" )',variables:[{name:"default class number",mandatory:!0,description:"The default class number"},{name:"loadout class",mandatory:!0,description:"The loadout class "}]},{_id:1431,functionName:"BotSetGoal",returnValue:"bool",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Set a goal circle for the bot to path to.",example:"self BotSetGoal( ( 0, 0, 0 ), 128 )",variables:[{name:"position",mandatory:!0,description:"The 3d vector of the center point"},{name:"radius",mandatory:!1,description:"The radius of the circle around the center point, defaults to 0"}]},{_id:1432,functionName:"BotSetLookAngles",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Specify a fixed vector for the bot to look in",example:"self BotSetLookAngles( ( 1, 0, 0 ) )",variables:[{name:"dir",mandatory:!0,description:"The vector of the direction to look in. Does not need to be normalized"}]},{_id:1433,functionName:"BotSetLookAnglesFromPoint",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Set a fixed vector for the bot to look in relative to a world point",example:"self BotSetLookAnglesFromPoint( ( 0, 0, 0 ) )",variables:[{name:"point",mandatory:!0,description:"The world point to look towards"}]},{_id:1434,functionName:"BotSetMoveAngle",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Sets the direction the bot will move towards",example:"self BotSetMoveAngle( ( 1, 0, 0 ) )",variables:[{name:"dir",mandatory:!0,description:"The vector of the direction the bot should move"}]},{_id:1435,functionName:"BotSetMoveAngleFromPoint",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Set the bot's move angle relative to a point in the world",example:"self BotSetMoveAngleFromPoint( ( 0, 0, 0 ) )",variables:[{name:"point",mandatory:!0,description:"The world point to move toward"}]},{_id:1436,functionName:"BotSetMoveMagnitude",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Set the bot's movement magnitude between 0 and 1",example:"self BotSetMoveMagnitude( 0.75 )",variables:[{name:"magnitude",mandatory:!0,description:"The magnitude of the bot's movement"}]},{_id:1437,functionName:"BotSightTrace",returnValue:"bool",referenceVariable:"<bot>",section:"AI",access:"Server",description:null,example:"self Bot()",variables:[]},{_id:1438,functionName:"BotSightTracePassed",returnValue:"bool",referenceVariable:"<bot>",section:"AI",access:"Server",description:null,example:"self Bot()",variables:[]},{_id:1439,functionName:"BotSwitchtoWeapon",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Switches to the specified weapon if weapon switching is not disabled",example:"self BotSwitchtoWeapon( weapon )",variables:[{name:"weapon",mandatory:!1,description:"The gadget weapon to switch to"}]},{_id:1440,functionName:"BotTakeManualControl",returnValue:"void",referenceVariable:"",section:"AI",access:"Server",description:" Takes steering control away from Havok.The bot will stop moving along its last successful path and respond to script movement commands",example:" self BotTakeManualControl()",variables:[]},{_id:1441,functionName:"BotTapButton",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Press the specified button bit for a single frame",example:"self BotTapButton( BOT_BUTTON_BIT_ATTACK )",variables:[{name:"buttonbit",mandatory:!0,description:"The number of the button to press"}]},{_id:1442,functionName:"BotToggleDemiGodMode",returnValue:"bool",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Toggle Demi-God Mode on the bot",example:"self ToggleDemiGodMode()",variables:[]},{_id:1443,functionName:"BotToggleGodMode",returnValue:"bool",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Toggle Godmode on the bot",example:"self ToggleGodMode()",variables:[]},{_id:1444,functionName:"BotUnderManualControl",returnValue:"bool",referenceVariable:"",section:"AI",access:"Server",description:" Returns true if the bot is not being steered by Havok",example:" if( self BotUnderManualControl() )",variables:[]},{_id:1445,functionName:"CalcApproximatePathToPosition",returnValue:"vector[]",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Returns an array of world positions representing the approximate path an actor will take. Calculating an approximate path will cause the AI to clear their current path.",example:"self CalcApproximatePathToPosition( position )",variables:[{name:"position",mandatory:!0,description:"The goal position for the path"},{name:"clear path",mandatory:!1,description:"True to clear path, false otherwise. Defaults to True"}]},{_id:1446,functionName:"CalcLookaheadPos",returnValue:"vector",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Calculate a lookahead point based on a given starting location and number of iterations. Returns an array with these keys",example:"self CalcLookaheadPos( self.origin, 3 )",variables:[{name:"startPos",mandatory:!0,description:"Starting position of the lookahead traces"},{name:"numIter",mandatory:!0,description:"Number of times to iterate (more gives better results, but is more expensive). Set to 0 to get current lookahead."}]},{_id:1447,functionName:"CalcPathLength",returnValue:"int",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Gets the length of the path to the specified pos",example:"self CalcPathLength( goalpos )",variables:[{name:"goalpos",mandatory:!0,description:"The goal position"}]},{_id:1448,functionName:"CanAttackEnemyNode",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Checks if this actor can attack its enemies node.",example:"self CanAttackEnemyNode()",variables:[]},{_id:1449,functionName:"CanSee",returnValue:"bool",referenceVariable:"<sentient>",section:"ai",access:"Server",description:"Check to see if the AI can see the given entity.",example:"if( self CanSee( player ) )",variables:[{name:"target",mandatory:!0,description:"(entity) The entity to check."},{name:"cacheLength",mandatory:!1,description:"(integer) The cache length"}]},{_id:1450,functionName:"CanShoot",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Check to see if the actor can shoot the given position.",example:"canShoot = self CanShoot( eye, offset )",variables:[{name:"shoot at position",mandatory:!0,description:"(vector) The position to shoot at."},{name:"offset from gun",mandatory:!1,description:"(vector) The offset from the gun muzzle from which to calculate collision."}]},{_id:1451,functionName:"CanShootEnemy",returnValue:"int",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Check to see if the actor can shoot his current enemy.",example:"canShootEnemy = self CanShootEnemy()",variables:[{name:"cache duration",mandatory:!1,description:"(int) When set, uses a custom time value for the cache."}]},{_id:1452,functionName:"CanThrowGrenade",returnValue:"vector",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Checks whether the actor can throw a grenade at a given position. If he can't then result will be undefined, otherwise the result is the resultant velocity vector",example:"throwvel = self CanThrowGrenade( armOffset, 0 )",variables:[{name:"hand offset",mandatory:!0,description:"(vector) the estimated offset of the hand for the throw"},{name:"random range",mandatory:!0,description:"(float) random range from target position to throw at"}]},{_id:1453,functionName:"CanThrowGrenadePos",returnValue:"vector",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Checks whether the actor can throw a grenade at a given position. If he can't then result will be undefined, otherwise the result is the resultant velocity vector",example:"throwvel = self CanThrowGrenadePos( armOffset, targetPos )",variables:[{name:"hand offset",mandatory:!0,description:"(vector) the estimated offset of the hand for the throw"},{name:"targetpos",mandatory:!0,description:"(vector) The target position, should be at ground level of potential target"}]},{_id:1454,functionName:"CheckGrenadeThrow",returnValue:"vector",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Checks whether the actor can throw a grenade at his target. If he can't then result will be undefined, otherwise the result is the resultant velocity vector",example:'throwvel = self CheckGrenadeThrow( armOffset, "min energy", 0 )',variables:[{name:"hand offset",mandatory:!0,description:"(vector) the estimated offset of the hand for the throw"},{name:"method",mandatory:!0,description:"(string) The grenade toss method. Can be 'min energy', 'min time', and 'max tune'"},{name:"random range",mandatory:!0,description:"(float) random range from target position to throw at"}]},{_id:1455,functionName:"CheckGrenadeThrowPos",returnValue:"vector",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Checks whether the actor can throw a grenade at a given position. If he can't then result will be undefined, otherwise the result is the resultant velocity vector",example:'throwvel = self CheckGrenadeThrowPos( armOffset, "min energy", targetPos )',variables:[{name:"hand offset",mandatory:!0,description:"(vector) the estimated offset of the hand for the throw"},{name:"method",mandatory:!0,description:"(vector) The grenade toss method. Can be 'min energy', 'min time', and 'max tune'"},{name:"targetpos",mandatory:!0,description:"(vector) The target position, should be at ground level of potential target"}]},{_id:1456,functionName:"CheckProne",returnValue:"bool",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Returns true when a character can go prone at the specified position. Specifically setup for use by AI characters.",example:"canFitProne = self CheckProne( origin, yaw, alreadyProne )",variables:[{name:"position",mandatory:!0,description:"vector) The position of the prone character."},{name:"yaw",mandatory:!0,description:"float) The world yaw in degrees."},{name:"is prone",mandatory:!0,description:"bool) Flag if the character is already prone."}]},{_id:1457,functionName:"ChooseBetterCoverNode",returnValue:"pathnode",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Chooses a better cover node for an ai",example:"newNode = behaviorTreeEntity ChooseBetterCoverNode()",variables:[]},{_id:1458,functionName:"ClearEnemy",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Clear the actor's current enemy entity.",example:"self ClearEnemy()",variables:[]},{_id:1459,functionName:"ClearEntityOwner",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Clears an AI's entity owner.",example:"self ClearEntityOwner()",variables:[]},{_id:1460,functionName:"ClearEntityTarget",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Clears an AI's entity target.",example:"self ClearEntityTarget( vehicle_entity )",variables:[]},{_id:1461,functionName:"ClearFixedNodeSafeVolume",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Clears this actor's fixed node safe volume.",example:"self ClearFixedNodeSafeVolume()",variables:[]},{_id:1462,functionName:"ClearForcedGoal",returnValue:"void",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Clears the forcedGoal for this actor's goal.",example:"self ClearForcedGoal()",variables:[]},{_id:1463,functionName:"ClearGoalVolume",returnValue:"void",referenceVariable:"<sentient>",section:"ai",access:"Server",description:"Clears this actor's goal volume.",example:"self ClearGoalVolume()",variables:[]},{_id:1464,functionName:"ClearLookAt",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Update every frame to look in the direction of movement.",example:"self BotLookForward()",variables:[]},{_id:1465,functionName:"ClearPath",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Clears the AI's current path.",example:"self ClearPath()",variables:[]},{_id:1466,functionName:"ClearPitchOrient",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Clear pitch orientation",example:"self clearPitchOrient()",variables:[]},{_id:1467,functionName:"ClearPotentialThreat",returnValue:"void",referenceVariable:"<entity>",section:"ai",access:"Server",description:"Clear the potential threat direction. See SetPotentialThreat for more info on potential threats",example:"self ClearPotentialThreat( 90 )",variables:[{name:"dir",mandatory:!0,description:"direction of the threat. This is the angle from which the NPC should expect danger"}]},{_id:1468,functionName:"ClearUsePosition",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Clear the override for the goal pos.",example:"self ClearRunToPos()",variables:[]},{_id:1469,functionName:"CollideWithActors",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Toggles collision with other actors. Actor will go through each other, when its toggled off.",example:"entity CollideWithActors( true )",variables:[{name:"bool",mandatory:!0,description:"Turn collision on or off."}]},{_id:1470,functionName:"CreateThreatBiasGroup",returnValue:"void",referenceVariable:"",section:"sentient",access:"Server",description:"Create a new threat bias group. If it already exists, do nothing",example:'CreateThreatBiasGroup( "flanking_team" )',variables:[{name:"name",mandatory:!0,description:"threat bias group name."}]},{_id:1471,functionName:"DamageMode",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Set the damage mode of this actor.",example:'randAlly DamageMode("next_shot_kills")',variables:[{name:"damage mode",mandatory:!0,description:"(const string) DamageMode must be 'normal' or 'next_shot_kills'"}]},{_id:1472,functionName:"DropWeapon",returnValue:"entity",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Drop the actor's weapon",example:"self DropWeapon(self.weapon, self.anim_gunHand, throwVel)",variables:[{name:"weapon name",mandatory:!0,description:"(string) The name of the weapon."},{name:"hand",mandatory:!0,description:"(string) The tag to throw the weapon from."},{name:"velocity",mandatory:!1,description:"(vector) The initial velocity of the weapon."},{name:"angular velocity",mandatory:!1,description:"(vector) The initial angular velocity of the weapon."},{name:"scavenger",mandatory:!1,description:"(bool) If the weapon requires the player to have scavenger perk to pick up the weapon."}]},{_id:1473,functionName:"FindBestCoverNode",returnValue:"pathnode",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Find the best cover node for a given NPC given his state.",example:"self FindBestCoverNode()",variables:[]},{_id:1474,functionName:"FindBestCoverNodes",returnValue:"pathnode[]",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Find the best cover nodes for a given NPC given his state. Sorted by best",example:"nodes = self FindBestCoverNodes(radius,origin)",variables:[{name:"radius",mandatory:!0,description:"search radius"},{name:"origin",mandatory:!0,description:"search origin"}]},{_id:1475,functionName:"FindCoverNodeAtLocation",returnValue:"pathnode",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Does traces to determine how much of the player is visible if the player is the actor's enemy. Then modifies the actor's accuracy based on the visibilty. Should be called before any shoot volley.",example:"self UpdatePlayerSightAccuracy()",variables:[]},{_id:1476,functionName:"FindReacquireDirectPath",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Finds a path directly to the enemy. Call ReacquireMove to use the path.",example:null,variables:[{name:"ignore suppression",mandatory:!1,description:"Whether to ignore suppression when looking for a path. True makes a success more likely but may result in a more dangerous path."}]},{_id:1477,functionName:"FindReacquireNode",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Finds a reacquire node when exposed.",example:"guy FindReacquireNode()",variables:[]},{_id:1478,functionName:"FindReacquireProximatePath",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Finds a path to a point that can see the enemy without leaving goal. Call ReacquireMove to use the path.",example:null,variables:[{name:"ignore suppression",mandatory:!1,description:"Whether to ignore suppression when looking for a path. True makes a success more likely but may result in a more dangerous path."}]},{_id:1479,functionName:"FinishActorDamage",returnValue:"entity",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Does damage to an actor - usually as part of the damage callback",example:"self FinishActorDamage( eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, vDamageOrigin, psOffsetTime, iBoneIndex, iSurfaceType, vSurfaceNormal )",variables:[{name:"Inflictor",mandatory:!0,description:"The entity that causes the damage.(e.g. a turret)"},{name:"Attacker",mandatory:!0,description:"The entity that is attacking."},{name:"Damage",mandatory:!0,description:"Integer specifying the amount of damage done"},{name:"Damage Flags",mandatory:!0,description:"Integer specifying flags that are to be applied to the damage"},{name:"Means Of Death",mandatory:!0,description:"Integer specifying the method of death"},{name:"Weapon",mandatory:!0,description:"The weapon number of the weapon used to inflict the damage"},{name:"Direction",mandatory:!0,description:"(vector) The direction of the damage"},{name:"Hit Loc",mandatory:!0,description:"The location of the hit"},{name:"Damage Origin",mandatory:!0,description:"Position of the originator of the damage"},{name:"Offset Time",mandatory:!0,description:"The time offset for the damage"},{name:"Bone Index",mandatory:!0,description:"Index of nearest bone"},{name:"Surface Type",mandatory:!1,description:"The surface type of the hit location"},{name:"Surface Normal",mandatory:!1,description:"The surface normal at hit location"}]},{_id:1480,functionName:"ForceTeleport",returnValue:"int",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Force Teleport the actor to a new position with the given origin and angles, regardless of wether it will be visible to the player or not.",example:"self ForceTeleport( org, angles )",variables:[{name:"position",mandatory:!0,description:"(point) The actor's new position."},{name:"angles",mandatory:!1,description:"(vector) The actor's new angles."},{name:"updategoalpos",mandatory:!1,description:"(bool) Update the script goal position to the teleport location. True by default."},{name:"resetEntity",mandatory:!1,description:"(bool) Reset the entity behaviors."}]},{_id:1481,functionName:"GenerateRadioEvent",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Searches animation selector table and returns an animation alias based on current state of the blackboard.",example:'self GenerateRadioEvent("radio_event_low")',variables:[{name:"type of event",mandatory:!0,description:"The type of radio event"}]},{_id:1482,functionName:"GetAimLimitsFromEntry",returnValue:"string[]",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Searches animation selector table and returns an animation alias based on current state of the blackboard.",example:null,variables:[]},{_id:1483,functionName:"GetAnglesToLikelyEnemyPath",returnValue:"vector",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Get the angles towards the direction an enemy is most likely to appear. Returns undefined if a good guess can't be made.",example:"self GetAnglesToLikelyEnemyPath()",variables:[]},{_id:1484,functionName:"GetBehaviorTreeStatus",returnValue:"int",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Returns current status/BHTN_STATUS of the behavior tree for an actor.",example:"isBehaviorTreeInRunningState = behaviorTreeEntity GetBehaviortreeStatus() == BHTN_RUNNING",variables:[]},{_id:1485,functionName:"GetClosestEnemySqDist",returnValue:"void",referenceVariable:"<sentient>",section:"sentient",access:"Server",description:"Get the distance to the nearest enemy",example:"dist = self GetClosestEnemySqDist()",variables:[]},{_id:1486,functionName:"GetDropToFloorPosition",returnValue:"vector",referenceVariable:"<entity>",section:"AI",access:"Server",description:"Gets the floor position for dropping an AI or player to the ground. Returns undefined if the AI is in solid.",example:"position = ai GetDropToFloorPosition( ai.origin )",variables:[{name:"position",mandatory:!1,description:"test position. Defaults to entity's current origin"}]},{_id:1487,functionName:"GetFinalPathPos",returnValue:"vector",referenceVariable:"",section:"AI",access:"Server",description:"Get the last position in the path",example:null,variables:[]},{_id:1488,functionName:"GetFireMode",returnValue:"string",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns the firemode",example:"soldier GetFireMode()",variables:[]},{_id:1489,functionName:"GetFixedNodeSafeVolume",returnValue:"entity",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Get this actor's fixed node safe volume.",example:"volume = self GetFixedNodeSafeVolume()",variables:[]},{_id:1490,functionName:"GetFlashBangedStrength",returnValue:"float",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Retrieves how strongly the actor was initially hit by a flashbang. 1.0 is full strength, 0.0 is none at all.",example:"flashedPercent = self GetFlashBangedStrength()",variables:[]},{_id:1491,functionName:"GetGoalVolume",returnValue:"entity",referenceVariable:"<sentient>",section:"ai",access:"Server",description:"Get this actor's goal volume.",example:"goalVolume = self GetGoalVolume()",variables:[]},{_id:1492,functionName:"GetGroundEntType",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Get the entity type of the 'ground' that the actor is on.",example:"self GetGroundEntType()",variables:[]},{_id:1493,functionName:"GetHitEntType",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Get the type of entity that the actor has hit. Can be 'hit', 'obstacle' or 'world'.",example:"self GetHitEntType()",variables:[]},{_id:1494,functionName:"GetHitYaw",returnValue:"float",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Get the direction in degrees that the player has hit an obstacle at. Returns an error if nothing was hit.",example:"self GetHitYaw()",variables:[]},{_id:1495,functionName:"GetIgnoreEnt",returnValue:"bool",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Returns if a specific sentient entity is ignored by this sentient entity or not",example:"if ( aiGuy GetIgnoreEnt( player ) )",variables:[{name:"sentient",mandatory:!0,description:"Another sentient entity"}]},{_id:1496,functionName:"GetNextFindBestCoverTime",returnValue:"int",referenceVariable:"",section:"AI",access:"Server",description:"Generates a new next find cover time",example:"behaviorTreeEntity.nextFindBestCoverTime = GetActorNextFindBestCoverTime( behaviorTreeEntity.engageMinDist, behaviorTreeEntity.engagemaxdist, behaviorTreeEntity.coversearchinterval )",variables:[{name:"minEngageDist",mandatory:!0,description:"Min engage enemy dist."},{name:"maxEngageDist",mandatory:!0,description:"Max engage enemy dist."},{name:"noEnemyInterval",mandatory:!0,description:"How often cover should be searched when without an enemy"}]},{_id:1497,functionName:"GetNodeOffsetAngles",returnValue:"vector",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Returns the angles the actor thinks the node is facing, this can contain additional rotation from the node's actual angles.",example:"self GetNodeOffsetAngles( self.node )",variables:[]},{_id:1498,functionName:"GetNodeOffsetPosition",returnValue:"vector",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Returns the position the actor thinks the node's origin is at, this can be offset from where the actual node's position in the world is.",example:"self GetNodeOffsetPosition( self.node )",variables:[]},{_id:1499,functionName:"GetOrientMode",returnValue:"string",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Set the orient mode of this actor.",example:"orientMode = randAlly GetOrientMode()",variables:[]},{_id:1500,functionName:"GetPathLength",returnValue:"int",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Gets the length of the path being used by this actor",example:"self GetPathLength()",variables:[]},{_id:1501,functionName:"GetPathMode",returnValue:"string",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Get the path mode of this actor.",example:"pathMode = randAlly GetPathMode()",variables:[]},{_id:1502,functionName:"GetPerfectInfo",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Forces the AI to become aware of this entity regardless of whether it can be seen or not.",example:"self GetPerfectInfo( get_players()[0] )",variables:[{name:"entity",mandatory:!0,description:"An entity to become aware of. Must be a sentient (i.e. AI or player)"},{name:"update sight",mandatory:!1,description:"If true then it will update the last seen position also."}]},{_id:1503,functionName:"GetPersonalThreatBias",returnValue:"int",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"return the personal threat bias for this sentient versus the other sentient",example:"value = self GetPersonalThreatBias( self.enemy )",variables:[{name:"sentient",mandatory:!0,description:"Self"},{name:"enemy",mandatory:!0,description:"The enemy to get threat bias for"}]},{_id:1504,functionName:"GetReacquireNode",returnValue:"pathnode",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Gets the reacquire node of this actor.",example:"guy GetReacquireNode()",variables:[]},{_id:1505,functionName:"GetStealthSightValue",returnValue:"float",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Get the current stealth sight value for this sentient seeing another sentient (floating point from 0.0 to 1.0)",example:"aiGuy GetStealthSightValue( forOtherGuy )",variables:[{name:"otherSentient",mandatory:!0,description:"other sentient you want to get the value on this sentient for"}]},{_id:1506,functionName:"GetThreatBias",returnValue:"int",referenceVariable:"",section:"sentient",access:"Server",description:"Get threat bias of first group against second group",example:'GetThreatBias( "axis", "flanking_team" )',variables:[{name:"of group",mandatory:!0,description:"string) threat bias group for."},{name:"against group",mandatory:!0,description:"string) threat bias group against."}]},{_id:1507,functionName:"GetThreatBiasGroup",returnValue:"string",referenceVariable:"<entity>",section:"sentient",access:"Server",description:"Get the threat bias group of an AI or player",example:"GetThreatBiasGroup()",variables:[]},{_id:1508,functionName:"GetTurnExitYaw",returnValue:"float",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Predicts exit yaw vector using havok pathfinding.",example:null,variables:[]},{_id:1509,functionName:"GrenadeThrow",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Throw a grenade. CheckGrenadeThrowPos() or CheckGrenadeThrow() must be called first.",example:"self ThrowGrenade()",variables:[]},{_id:1510,functionName:"HasPath",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns true/false if actor has a path",example:"self HasPAth()",variables:[]},{_id:1511,functionName:"HasValidInterrupt",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Return true if there is a valid interrupt with the given name alive on the current server frame.",example:'if ( entity HasValidInterrupt("pain") )',variables:[{name:"interrupt name",mandatory:!0,description:"The name of the interrupt"}]},{_id:1512,functionName:"IsActorShooting",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Checks whether this entity is an ai is shooting",example:"if ( meanGuy IsActorShooting() ) ...",variables:[{name:"entity",mandatory:!0,description:"An actor"}]},{_id:1513,functionName:"IsApproachingGoal",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns true/false if actor at the goal or approaching the goal.",example:"self IsApproachingGoal()",variables:[]},{_id:1514,functionName:"IsAtCoverNode",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns true/false if actor is at cover node. (exposed node is considered as covernode)",example:"self IsAtCoverNode()",variables:[]},{_id:1515,functionName:"IsAtCoverNodeStrict",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns true/false if actor is at cover node. (exposed node is not considered as covernode)",example:"self IsAtCoverNode()",variables:[]},{_id:1516,functionName:"IsAtGoal",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:'returns true/false if actor has at/reached its current goal, similar to waiting for "goal" notify.',example:"self IsAtGoal()",variables:[]},{_id:1517,functionName:"IsBadGuy",returnValue:"bool",referenceVariable:"<entity>",section:"AI",access:"Server",description:"Returns true if the sentient is on the bad guy team (not 'allies', not 'neutral').",example:"if ( ai IsBadGuy() )",variables:[]},{_id:1518,functionName:"IsCoverValid",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Return true if the passed in node is a valid cover node.",example:"if( self IsCoverValid( pathnode ) )",variables:[{name:"pathnode",mandatory:!0,description:"The pathnode to check for validity"}]},{_id:1519,functionName:"IsCurrentBTActionLooping",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Return true if there is an action running and its looping.",example:"if( behaviorTreeEntity IsCurrentBTActionLooping() )",variables:[]},{_id:1520,functionName:"IsDeflected",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Check if the actor has been deflected.",example:"self IsDeflected()",variables:[]},{_id:1521,functionName:"IsFlankedAtCoverNode",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns true/false if actor is at is flanked at cover node",example:"self IsFlankedAtCoverNode()",variables:[]},{_id:1522,functionName:"IsGrenadePosSafe",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Checks a grenade throw target position is safe.",example:"if ( self IsGrenadeThrowSafe( throwPos, 200 ) )",variables:[{name:"throw pos",mandatory:!0,description:"(vector) position to throw at"},{name:"radius",mandatory:!1,description:"(float) safety radius"}]},{_id:1523,functionName:"IsInAnyBadPlace",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Returns whether the AI is in a bad place.",example:"self IsInAnyBadPlace()",variables:[]},{_id:1524,functionName:"IsInGoal",returnValue:"bool",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Determine whether a given point is in the actor's current goal area",example:"if ( ai IsInGoal( node ) )",variables:[{name:"point",mandatory:!0,description:"which node to check."}]},{_id:1525,functionName:"IsInScriptedState",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Checks if actor is in a scripted state (animscripted, custom, negotiation)",example:"self isInScripteState()",variables:[]},{_id:1526,functionName:"IsKnownEnemyInRadius",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Checks if there is a known enemy in a radius for an AI.",example:"if ( self IsKnownEnemyInRadius( pos, radius ) ) ...",variables:[{name:"position",mandatory:!0,description:"center of radius to check."},{name:"radius",mandatory:!0,description:"."}]},{_id:1527,functionName:"IsKnownEnemyInVolume",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Checks if there is a known enemy in a volume for an AI.",example:"if ( self isKnownEnemyInVolume( volume ) )",variables:[{name:"volume",mandatory:!0,description:"volume entity to check in."}]},{_id:1528,functionName:"IsMoveSuppressed",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Checks whether this actor is in a suppressed state ( blocked by friendly fire ).",example:"while ( self IsMoveSuppressed() )...",variables:[]},{_id:1529,functionName:"IsNoTarget",returnValue:"bool",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"returns if the sentient is marked no target",example:"if ( self IsNoTarget() )",variables:[]},{_id:1530,functionName:"IsPathDirect",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Check whether the actor's current path is direct",example:"self IsPathDirect()",variables:[]},{_id:1531,functionName:"IsPosAtGoal",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns true/false if position is inside the current goal",example:"self IsPosAtGoal(position)",variables:[]},{_id:1532,functionName:"IsPosInClaimedLocation",returnValue:"bool",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"returns true/false if position is claimed by another sentient",example:"self IsPosInClaimedLocation( position )",variables:[]},{_id:1533,functionName:"IsSafeFromGrenade",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns true/false if actor is within a blast radius of a grenade.",example:"self IsSafeFromGrenade()",variables:[]},{_id:1534,functionName:"IsStanceAllowed",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Checks whether this actor can go to the given stance.",example:'if ( self IsStanceAllowed( "stand" ) )...',variables:[{name:"stance",mandatory:!0,description:"(string) A stance, can be 'prone', 'crouch', 'stand'."}]},{_id:1535,functionName:"IsSuppressed",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Checks whether this actor is in a suppressed state ( under fire ).",example:"while ( self IsSuppressed() )...",variables:[]},{_id:1536,functionName:"IsSuppressionWaiting",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Checks whether this actor is still doing suppression wait.",example:"while ( self IsSuppressionWaiting() )...",variables:[]},{_id:1537,functionName:"IsThreateningMyProtectEntity",returnValue:"void",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Returns true if the enemy is currently threatening my protect entity.",example:"if ( self IsThreateningMyProtectEntity( self.enemy ) )",variables:[{name:"target",mandatory:!0,description:"(sentient) The sentient to check."}]},{_id:1538,functionName:"Knockback",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Turn knockback on and off for an actor",example:"self Knockback( true )",variables:[{name:"true/false",mandatory:!0,description:"if true, actor affected by knockback"}]},{_id:1539,functionName:"LastKnownPos",returnValue:"vector",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Return the last known pos of an AI.",example:"if ( self lastKnownPos( player ) )",variables:[{name:"target",mandatory:!0,description:"(sentient) The sentient to check."}]},{_id:1540,functionName:"LastKnownTime",returnValue:"int",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Return the last time an AI was aware of target. Includes visibility and ai events like footstep, gunshot etc.",example:"if( self lastKnownTime( player ) )",variables:[{name:"target",mandatory:!0,description:"(sentient) The sentient to check."}]},{_id:1541,functionName:"LerpPosition",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Interpolate an actor's position, and angles.",example:"self LerpPosition( entry['origin'], entry['angles'] )",variables:[{name:"origin",mandatory:!0,description:"vector) the position to interpolate to."},{name:"angles",mandatory:!0,description:"vector) the angles to interpolate to."}]},{_id:1542,functionName:"LookAt",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Specify a world point for the bot to look towards every frame",example:"self BotAtPoint( (0, 0, 0 ) )",variables:[{name:"position",mandatory:!0,description:"The world point to look at"}]},{_id:1543,functionName:"LookDirection",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Specify a fixed vector for the bot to look in",example:"self BotSetLookAngles( ( 1, 0, 0 ) )",variables:[{name:"dir",mandatory:!0,description:"The vector of the direction to look in. Does not need to be normalized"}]},{_id:1544,functionName:"LookTowards",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Set a fixed vector for the bot to look in relative to a world point",example:"self BotSetLookAnglesFromPoint( ( 0, 0, 0 ) )",variables:[{name:"point",mandatory:!0,description:"The world point to look towards"}]},{_id:1545,functionName:"MayMoveFromPointToPoint",returnValue:"bool",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Check whether the actor can move from a given point to a given point. Does not check friendly fire and in goal radius unlike maymovetopoint",example:"if ( !self MayMoveFromPointToPoint( startPoint endPoint ) )...",variables:[{name:"start",mandatory:!0,description:"(point) start position."},{name:"end",mandatory:!0,description:"(point) end position."},{name:"check drop",mandatory:!1,description:"checks if the point would cause the AI to drop. Defaults to true."},{name:"check direct",mandatory:!1,description:"checks if there are no obstructions between actor origin and <Position>."}]},{_id:1546,functionName:"MayMoveToPoint",returnValue:"bool",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Check whether the actor can move to a given point.",example:"if ( !self MayMoveToPoint( endPoint ) )...",variables:[{name:"position",mandatory:!0,description:"(point) The position that the actor may be able to move to."},{name:"check drop",mandatory:!1,description:"checks if the point would cause the AI to drop. Defaults to true."},{name:"check direct",mandatory:!1,description:"checks if there are no obstructions between actor origin and <Position>."}]},{_id:1547,functionName:"Melee",returnValue:"entity",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Makes this actor melee attack. Returns the entity hit, if any.",example:"guy Melee()",variables:[{name:"direction",mandatory:!1,description:"direction to attack, if not specified, uses direction to current enemy."}]},{_id:1548,functionName:"MeleeWithOffset",returnValue:"entity",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Makes this actor melee attack. Returns the entity hit, if any.",example:"guy MeleeWithOffset( (0,0,32) )",variables:[{name:"offset",mandatory:!0,description:"A vector offset added to the actor's eye position from which to start the melee trace."}]},{_id:1549,functionName:"MoveDirection",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Sets the direction the bot will move towards",example:"self BotSetMoveAngle( ( 1, 0, 0 ) )",variables:[{name:"dir",mandatory:!0,description:"The vector of the direction the bot should move"}]},{_id:1550,functionName:"MoveTowards",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Set the bot's move angle relative to a point in the world",example:"self BotSetMoveAngleFromPoint( ( 0, 0, 0 ) )",variables:[{name:"point",mandatory:!0,description:"The world point to move toward"}]},{_id:1551,functionName:"NearClaimNode",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Determine whether this actor is near its claim node.",example:"if ( ai NearClaimNode() )...",variables:[]},{_id:1552,functionName:"NearClaimNodeAndAngle",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Determine whether this actor is near its claim node and nearly matches the angle.",example:"if ( ai NearClaimNodeAndAngle() )...",variables:[]},{_id:1553,functionName:"NearNode",returnValue:"bool",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Determine whether this actor is near to a given path node.",example:"if ( ai NearNode( node ) )...",variables:[{name:"node",mandatory:!0,description:"The path node to check."}]},{_id:1554,functionName:"OrientMode",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set the orient mode of this actor.",example:'randAlly OrientMode("face direction", player.origin-randAlly.origin )',variables:[{name:"orient mode",mandatory:!0,description:"(const string) OrientMode must be 'face angle', 'face current', 'face direction', 'face enemy', 'face enemy or motion', 'face goal', 'face motion', 'face point', or 'face default'"},{name:"face angle",mandatory:!1,description:"(float) The yaw angle to face if orient mode is 'face angle'"},{name:"direction vector",mandatory:!1,description:"(vector) The direction vector to face if orient mode is 'face direction'"},{name:"face position",mandatory:!1,description:"(vector) The point to face if orient mode is 'face point'"}]},{_id:1555,functionName:"PathMode",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Set the path mode of this actor.",example:'randAlly PathMode("dont move")',variables:[{name:"path mode",mandatory:!0,description:"(const string) PathMode must be 'dont move', 'move allowed', or 'move delayed'"},{name:"clear path",mandatory:!1,description:"(integer) 1 to clear path"},{name:"path delay",mandatory:!1,description:"(float) Amount of time (seconds) to wait if path mode is 'move delayed'"}]},{_id:1556,functionName:"PickUpGrenade",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Pick up a grenade",example:"self PickUpGrenade()",variables:[]},{_id:1557,functionName:"PredictArrival",returnValue:"string[]",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Predicts the arrival direction vector using havok corner predictor.",example:null,variables:[]},{_id:1558,functionName:"PredictExit",returnValue:"string[]",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Predicts the exit direction vector using havok corner predictor.",example:"predictedLookAheadInfo = self PredictExit()",variables:[]},{_id:1559,functionName:"PredictPath",returnValue:"string[]",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Predicts the path to look for upcoming corner using havok corner predictor.",example:"predictedLookAheadInfo = self PredictPath()",variables:[]},{_id:1560,functionName:"PushActors",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Set whether this actor can push other actors(enables colliding with other actors). Don't call this unless you know what you are doing.",example:"entity PushActors( true )",variables:[{name:"can push actors",mandatory:!0,description:"bool) True if this actor can push other actors."}]},{_id:1561,functionName:"PushPlayer",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set whether this character can push the player. Don't call this unless you know what you are doing.",example:"level.elder PushPlayer( true )",variables:[{name:"can push player",mandatory:!0,description:"bool) True if this character can push the player."}]},{_id:1562,functionName:"ReacquireMove",returnValue:"bool",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Start the reaquire move",example:null,variables:[]},{_id:1563,functionName:"ReacquireStep",returnValue:"vector",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Do side step move to safe place left or right while facing enemy.",example:"reacquirePos = entity ReacquireStep( step_size )",variables:[{name:"dist",mandatory:!0,description:"floating point number) amount to side step left or right"}]},{_id:1564,functionName:"RemoveSentientEventListener",returnValue:"void",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"De-Registers entity to listen to a specific event. if event is undefined, entity will stop listening to all the evnets.",example:'self RemoveSentientEventListener("bulletwhizby")',variables:[{name:"event",mandatory:!1,description:"The event name"}]},{_id:1565,functionName:"ResetVisibilityCacheWithinRadius",returnValue:"void",referenceVariable:"",section:"AI",access:"Server",description:"Reset the viscache for sentients within the specified radius",example:"ResetVisibilityCacheWithinRadius(origin, 500)",variables:[{name:"origin",mandatory:!0,description:"Center of reset bounds"},{name:"radius",mandatory:!0,description:"Distance around the origin to scan for sentients"}]},{_id:1566,functionName:"SeeRecently",returnValue:"bool",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Check to see if the AI saw the given sentient in the past <time>. If called on a non-sentient, just does a cansee check",example:"if( self SeeRecently( player ) )",variables:[{name:"target",mandatory:!0,description:"(entity) The entity to check."},{name:"time",mandatory:!0,description:"(int) seconds."}]},{_id:1567,functionName:"SetEntityOwner",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Set an entity as the AI's owner. The owner will never be targeted.",example:"self SetEntityOwner( vehicle_entity )",variables:[{name:"entity",mandatory:!0,description:"An entity for owner."}]},{_id:1568,functionName:"SetEntityTarget",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set an entity as the AI's target. This is for special cases only. Do not set AI or player targets with this.",example:'self SetEntityTarget( vehicle_entity, 0.7, "tag_head" )',variables:[{name:"entity",mandatory:!0,description:"An entity to target (cannot be server only entity)."},{name:"threat",mandatory:!1,description:"A fraction of maximum possible threat an AI can have. Must be in 0 to 1 range. Defaults to 1."},{name:"tag name",mandatory:!1,description:'Tag to aim/shoot at on this entity. Defaults to tag_eye for actors/players".'}]},{_id:1569,functionName:"SetFixedNodeSafeVolume",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set this actor's fixed node safe volume.",example:"self SetFixedNodeSafeVolume( volume )",variables:[{name:"volume entity",mandatory:!0,description:"entity) The safe volume entity."}]},{_id:1570,functionName:"SetFlashBanged",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Sets whether an actor is under a flashbang effect.",example:"self SetFlashBanged( true, 0.8 )",variables:[{name:"flashed",mandatory:!0,description:"Whether or not the actor is under the affect of a flashbang."},{name:"strength",mandatory:!1,description:"If actor is flashed, how severely they were initially affected. Between 0.0 and 1.0 (full strength)."}]},{_id:1571,functionName:"SetFlashbangImmunity",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Sets whether an actor is succeptable to flashbangs.",example:"level.suicideguy SetFlashbangImmunity( true )",variables:[{name:"immune",mandatory:!0,description:"If the actor can be affected by flashbangs."}]},{_id:1572,functionName:"SetFreeCameraLockOnAllowed",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Sets whether the ai is allowed to be locked onto in the demo free camera",example:null,variables:[{name:"allowed",mandatory:!0,description:"boolean of whether it is allowed"}]},{_id:1573,functionName:"SetGoal",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Set this actor's goal. Any of the above function name will work. They all call into SetGoal function internally.",example:"self SetGoal( node )",variables:[{name:"pos",mandatory:!0,description:"<node>/<entity>/<volume>"},{name:"forced",mandatory:!1,description:"bool) should go directly to this pos/node/entity. Forced means AI will get within approx 4 units of the entity."},{name:"goalradius",mandatory:!1,description:"radius of the goal. Applicable for entity and position/node and not the volume or forcedGoal."},{name:"goalheight",mandatory:!1,description:"height of the goal. Applicable for entity and position/node and not the volume or forcedGoal."}]},{_id:1574,functionName:"SetGoalEntity",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set this actor's goal. Any of the above function name will work. They all call into SetGoal function internally.",example:"self SetGoal( node )",variables:[{name:"pos",mandatory:!0,description:"<node>/<entity>/<volume>"},{name:"forced",mandatory:!1,description:"bool) should go directly to this pos/node/entity. Forced means AI will get within approx 4 units of the entity."},{name:"goalradius",mandatory:!1,description:"radius of the goal. Applicable for entity and position/node and not the volume or forcedGoal."},{name:"goalheight",mandatory:!1,description:"height of the goal. Applicable for entity and position/node and not the volume or forcedGoal."}]},{_id:1575,functionName:"SetGoalNode",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set this actor's goal. Any of the above function name will work. They all call into SetGoal function internally.",example:"self SetGoal( node )",variables:[{name:"pos",mandatory:!0,description:"<node>/<entity>/<volume>"},{name:"forced",mandatory:!1,description:"bool) should go directly to this pos/node/entity. Forced means AI will get within approx 4 units of the entity."},{name:"goalradius",mandatory:!1,description:"radius of the goal. Applicable for entity and position/node and not the volume or forcedGoal."},{name:"goalheight",mandatory:!1,description:"height of the goal. Applicable for entity and position/node and not the volume or forcedGoal."}]},{_id:1576,functionName:"SetGoalPos",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set this actor's goal. Any of the above function name will work. They all call into SetGoal function internally.",example:"self SetGoal( node )",variables:[{name:"pos",mandatory:!0,description:"<node>/<entity>/<volume>"},{name:"forced",mandatory:!1,description:"bool) should go directly to this pos/node/entity. Forced means AI will get within approx 4 units of the entity."},{name:"goalradius",mandatory:!1,description:"radius of the goal. Applicable for entity and position/node and not the volume or forcedGoal."},{name:"goalheight",mandatory:!1,description:"height of the goal. Applicable for entity and position/node and not the volume or forcedGoal."}]},{_id:1577,functionName:"SetGoalVolume",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set this actor's goal. Any of the above function name will work. They all call into SetGoal function internally.",example:"self SetGoal( node )",variables:[{name:"pos",mandatory:!0,description:"<node>/<entity>/<volume>"},{name:"forced",mandatory:!1,description:"bool) should go directly to this pos/node/entity. Forced means AI will get within approx 4 units of the entity."},{name:"goalradius",mandatory:!1,description:"radius of the goal. Applicable for entity and position/node and not the volume or forcedGoal."},{name:"goalheight",mandatory:!1,description:"height of the goal. Applicable for entity and position/node and not the volume or forcedGoal."}]},{_id:1578,functionName:"SetGoalVolumeAuto",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Set this actor's goal. Any of the above function name will work. They all call into SetGoal function internally.",example:"self SetGoal( node )",variables:[{name:"pos",mandatory:!0,description:"<node>/<entity>/<volume>"},{name:"forced",mandatory:!1,description:"bool) should go directly to this pos/node/entity. Forced means AI will get within approx 4 units of the entity."},{name:"goalradius",mandatory:!1,description:"radius of the goal. Applicable for entity and position/node and not the volume or forcedGoal."},{name:"goalheight",mandatory:!1,description:"height of the goal. Applicable for entity and position/node and not the volume or forcedGoal."}]},{_id:1579,functionName:"SetIgnoreEnt",returnValue:"void",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Set a sentient entity to ignore another specific sentient entity or not",example:"aiGuy SetIgnoreEnt( player, true )",variables:[{name:"sentient",mandatory:!0,description:"Another sentient entity"},{name:"ignored",mandatory:!0,description:"true/false"}]},{_id:1580,functionName:"SetIgnoreMeGroup",returnValue:"void",referenceVariable:"",section:"sentient",access:"Server",description:"Make first group ignored by second group",example:'SetIgnoreMeGroup( "flanking_team", "axis" )',variables:[{name:"ignored group",mandatory:!0,description:"string) ignored group."},{name:"ignoring group",mandatory:!0,description:"string) ignoring group."}]},{_id:1581,functionName:"SetPersonalIgnore",returnValue:"void",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"self will not pick enemy as target for the duration",example:"self SetPersonalIgnore( self.enemy, 5 )",variables:[{name:"sentient",mandatory:!0,description:"Self"},{name:"enemy",mandatory:!0,description:"The enemy to set threat bias for"},{name:"duration",mandatory:!1,description:"How long this threat bias lasts in seconds"}]},{_id:1582,functionName:"SetPersonalThreatBias",returnValue:"void",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Sets a personal threat bias for this sentient versus the other sentient. It lasts for the given duration.",example:"self SetPersonalThreatBias( self.enemy, -1000 )",variables:[{name:"sentient",mandatory:!0,description:"Self"},{name:"enemy",mandatory:!0,description:"The enemy to set threat bias for"},{name:"threatBias",mandatory:!0,description:"The threat bias amount"},{name:"duration",mandatory:!1,description:"How long this threat bias lasts in seconds"}]},{_id:1583,functionName:"SetPhysParams",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Sets the collision bounds for an actor.",example:"self setPhysParams( 15, 0, 72 )",variables:[{name:"radius",mandatory:!0,description:"size of the actor."},{name:"minsz",mandatory:!0,description:"min height of the actor."},{name:"maxsz",mandatory:!0,description:"max height of the actor."}]},{_id:1584,functionName:"SetPitchOrient",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Set pitch orientation",example:"self setPitchOrient()",variables:[]},{_id:1585,functionName:"SetPotentialThreat",returnValue:"void",referenceVariable:"<entity>",section:"ai",access:"Server",description:"In non-combat situations. This is mostly useful for friendlies.",example:"self SetPotentialThreat( 90 )",variables:[{name:"dir",mandatory:!0,description:"direction of the threat. This is the angle from which the NPC should expect danger"}]},{_id:1586,functionName:"SetRepairPaths",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"True allows havok to repath automatically if the AI moves off their predefined path.",example:"self SetRepairPaths( true )",variables:[{name:"on_off",mandatory:!0,description:"true to enable repair paths, false otherwise"}]},{_id:1587,functionName:"SetStairsExitTransform",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Sets the base transform for the exit stairs animation using the current position in the looping anim",example:"self SetStairsExitTransform()",variables:[]},{_id:1588,functionName:"SetStealthSight",returnValue:"void",referenceVariable:"",section:"AI",access:"Server",description:"Set the parameters for given awarenesslevel of stealth sight when active on an sentient",example:'SetStealthSight( "high_alert", 2, 1, 10, 200, 1000 )',variables:[{name:"awareness",mandatory:!0,description:'"unaware", "low_alert", "high_alert", or "combat"'},{name:"timeDecay",mandatory:!0,description:"float value of seconds stealth sight takes to fall off completely (0 for never/infinite)"},{name:"timeDistMin",mandatory:!0,description:"float value of seconds stealth sight takes to grow completely at min range (0 for never/infinite)"},{name:"timeDistMax",mandatory:!0,description:"float value of seconds stealth sight takes to grow completely at max range (0 for never/infinite)"},{name:"distMin",mandatory:!0,description:"float value of the min distance"},{name:"distMax",mandatory:!0,description:"float value of the max distance"},{name:"extendSight",mandatory:!1,description:"indicates of sight continues beyond max range at the max rate"}]},{_id:1589,functionName:"SetStealthSightAwareness",returnValue:"void",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Set the current stealth sight awareness state for this sentient",example:'aiGuy SetStealthSightAwareness( "unaware", true )',variables:[{name:"awareness",mandatory:!1,description:'"unaware", "low_alert", "high_alert", "combat", or undefined to disable it (default disabled)'},{name:"decayEnabled",mandatory:!1,description:"if true stealth sight will decay when other sentient is not in sight (default true)"}]},{_id:1590,functionName:"SetStealthSightValue",returnValue:"void",referenceVariable:"<sentient>",section:"AI",access:"Server",description:"Set the current stealth sight value for this sentient seeing another sentient (floating point from 0.0 to 1.0)",example:"aiGuy SetStealthSightValue( forOtherGuy, 0.5 )",variables:[{name:"otherSentient",mandatory:!0,description:"other sentient you want to set the value on this sentient for"},{name:"newValue",mandatory:!0,description:"The new stealth sight value"}]},{_id:1591,functionName:"SetSteeringMode",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:'Sets the steering mode for the actor. Valid modes are "normal steering", "slow steering", "vignette steering".',example:'self SetSteeringMode( "slow steering" )',variables:[{name:"steering mode",mandatory:!0,description:"Mode to set."}]},{_id:1592,functionName:"SetTalkToSpecies",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Sets the species this AI can share enemy information with.",example:'SetTalkToSpecies( "dog", "human',variables:[{name:"species",mandatory:!1,description:'list of species, if not specified, makes this AI talk with no one; use "all" to talk with all species'}]},{_id:1593,functionName:"SetThreatBias",returnValue:"void",referenceVariable:"",section:"sentient",access:"Server",description:"Set threat bias of second group against first group",example:'SetThreatBias( "axis", "flanking_team", 120 )',variables:[{name:"against group",mandatory:!0,description:"(string) threat bias group against."},{name:"for group",mandatory:!0,description:"(string) threat bias group for."},{name:"threat bias",mandatory:!0,description:"(int) threat bias value."}]},{_id:1594,functionName:"SetThreatBiasAgainstAll",returnValue:"void",referenceVariable:"",section:"sentient",access:"Server",description:"Set the threatbias a group has against all others",example:'SetThreatBiasAgainstAll( "flanking_team", 120 )',variables:[{name:"group",mandatory:!0,description:"(string) threat bias group name."},{name:"value",mandatory:!0,description:"(int) threat bias value."}]},{_id:1595,functionName:"SetThreatBiasGroup",returnValue:"void",referenceVariable:"<entity>",section:"sentient",access:"Server",description:"Set or clear threat bias group of an AI or player",example:'SetThreatBiasGroup( "flanking_team" )',variables:[{name:"threat_bias_group",mandatory:!1,description:"string) threat bias group name. If none, remove actor from current threat bias group"}]},{_id:1596,functionName:"Shoot",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Makes this actor shoot.",example:"guy shoot()",variables:[{name:"accuracy modifier",mandatory:!1,description:"(floating point number)"},{name:"shoot override vector",mandatory:!1,description:"(vector) The shoot vector"}]},{_id:1597,functionName:"ShouldFaceMotion",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Determines if the AI should face the motion direction. Use self.faceMotion instead of this except when the AI is just beginning to move.",example:"self ShouldFaceMotion()",variables:[]},{_id:1598,functionName:"ShouldHoldGroundAgainstEnemy",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Return true if enemy is within pathEnemyFightDist.",example:"if( behaviorTreeEntity ShouldHoldGroundAgainstEnemy() )",variables:[]},{_id:1599,functionName:"ShouldStartArrival",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns true/false if actor should start arriving at given node",example:"self ShouldStartArrival()",variables:[]},{_id:1600,functionName:"ShouldStartTraversal",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns true/false if actor should start traversal",example:"self ShouldStartTraversal()",variables:[]},{_id:1601,functionName:"ShouldUseCoverNode",returnValue:"bool",referenceVariable:"<actor>",section:"AI",access:"Server",description:"returns true/false if actor is at is safe at cover node and use it as a cover",example:"self ShouldUseCoverNode()",variables:[]},{_id:1602,functionName:"StartCoverArrival",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Runs cover arrival animscript on an actor.",example:"soldier StartCoverArrival( pos, 45 )",variables:[{name:"start pos",mandatory:!0,description:"the offset to start the arrival animation from"},{name:"yaw angles",mandatory:!0,description:"the arrival angle"}]},{_id:1603,functionName:"StopLook",returnValue:"void",referenceVariable:"<bot>",section:"AI",access:"Server",description:"Look angles will not be set on the command sent to the server.",example:"self BotLookNone()",variables:[]},{_id:1604,functionName:"Teleport",returnValue:"int",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Teleport the actor to a new position with the given origin and angles.",example:"self Teleport( org, angles )",variables:[{name:"position",mandatory:!0,description:"(point) The actor's new position."},{name:"angles",mandatory:!1,description:"(vector) The actor's new angles."}]},{_id:1605,functionName:"ThreatBiasGroupExists",returnValue:"bool",referenceVariable:"",section:"sentient",access:"Server",description:"Check if a threat bias group exists",example:'ThreatBiasGroupExists( "flanking_team" )',variables:[{name:"name",mandatory:!0,description:"threat bias group name."}]},{_id:1606,functionName:"TraverseMode",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Set the traverse mode of this actor.",example:'self TraverseMode( "nogravity" )',variables:[{name:"traverse mode",mandatory:!0,description:"(const string) Possible traverse modes are 'gravity', 'nogravity', or 'noclip'"}]},{_id:1607,functionName:"TrimPathtoAttack",returnValue:"void",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Trims the path to attack.",example:null,variables:[]},{_id:1608,functionName:"UseCoverNode",returnValue:"bool",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Tells this actor to use the given cover node. This is invalid if the actor's keepclaimednode flag is set. Returns true or false depending on whether the actor can claim the node.",example:"guy UseCoverNode( covernode )",variables:[{name:"path node",mandatory:!0,description:"The path node to use as cover"}]},{_id:1609,functionName:"UsePosition",returnValue:"void",referenceVariable:"<actor>",section:"AI",access:"Server",description:"Override where the actor should run to. This overrides the goal pos and the claimed node.",example:"self UsePosition( pos )",variables:[{name:"position",mandatory:!0,description:"The position for the actor to run to."},{name:"arrivalfinalposition",mandatory:!1,description:"The arrivalfinalposition if this is an arrival."}]},{_id:1610,functionName:"UseReacquireNode",returnValue:"bool",referenceVariable:"<actor>",section:"ai",access:"Server",description:"Use the given reacquire node.",example:null,variables:[{name:"node",mandatory:!0,description:"path node) the node to use."}]},{_id:1611,functionName:"AddBoltedFXExclusionVolume",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:'Create a bolted volume that will exclude FX that are flagged as "Respect Exclusion Volumes". Returns volume ID.',example:"volumeID = AddBoltedFXExclusionVolume( 0, entity, tag_origin, (10, 10, 10) )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client to create the volume on."},{name:"entity",mandatory:!0,description:"The entity to attach the volume to."},{name:"tag name",mandatory:!0,description:"The tag to use as the volume's origin."},{name:"half extents",mandatory:!0,description:"The half extents of the volume."},{name:"offset",mandatory:!1,description:"An offset from the tag name for the volume's origin; default is 0 0 0."}]},{_id:1612,functionName:"AddDuplicateRenderOption",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Add a duplicate render option for the entity",example:'myEnt AddDuplicateRenderOption( DR_TYPE_FRAMEBUFFER, DR_METHOD_THERMAL_MATERIAL, DR_CULL_ALWAYS )myEnt AddDuplicateRenderOption( DR_TYPE_OFFSCREEN, DR_METHOD_CUSTOM_MATERIAL, DR_CULL_NEVER, mapped_material_id(player,"gfx_my_material_2") )',variables:[{name:"dupeType",mandatory:!0,description:"this is one of [DR_TYPE_FRAMEBUFFER|DR_TYPE_FRAMEBUFFER_DUPLICATE|DR_TYPE_OFFSCREEN], as defined in _duplicaterender.csc. Sets the duplicate type of this call"},{name:"dupeMethod",mandatory:!0,description:"this is one of [DR_CULL_ALWAYS|DR_CULL_NEVER], as defined in _duplicaterender.csc. Sets the render method of this call"},{name:"mappedMaterialId",mandatory:!1,description:"This is the mapped material id"},{name:"dupeCull",mandatory:!1,description:"this is one of [DR_METHOD_OFF|DR_METHOD_DEFAULT_MATERIAL|DR_METHOD_THERMAL_MATERIAL|DR_METHOD_CUSTOM_MATERIAL|DR_METHOD_FORCE_CUSTOM_MATERIAL], as defined in _duplicaterender.csc. Sets the render method of this call"}]},{_id:1613,functionName:"AddFXExclusionVolume",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:'Create a volume that will exclude FX that are flagged as "Respect Exclusion Volumes". Returns volume ID.',example:"volumeID = AddFXExclusionVolume( 0, (0,0,0), (0, 45, 0), (10, 10, 10) )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client to create the volume on."},{name:"center",mandatory:!0,description:"The center of the volume."},{name:"angles",mandatory:!0,description:"The rotation angles of the volume."},{name:"half extents",mandatory:!0,description:"The half extents of the volume."}]},{_id:1614,functionName:"BeamKill",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Kill the previously launched beam.",example:"BeamKill(0, beamHandle)",variables:[{name:"localClientNum",mandatory:!0,description:"Local client on which to play the beam"},{name:"beam handle",mandatory:!0,description:"The beam handle"}]},{_id:1615,functionName:"BeamLaunch",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:"Launch this beam and return the internal handle.",example:"handle = BeamLaunch(0, launcher, launcherTag, target, targetTag, beam)",variables:[{name:"localClientNum",mandatory:!0,description:"Local client on which to play the beam"},{name:"entity from",mandatory:!0,description:"The originating entity"},{name:"tag from",mandatory:!0,description:"The tag on the originating entity to start from"},{name:"entity to",mandatory:!0,description:"The target entity"},{name:"tag to",mandatory:!0,description:"The target tag"},{name:"beam",mandatory:!0,description:"The beam"}]},{_id:1616,functionName:"BulletTracer",returnValue:"void",referenceVariable:"",section:"weapons",access:"Client",description:"creates a bullet tracer from the start to end point",example:"BulletTracer(self.origin, target.origin)",variables:[{name:"start",mandatory:!0,description:"The starting point bullet tracer"},{name:"end",mandatory:!0,description:"The end point bullet tracer"}]},{_id:1617,functionName:"CaptureFrame",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Captures the current frame into the given code image - he image had to be already created with CreateSceneCodeImage()",example:'CaptureFrame( self.localClientNum, "freezeFrame" )',variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"name",mandatory:!0,description:"The code image name"}]},{_id:1618,functionName:"ClearExtraCam",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Finds the extracam associated with an entity and removes it",example:"cameraEnt ClearExtraCam()",variables:[]},{_id:1619,functionName:"CreateSceneCodeImage",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Creates a scene size code image",example:'CreateSceneCodeImage( self.localClientNum, "freezeFrame" )',variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"name",mandatory:!0,description:"A unique name"}]},{_id:1620,functionName:"CodePlayPostFXbundle",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Displays a postfx on the screen",example:'entity PlayPostfxBundle( "myBundle" )',variables:[]},{_id:1621,functionName:"CodeStopPostFXbundle",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Ends a postfx",example:"entity StopPostfxBundle( 2 )",variables:[]},{_id:1622,functionName:"DeleteFX",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Delete a spawned effect.",example:"deletefx (0, fxRef)",variables:[{name:"localClientNum",mandatory:!0,description:"client on which to spawn effect."},{name:"effect id",mandatory:!0,description:"The effect id returned by spawnfx"},{name:"deleteImmediate",mandatory:!1,description:"whether effect will be deleted immediately. Default is 1."}]},{_id:1623,functionName:"DisableDuplicateRendering",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Disables duplicate rendering for the entity",example:"entity DisableDuplicateRendering()",variables:[]},{_id:1624,functionName:"EnableFrontendLockedWeaponOverlay",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Enable or disable the draw of the locked gun postfx in script.",example:"entity EnableFrontendLockedWeaponOverlay( 0, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"enable",mandatory:!0,description:"0-disable 1-enable"}]},{_id:1625,functionName:"EnableFrontendStreamingOverlay",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Enable or disable the draw of an alternate draw mode for high detail entities marked to use alt draw",example:"entity EnableFrontendStreamingOverlay( 0, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"enable",mandatory:!0,description:"0-disable 1-enable"},{name:"extracam",mandatory:!1,description:"0-disable 1-enable - when enabled the overlay is drawn on extracam"}]},{_id:1626,functionName:"EnableFrontendTokenLockedWeaponOverlay",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Enable or disable the draw of the purchaseable gun postfx in script.",example:"entity EnableFrontendTokenLockedWeaponOverlay( 0, 0 )",variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"enable",mandatory:!0,description:"0-disable 1-enable"}]},{_id:1627,functionName:"EnableThermalDraw",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Enables or disables the drawing entities into the thermal buffer",example:"EnableThermalDraw( player.localClientNum, true )",variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"enable",mandatory:!0,description:"true/false"}]},{_id:1628,functionName:"EVEnable",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Enable or disable ev mode",example:"entity EVEnable( 1 )",variables:[{name:"enable",mandatory:!0,description:"bool value"}]},{_id:1629,functionName:"EvStatus",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:"returns the status of EV",example:"status = EVStatus( 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client to find the status of"}]},{_id:1630,functionName:"FindStaticModelIndex",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:"Returns an index of a static model whose origin matches the passed in position",example:"smodelIndex = FindStaticModelIndex()",variables:[{name:"vector pos",mandatory:!0,description:"The position to match to the static model origin or <string targetname> for the targetname of the static model"}]},{_id:1631,functionName:"FindStaticModelIndexArray",returnValue:"int[]",referenceVariable:"",section:"Gfx",access:"Client",description:"Returns an array indices of a static model whose name matches the passed in string",example:"smodelIndexArray = FindStaticModelIndex()",variables:[{name:"string targetname",mandatory:!0,description:"The targetname of the static model's"}]},{_id:1632,functionName:"FindVolumeDecalIndexArray",returnValue:"int[]",referenceVariable:"",section:"Gfx",access:"Client",description:"Returns an array indices of a volume decal whose targetname matches the passed in string",example:'vdIndexArray = FindVolumeDecalIndexArray( "foo" )',variables:[{name:"string targetname",mandatory:!0,description:"The targetname of the volume decal"}]},{_id:1633,functionName:"FreeCodeImage",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Frees a code image",example:'FreeCodeImage( self.localClientNum, "freezeFrame" )',variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"name",mandatory:!0,description:"A unique name"}]},{_id:1634,functionName:"GetCameraSpikeCamStatic",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:"Returns 1 if a client sees static on the camera-spike cam, 0 otherwise",example:"GetCameraSpikeCamStatic( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the camera-spike cam owner"}]},{_id:1635,functionName:"GetFXFromSurfaceTable",returnValue:"string",referenceVariable:"",section:"Gfx",access:"Client",description:"Returns the fx for a given surface type from the surfacefxtable.",example:"fx = GetFXFromSurfaceTable( fx_surface_table, surface_type )",variables:[{name:"surfacefxtable",mandatory:!0,description:"Surface fx table."},{name:"surface type",mandatory:!0,description:"Surface type"}]},{_id:1636,functionName:"GetServerVolumetricFogDensity",returnValue:"float",referenceVariable:"",section:"Gfx",access:"Client",description:"Get the density of server volumetric fog",example:null,variables:[{name:"localClientNum",mandatory:!0,description:"The local client number"}]},{_id:1637,functionName:"GetSurfaceStrings",returnValue:"string[]",referenceVariable:"",section:"Gfx",access:"Client",description:"Returns an array containing all the surface names",example:"surfaceStringArray = GetSurfaceStrings()",variables:[]},{_id:1638,functionName:"GetVisionSetNaked",returnValue:"string",referenceVariable:"",section:"Gfx",access:"Client",description:"Gets players' naked vision.",example:"GetVisionSetNaked( 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client which will have his vampire vision set changed"}]},{_id:1639,functionName:"GetWorldFogScriptID",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:"current active .fsi fog volumes script identity value -1 = global volume.",example:null,variables:[{name:"localClientNum",mandatory:!0,description:"the local client"}]},{_id:1640,functionName:"HideStaticModel",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Hide a static model",example:"HideStaticModel( model )",variables:[{name:"smodelIndex",mandatory:!0,description:"The index of the static model to toggle"}]},{_id:1641,functionName:"HideVolumeDecal",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Hide a static model",example:"HideStaticModel( model )",variables:[{name:"volume decal Index",mandatory:!0,description:"The index of the volume decal to toggle"}]},{_id:1642,functionName:"IGCActive",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Flags if an IGC is on or off",example:"IGCActive( 1, 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client on which the igc is running"},{name:"enable",mandatory:!0,description:"1-enables, 0-disables"}]},{_id:1643,functionName:"IsFXPlaying",returnValue:"bool",referenceVariable:"",section:"Gfx",access:"Client",description:"Return true if effect is still playing.",example:"IsFXPlaying ( fxId )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client the effect is playing on."},{name:"effect id",mandatory:!0,description:"The effect id returned by playFx"}]},{_id:1644,functionName:"IsIGCActive",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:"returns the status of EV",example:"status = IsIGCActive( 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client to find the status of"}]},{_id:1645,functionName:"IsStereoOn",returnValue:"bool",referenceVariable:"",section:"Gfx",access:"Client",description:"Returns true if the stereo is on",example:"isStereo = IsStereoOn()",variables:[]},{_id:1646,functionName:"KillFX",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Force kills a given fx.",example:"KillFX ( fxId )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client the effect is playing on."},{name:"effect id",mandatory:!0,description:"The effect id returned by playFx"}]},{_id:1647,functionName:"KillRadiantExploder",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Kill the specified Radiant exploder",example:'KillRadiantExploder( 0, "lights_on_exploder" )',variables:[{name:"localClientNum",mandatory:!0,description:"The local client to play the effect on"},{name:"exploderId",mandatory:!0,description:"The id of the exploder to be stopped."}]},{_id:1648,functionName:"MakeLight",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Create a light",example:"self MakeLight(1)",variables:[{name:"primaryLightIndex",mandatory:!0,description:"The Primary Light Index"}]},{_id:1649,functionName:"MapMaterialIndex",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:"Maps the material to an index",example:'index = MapMaterial(1, "mymaterial")',variables:[{name:"localClientNum",mandatory:!0,description:"Local client on which to map the material"},{name:"materialName",mandatory:!0,description:"Material to map"}]},{_id:1650,functionName:"MotionPulse_Enable",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Enable or disable the sitrep scan",example:"entity motionpulse_enable( false )",variables:[{name:"enable",mandatory:!0,description:"true to enable /false to disable"}]},{_id:1651,functionName:"MotionPulse_SetDesat",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the motion pulse desaturation level",example:"entity motionpulse_setdesatlevel( level )",variables:[{name:"level",mandatory:!0,description:"The desat level (float)"}]},{_id:1652,functionName:"MotionPulse_SetFadeOut",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the motion pulse fadeout",example:"entity MotionPulse_SetFadeOut( fadeout )",variables:[{name:"fadeout",mandatory:!0,description:"The fadeout (float)"}]},{_id:1653,functionName:"MotionPulse_SetFalloff",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the motion pulse falloff",example:"entity motionpulse_setfalloff( falloff )",variables:[{name:"falloff",mandatory:!0,description:"the falloff (float)"}]},{_id:1654,functionName:"MotionPulse_SetLineWidth",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the motion pulse line width",example:"entity motionpulse_setlinewidth( linewidth )",variables:[{name:"linewidth",mandatory:!0,description:"the line width (float)"}]},{_id:1655,functionName:"MotionPulse_SetOutline",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the motion pulse outline level",example:"entity motionpulse_setoutlinelevel( outlinelevel )",variables:[{name:"outlinelevel",mandatory:!0,description:"the outline level (float)"}]},{_id:1656,functionName:"MotionPulse_SetRadius",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the motion pulse radius",example:"entity motionpulse_setradius( radius )",variables:[{name:"radius",mandatory:!0,description:"the radius (float)"}]},{_id:1657,functionName:"MotionPulse_SetSolid",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the motion pulse solid level",example:"entity motionpulse_setsolidlevel( level )",variables:[{name:"level",mandatory:!0,description:"The solid level (float)"}]},{_id:1658,functionName:"OED_NightVision_Enable",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:null,example:"entity oed_nightvision_enable( false )",variables:[{name:"enable",mandatory:!0,description:"true/false"}]},{_id:1659,functionName:"OED_NightVision_Reset",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Reset nightvision for entity",example:"entity oed_nightvision_reset()",variables:[{name:"entity",mandatory:!0,description:"An entity"}]},{_id:1660,functionName:"OED_NightVision_SetTextureLevel",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the night vision texture level for the entity",example:"entity oed_nightvision_settexturelevel( level )",variables:[{name:"level",mandatory:!0,description:"The texture level (float)"}]},{_id:1661,functionName:"OED_SitRepScan_Enable",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Enable or disable the sitrep scan",example:"entity oed_sitpepscan_enable( 0 )",variables:[{name:"type",mandatory:!0,description:"0-disable 1-typeA 2-typeB"},{name:"AlphaType",mandatory:!1,description:"0-default 1-Alpha ( 0 by default )"}]},{_id:1662,functionName:"OED_SitRepScan_SetDesat",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the desaturation level for the sitrep scan",example:"entity oed_sitrepscan_setdesatlevel( level )",variables:[{name:"level",mandatory:!0,description:"the desat level (float)"},{name:"AlphaType",mandatory:!1,description:"0-default 1-Alpha ( 0 by default )"}]},{_id:1663,functionName:"OED_SitRepScan_SetFalloff",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the falloff for the sitrep scan",example:"entity oed_sitrepscan_setfalloff( falloff )",variables:[{name:"falloff",mandatory:!0,description:"The falloff (float)"},{name:"AlphaType",mandatory:!1,description:"0-default 1-Alpha ( 0 by default )"}]},{_id:1664,functionName:"OED_SitRepScan_SetLineWidth",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the line width for the sitrep scan",example:"entity oed_sitrepscan_setlinewidth( linewidth )",variables:[{name:"linewidth",mandatory:!0,description:"The line width (float)"},{name:"AlphaType",mandatory:!1,description:"0-default 1-Alpha ( 0 by default )"}]},{_id:1665,functionName:"OED_SitRepScan_SetOutline",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the outline level for the sitrep scan",example:"entity oed_sitrepscan_setoutlinelevel( outlinelevel )",variables:[{name:"outlinelevel",mandatory:!0,description:"The outline level (float)"},{name:"AlphaType",mandatory:!1,description:"0-default 1-Alpha ( 0 by default )"}]},{_id:1666,functionName:"OED_SitRepScan_SetRadius",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the radius for the sitrep scan",example:"entity oed_sitrepscan_setradius( radius )",variables:[{name:"radius",mandatory:!0,description:"The radius (float)"},{name:"AlphaType",mandatory:!1,description:"0-default 1-Alpha ( 0 by default )"}]},{_id:1667,functionName:"OED_SitRepScan_SetSolid",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Set the solid level for the sitrep scan",example:"entity oed_sitrepscan_setsolidlevel( level )",variables:[{name:"level",mandatory:!0,description:"the solid level (float)"},{name:"AlphaType",mandatory:!1,description:"0-default 1-Alpha ( 0 by default )"}]},{_id:1668,functionName:"PlayExtraCamXCam",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Plays an XCam on the extra cam associated with the entity starting at the current client time",example:'cameraEnt PlayExtraCamXCam( "ui_cam_ar_standard" )',variables:[{name:"xcam name",mandatory:!0,description:"The name of the xcam asset to play"},{name:"lerp_duration",mandatory:!1,description:"The duration to lerp the start of the xcam over"},{name:"camera_name",mandatory:!1,description:"The name of the sub camera from the XCam to play"},{name:"animation_name",mandatory:!1,description:"The name of the frame (notetrack) to play"},{name:"origin",mandatory:!1,description:"Base origin for the camera"},{name:"angles",mandatory:!1,description:"Base angles for the camera"},{name:"target",mandatory:!1,description:"If this xcam has model translation and rotation data, apply it to this entity."}]},{_id:1669,functionName:"PlayFXOnDynEnt",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:"Play this effect and return the internal handle.",example:"handle = PlayFXOnDynEnt( spark, lamp )",variables:[{name:"effect id",mandatory:!0,description:"The effect id returned by loadfx"},{name:"dynent",mandatory:!0,description:"The dyn entity to play the effect on"}]},{_id:1670,functionName:"PlayMainCamXCam",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Plays an XCam on the main camera associated with the player starting at the current client time",example:'PlayMainCamXCam( localClientNum, "ui_cam_ar_standard" )',variables:[{name:"localClientNum",mandatory:!0,description:"The local client"},{name:"xcam name",mandatory:!0,description:"The name of the xcam asset to play"},{name:"lerp_duration",mandatory:!1,description:"The duration to lerp the start of the xcam over"},{name:"camera_name",mandatory:!1,description:"The name of the sub camera from the XCam to play"},{name:"animation_name",mandatory:!1,description:"The name of the frame (notetrack) to play"},{name:"origin",mandatory:!1,description:"Base origin for the camera"},{name:"angles",mandatory:!1,description:"Base angles for the camera"},{name:"target",mandatory:!1,description:"If this xcam has model translation and rotation data, apply it to this entity."}]},{_id:1671,functionName:"PlayRadiantExploder",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Play the specified Radiant exploder",example:'PlayRadiantExploder( 0, "lights_on_exploder" )',variables:[{name:"localClientNum",mandatory:!0,description:"The local client to play the effect on"},{name:"exploderId",mandatory:!0,description:"The id of the exploder to be triggered."}]},{_id:1672,functionName:"PlayRenderOverrideBundle",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Applys a render override bundle to an entitys model",example:'entity PlayRenderOverrideBundle( "myBundle" )',variables:[]},{_id:1673,functionName:"PlayTagFXSet",returnValue:"int[]",referenceVariable:"",section:"Gfx",access:"Client",description:"Play a tagfx set on ajn entity. Do not specify loop fx",example:"PlayTagFXSet ( 0, self, smoke )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client on which to play the fx"},{name:"tagfxset",mandatory:!0,description:"The string name of the tag fx set"},{name:"entity",mandatory:!0,description:"The entity to play the effect on"}]},{_id:1674,functionName:"PlayViewmodelFX",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:null,example:null,variables:[{name:"local_client_num",mandatory:!0,description:"The client number"},{name:"name",mandatory:!0,description:"The name of the fx"},{name:"tag",mandatory:!0,description:"The tag to play on"}]},{_id:1675,functionName:"RandomFade",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Fade the level randomly",example:"entity randomfade( level )",variables:[{name:"level",mandatory:!0,description:"0 to disable, any other value to enable (float)"}]},{_id:1676,functionName:"RegisterRewindFX",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Registers an fx with the killcam rewind system",example:'RegisterRewindFX(local_client_num, "fxName")',variables:[{name:"local_client_num",mandatory:!0,description:"The client number"},{name:"name",mandatory:!0,description:"The name of the fx"}]},{_id:1677,functionName:"RemoveFXExclusionVolume",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Removes the given exclusion volume.",example:"RemoveFXExclusionVolume( 0, volumeID )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client to remove the volume from."},{name:"volumeID",mandatory:!0,description:"The volume to remove."}]},{_id:1678,functionName:"SetAllowXCamRightStickRotation",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Prevent or stop preventing right stick rotation on this xcam (the next playmaincamxcam resets this)",example:"SetAllowXCamRightStickRotation( 0, false )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client"},{name:"newValue",mandatory:!0,description:"True to allow, False, to disable right stick rotation"}]},{_id:1679,functionName:"SetArmPulse",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Sets arm pulse override values",example:"entity SetArmPulse( 2.0, 4, 3 )",variables:[]},{_id:1680,functionName:"SetArmPulsePosition",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Sets arm pulse override values",example:"entity SetArmPulsePosition( 0.5 )",variables:[]},{_id:1681,functionName:"SetCameraSpikeCamActive",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets whether a client's camera-spike cam is active.",example:"SetCameraSpikeCamActive( localClientNum, 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the extra cam owner"},{name:"active",mandatory:!0,description:"0 if inactive, 1 if active"}]},{_id:1682,functionName:"SetCameraSpikeCamAngles",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets the orientation of a client's extra cam.",example:"SetCameraSpikeCamAngles( localClientNum, angles )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the camera-spike cam owner"},{name:"angles",mandatory:!0,description:"New pitch, yaw, and roll of the camera-spike cam"}]},{_id:1683,functionName:"SetCameraSpikeCamEntity",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets an camera-spike cam entity for the client.",example:"CScr_SetCameraSpikeCamEntity( localClientNum, cameraSpike )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the extra cam owner"},{name:"entity",mandatory:!0,description:"Camera entity, or undefined"}]},{_id:1684,functionName:"SetCameraSpikeCamOrigin",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets the origin of a client's camera-spike cam",example:"SetCameraSpikeCamOrigin( localClientNum, origin )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the camera-spike cam owner"},{name:"origin",mandatory:!0,description:"New origin of the camera-spike cam"}]},{_id:1685,functionName:"SetCameraSpikeCamStatic",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets whether a client sees static on the camera-spike cam",example:"SetCameraSpikeCamStatic( localClientNum, 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"Client number of the camera-spike cam owner"},{name:"active",mandatory:!0,description:"0 if inactive, 1 if active"}]},{_id:1686,functionName:"SetClientVolumetricFog",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set the client volumetric fog properties",example:null,variables:[{name:"startDist",mandatory:!0,description:"The start distance of the volume"},{name:"halfwayDist",mandatory:!0,description:"The halfway distance of the volume"},{name:"halfwayHeight",mandatory:!0,description:"The halfway height of the volume"},{name:"baseHeight",mandatory:!0,description:"The base height of the volume"},{name:"red",mandatory:!0,description:"The red value"},{name:"green",mandatory:!0,description:"The green value"},{name:"blue",mandatory:!0,description:"The blue value"},{name:"fogColorScale",mandatory:!0,description:"The color scale of the fog"},{name:"sunFogColorR",mandatory:!1,description:"The sun fog red value"},{name:"sunFogColorG",mandatory:!1,description:"The sun fog green value"},{name:"sunFogColorB",mandatory:!1,description:"The sun fog blue value"},{name:"sunFogDirX",mandatory:!1,description:"The sun direction X value"},{name:"sunFogDirY",mandatory:!1,description:"The sun direction Y value"},{name:"sunFogDirZ",mandatory:!1,description:"The sun direction Z value"},{name:"sunFogStartAng",mandatory:!1,description:"Angle from the sun position where the sun fades in"},{name:"sunFogEndAng",mandatory:!1,description:"Angle from the sun position where the sun has faded out"},{name:"",mandatory:!1,description:""},{name:"fogMaxOpacity",mandatory:!1,description:"The maximum opacity of the fog as a value between 0 and 1"}]},{_id:1687,functionName:"SetExposureActiveBank",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set exposure volumes active bank bit mask.",example:"SetExposureActiveBank( localClientNum, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"the local client"},{name:"bank mask",mandatory:!0,description:"The new bank mask"}]},{_id:1688,functionName:"SetExposureIgnoreTeleport",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Always do fully adaptive exposure and ignore teleports",example:"SetExposureIgnoreTeleport( localClientNum, newVal )",variables:[{name:"localClientNum",mandatory:!0,description:"the local client"},{name:"enable",mandatory:!0,description:"Enable or disable the exposure always adapt flag"}]},{_id:1689,functionName:"SetExposureInstantSnap",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"snap exposure to base calculated probe value, ignore iris adaption and damping",example:"SetExposureInstantSnap( localClientNum, newVal )",variables:[{name:"localClientNum",mandatory:!0,description:"the local client"},{name:"enable",mandatory:!0,description:"Enable or disable the exposure snap"}]},{_id:1690,functionName:"SetExtraCam",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Activates the extra cam and sets the given entity as cam reference.",example:"cameraEnt SetExtraCam( 1, 640, 480 )",variables:[{name:"camera index",mandatory:!0,description:"which extra cam references this entity. Valid values are 0 - 3"},{name:"rendered width",mandatory:!1,description:"Width of the extra cam rendered target. The width will be calculated from the height if width is negative (keeping the aspect ration at 16"},{name:"rendered height",mandatory:!1,description:"Height of the extra cam rendered target. The height will be calculated from the width if height is negative (keeping the aspect ration at 16"}]},{_id:1691,functionName:"SetExtraCamFocalLength",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets the extra cam fov",example:"cameraEnt SetExtraCamFOV( 1, 65 )",variables:[{name:"camera index",mandatory:!0,description:"which extra cam references this entity. Valid values are 0 - 3"},{name:"fov",mandatory:!0,description:"camera fov"}]},{_id:1692,functionName:"SetFilterBitFlag",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set or clear the filter bit flag",example:"SetFilterBitFlag( self.localClientNum, 1, 10 )",variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"filterIndex",mandatory:!0,description:"Must be between 0 - 3"},{name:"bitIndex",mandatory:!0,description:"Must be between 0 - 31"},{name:"setOrClear",mandatory:!0,description:"Must be between 0 - 1"}]},{_id:1693,functionName:"SetFilterPassCodeTexture",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets a code texture for a filter pass - the tetxure has be to created beforehand",example:'SetFilterPassMaterial( self.localClientNum, 1, 12, 0, "myBundle")',variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"filterIndex",mandatory:!0,description:"Must be between 0 - 3"},{name:"passIndex",mandatory:!0,description:"Must be between 0 - 15"},{name:"texture Index",mandatory:!0,description:"Must be between 0 - 1"},{name:"texture name",mandatory:!0,description:"has to have been created by captureFrame() before - if empty string sets to null."}]},{_id:1694,functionName:"SetFilterPassConstant",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets the filter pass constant",example:"SetFilterPassConstant( self.localClientNum, 1, 12, 12, 2.5 )",variables:[{name:"filterIndex",mandatory:!0,description:"Must be between 0 - 3"},{name:"passIndex",mandatory:!0,description:"Must be between 0 - 16"},{name:"constantIndex",mandatory:!0,description:"Must be between 0 - 16"},{name:"value",mandatory:!0,description:"The value for the constant"}]},{_id:1695,functionName:"SetFilterPassEnabled",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets the filter pass enabled or disabled",example:"SetFilterPassEnabled( self.localClientNum, 1, 12, false)",variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"filterIndex",mandatory:!0,description:"Must be between 0 - 3"},{name:"passIndex",mandatory:!0,description:"Must be between 0 - 16"},{name:"passEnable",mandatory:!0,description:"true/false"},{name:"hdrFilter",mandatory:!1,description:" true/false - if true the filter is applied to the scene (HDR) otherwise will be applied after the LDT and dof (default false)"},{name:"firstPersonOnly",mandatory:!1,description:" true/false - if true the filter is applied to the scene only if you are in or spectating a player in first person"}]},{_id:1696,functionName:"SetFilterPassMaterial",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Maps the material to the index",example:'MapMaterial( self.lcoalClientNumber, 5, "mymaterial")',variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"materialIndex",mandatory:!0,description:"Material index, must be between 0 - 63"},{name:"materialName",mandatory:!0,description:"Material to map"}]},{_id:1697,functionName:"SetFilterPassQuads",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets the filter pass quads",example:"SetFilterPassQuads( self.localClientNum, 1, 12, 200)",variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"filterIndex",mandatory:!0,description:"Must be between 0 - 3"},{name:"passIndex",mandatory:!0,description:"Must be between 0 - 16"},{name:"passQuads",mandatory:!0,description:"Must be between 0 - 2048"}]},{_id:1698,functionName:"SetFXIgnorePause",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Tells an effect whether or not to respect a paused world state.",example:"SetFXIgnorePause( localClientNum, fxId, 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client the effect is playing on."},{name:"effect id",mandatory:!0,description:"The effect id returned by playFx"},{name:"ignore pause",mandatory:!0,description:"Whether or not to respect a paused world state."}]},{_id:1699,functionName:"SetFXOutdoor",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Flag the FX as one that only plays outdoors.",example:"SetFXOutdoor( fxId )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client the effect is playing on."},{name:"effect id",mandatory:!0,description:"The effect id returned by playFx"}]},{_id:1700,functionName:"SetFXTeam",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set the team of the fx either by team or by entity which has a team set.",example:"handle = SetFXTeam(localClientNum, fxHandle, owner)",variables:[{name:"localClientNum",mandatory:!0,description:"Local client on which to play the fx"},{name:"effect handle ",mandatory:!0,description:"The handle from the created fx"},{name:"entity or team",mandatory:!0,description:"The team"},{name:"invert team",mandatory:!1,description:"Treat the team as the one to show the enemy fx for."}]},{_id:1701,functionName:"SetGenericSceneValue",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets one of the 16 generic scene vectors used by SW shaders.",example:"SetGenericSceneValue(0, 20)",variables:[{name:"localClientNum",mandatory:!0,description:"Local client number."},{name:"index",mandatory:!0,description:"The scene vector index ( 0 - 15 )"},{name:"value",mandatory:!0,description:"Some generic float used by SW shaders."}]},{_id:1702,functionName:"SetHotZone",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Sets HotZone control values",example:"entity SetHotZone( 100, 1000, 5.0, 3.0, 0.5, 50 )",variables:[]},{_id:1703,functionName:"SetLitFogBank",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets which bank to use for all lit fog volumes with matching script id",example:"SetLitFogBank( 0, 1, 5.0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client"},{name:"scriptid",mandatory:!0,description:"Volume identifier set in Radiant. (0-255). -1 = all."},{name:"bank",mandatory:!0,description:"Bank selection (0-3)."},{name:"time",mandatory:!0,description:"Time in seconds to make the transition over. -1 to use the 'fogtime' parameter set in the volume."}]},{_id:1704,functionName:"SetLutScriptIndex",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set lut index from script.",example:"SetLutScriptIndex( lcn, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"the local client"},{name:"lut index",mandatory:!0,description:"The lut index"}]},{_id:1705,functionName:"SetLutVolumeActiveBank",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set lut volumes active bank bit mask.",example:"SetLutVolumeActiveBank( localClientNum, 2 )",variables:[{name:"localClientNum",mandatory:!0,description:"the local client"},{name:"bank mask",mandatory:!0,description:"The new bank mask"}]},{_id:1706,functionName:"SetOverlayConstant",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set the overlay constant",example:"SetOverlayConstant( self.lcoalClientNum, 2, 5, 1.4 )",variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"overlayIndex",mandatory:!0,description:"Must be between 0 - 3"},{name:"constantIndex",mandatory:!0,description:"Must be between 0 - 16"},{name:"value",mandatory:!0,description:"The value to set"}]},{_id:1707,functionName:"SetOverlayEnabled",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Enables or disables the overlay",example:"SetOverlayEnabled( self.localClientNum, 2, false )",variables:[{name:"overlayIndex",mandatory:!0,description:"Must be between 0 - 3"},{name:"enable",mandatory:!0,description:"true/false"}]},{_id:1708,functionName:"SetOverlayMaterial",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set the overlay material",example:"SetOverlayMaterial( self.localClientNum, 2, 20, 1 )",variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"overlayIndex",mandatory:!0,description:"Must be between 0 - 3"},{name:"materialIndex",mandatory:!0,description:"Must be between 0 - 63"},{name:"sortIndex",mandatory:!0,description:"Must be between 0 - 2"}]},{_id:1709,functionName:"SetPBGActiveBank",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set PBG bank mask from script.",example:"SetPBGActiveBank( lcn, 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"the local client"},{name:"bank mask",mandatory:!0,description:"The bank bit mask"}]},{_id:1710,functionName:"SetRimIntensity",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Global character skin/cloth rim lighting intensity.",example:"SetRimIntensity(0, 20)",variables:[{name:"localClientNum",mandatory:!0,description:"Local client number."},{name:"rimIntensity",mandatory:!0,description:"Character skin/cloth rim intensity."}]},{_id:1711,functionName:"SetRippleWave",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Trigger vertex ripple wave for material set to use it.",example:"setripplewave( 0, 100.0, 100.0, 200.0, 1.0, 1.0, 0.0, 250.0, 1000.0, 1500.0 )",variables:[{name:"client",mandatory:!0,description:"The local client"},{name:"center xpos",mandatory:!0,description:"The x coord"},{name:"center ypos",mandatory:!0,description:"The y coord"},{name:"width",mandatory:!0,description:"The width of the wave"},{name:"speed scale",mandatory:!0,description:"The speed modifier"},{name:"amplitude width ratio",mandatory:!0,description:"The amplitude"},{name:"fade in start",mandatory:!0,description:"The fade in at start"},{name:"fade in end",mandatory:!0,description:"The fade in at the end"},{name:"fade out start",mandatory:!0,description:"The fade out at start"},{name:"fade out end",mandatory:!0,description:"The fade out at the end"}]},{_id:1712,functionName:"SetServerVolumetricFogDensity",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set the density of server volumetric fog",example:null,variables:[{name:"localClientNum",mandatory:!0,description:"The local client number"},{name:"density",mandatory:!0,description:"The density to set"},{name:"time",mandatory:!0,description:"The time to lerp to the new value"}]},{_id:1713,functionName:"SetUkkoScriptIndex",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set ukko index from script.",example:"SetUkkoScriptIndex( lcn, 2, 1.0 )",variables:[{name:"localClientNum",mandatory:!0,description:"the local client"},{name:"ukko index",mandatory:!0,description:"The ukko index"},{name:"ukko blend",mandatory:!0,description:"The ukko index blend amount"}]},{_id:1714,functionName:"StartWaterSheetingFX",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Play a fullscreen water effect.",example:"StartWaterSheetingFX(localClientNum, 8)",variables:[{name:"localClientNum",mandatory:!0,description:"Local client on which to play the fx"},{name:"duration",mandatory:!1,description:"The number of seconds to play the fx before it stops automatically. Use 0 for infinite time. Defaults to 0."},{name:"magnitude",mandatory:!1,description:"default is from a dvar (r_waterSheetingFX_magnitude)"}]},{_id:1715,functionName:"StopExtraCamXCam",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Stops an XCam on the extra cam associated with the entity",example:"cameraEnt StopExtraCamXCam()",variables:[]},{_id:1716,functionName:"StopFX",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Stops a given fx.",example:"StopFX ( fxId )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client the effect is playing on."},{name:"effect id",mandatory:!0,description:"The effect id returned by playFx"}]},{_id:1717,functionName:"StopMainCamXCam",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Stops an XCam on the main cam associated with the entity",example:"StopMainCamXCam( 0 )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client"}]},{_id:1718,functionName:"StopRadiantExploder",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Stop the specified Radiant exploder",example:'StopRadiantExploder( 0, "lights_on_exploder" )',variables:[{name:"localClientNum",mandatory:!0,description:"The local client to play the effect on"},{name:"exploderId",mandatory:!0,description:"The id of the exploder to be stopped."}]},{_id:1719,functionName:"StopRenderOverrideBundle",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Ends a Render Override Bundle",example:"entity StopRenderOverrideBundle()",variables:[]},{_id:1720,functionName:"StopWaterSheetingFX",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Stop the fullscreen water effect",example:"StopWaterSheetingFX( localClientNum, 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client on which to play the fx"},{name:"duration",mandatory:!1,description:"The number of seconds it takes the effect to fade. Use 0 for immediate turn off. Defaults to 0."}]},{_id:1721,functionName:"SwitchToClientVolumetricFog",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Switch to the client volumetric fog",example:null,variables:[{name:"localClientNum",mandatory:!0,description:"The local client"}]},{_id:1722,functionName:"SwitchToServerVolumetricFog",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Switch to the server volumetric fog",example:null,variables:[{name:"localClientNum",mandatory:!0,description:"The local client"}]},{_id:1723,functionName:"TmodeClearFlag",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Clears flag bit for tmode.",example:"entity TmodeClearFlag( 2 )",variables:[]},{_id:1724,functionName:"TmodeEnable",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Enable or disable tactical mode",example:"entity TmodeEnable( 1 )",variables:[{name:"enable",mandatory:!0,description:"bool value"}]},{_id:1725,functionName:"TmodeSetFlag",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Sets flag bit for tmode.",example:"entity TmodeSetFlag( 1 )",variables:[]},{_id:1726,functionName:"TmodeStatus",returnValue:"int",referenceVariable:"",section:"Gfx",access:"Client",description:"returns the status of tmode",example:"status = TmodeStatus( 1 )",variables:[{name:"localClientNum",mandatory:!0,description:"Local client to find the status of"}]},{_id:1727,functionName:"Umbra_ClearPersistentTomeTrigger",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"clears the current tome trigger that persisted due to touching a prior tome trigger",example:"umbra_clearpersistenttometrigger( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:""}]},{_id:1728,functionName:"Umbra_SetAccurateOcclusionThreshold",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set Umbra Accurate Occlusion Threshold parameter",example:"Umbra_SetAccurateOcclusionThreshold( localClientNum, 2048 )",variables:[]},{_id:1729,functionName:"Umbra_SetDistanceScale",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set Umbra Distance Scale parameter",example:"Umbra_SetDistanceScale( localClientNum, 2.0 )",variables:[]},{_id:1730,functionName:"Umbra_SetMinimumContributionThreshold",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set Umbra Accurate Occlusion Threshold parameter",example:"Umbra_SetAccurateOcclusionThreshold( localClientNum, 8 )",variables:[]},{_id:1731,functionName:"Umbra_SetTomeTrigger",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets current active tome trigger",example:'Umbra_SetTomeTrigger( localClientNum, "my_really_cool_tome_trigger" )',variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"tometrigger name",mandatory:!0,description:'name of a tome trigger. Use empty string "" to deactivate tome triggers'}]},{_id:1732,functionName:"Umbra_SetTomeTriggerOnce",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Set the active tome trigger without interferring with any other tome logic.",example:'Umbra_SetTomeTriggerOnce( localClientNum, "my_really_cool_tome_trigger" )',variables:[{name:"localClientNum",mandatory:!0,description:""},{name:"tometrigger name",mandatory:!0,description:'name of a tome trigger. Use empty string "" to deactivate tome triggers'}]},{_id:1733,functionName:"UnhideStaticModel",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Unhide a static model",example:"UnhideStaticModel( model )",variables:[{name:"smodelIndex",mandatory:!0,description:"The index of the static model to toggle"}]},{_id:1734,functionName:"UnhideVolumeDecal",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Unhide a static model",example:"UnhideStaticModel( model )",variables:[{name:"volume decal Index",mandatory:!0,description:"The index of the volume decal to toggle"}]},{_id:1735,functionName:"VisionSetLastStandLerp",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets players' last stand vision. Optionally give a transition time from the current vision.",example:"VisionSetLastStandLerp( localClientNum, curr_info.visionset_to, curr_info.visionset_from, state.curr_lerp )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client which will have his vampire vision set changed"},{name:"vision name to",mandatory:!0,description:"Vision to transition to."},{name:"vision name from",mandatory:!0,description:"Vision to transition from."},{name:"lerp fraction",mandatory:!0,description:"The lerp fraction to use when transitioning to the new vision set if a transition is possible. Default is one second."}]},{_id:1736,functionName:"VisionSetNakedLerp",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Sets players' naked vision. Optionally give a transition time from the current vision.",example:"VisionSetNakedLerp( localClientNum, curr_info.visionset_to, curr_info.visionset_from, state.curr_lerp )",variables:[{name:"localClientNum",mandatory:!0,description:"The local client which will have his vampire vision set changed"},{name:"vision name to",mandatory:!0,description:"Vision to transition to."},{name:"vision name from",mandatory:!0,description:"Vision to transition from."},{name:"lerp fraction",mandatory:!0,description:"The lerp fraction to use when transitioning to the new vision set if a transition is possible. Default is one second."}]},{_id:1737,functionName:"WeakPoint_Enable",returnValue:"void",referenceVariable:"<entity>",section:"Gfx",access:"Client",description:"Enable or disable the weakpoint fx",example:"entity weakpoint_enable( 2 )",variables:[{name:"enable> 0 ",mandatory:!0,description:"0 to disable"}]},{_id:1738,functionName:"WeaponCyclingEnabled",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Determine if weapon cycling is enabled for the player",example:"enabled = player WeaponCyclingEnabled()",variables:[]},{_id:1739,functionName:"ZombieShooterSpotted",returnValue:"void",referenceVariable:"",section:"Gfx",access:"Client",description:"Enables the Zombie Shooter Spotted HUD display",example:"ZombieShooterSpotted(1, 1)",variables:[{name:"localClientNum",mandatory:!0,description:"Local client on which to map the material"},{name:"enable",mandatory:!0,description:"1-enables, 0-disables"}]},{_id:1740,functionName:"Abs",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns the absolute value of a float",example:"x = Abs( x )",variables:[{name:"value",mandatory:!0,description:"A float or integer value."}]},{_id:1741,functionName:"AbsAngleClamp180",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns abs angle value clamped between [0,180].",example:"deltaAngle = AbsAngleClamp180( currentAngle )",variables:[{name:"angles",mandatory:!0,description:"Angle to be clamped"}]},{_id:1742,functionName:"AbsAngleClamp360",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns <angle> as a value in the range of 0 and 360 degrees.",example:"new_angle = AbsAngleClamp360( boatAngles[2] )",variables:[{name:"angle",mandatory:!0,description:"An angle."}]},{_id:1743,functionName:"ACos",returnValue:"float",referenceVariable:"",section:"math",access:"Both",description:"Returns an angle corresponding to a particular cosine value",example:"upAngle = ACos( distanceratio )",variables:[{name:"cos value",mandatory:!0,description:"A cosine value"}]},{_id:1744,functionName:"AngleClamp180",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns angle value clamped between [-180,180].",example:"deltaAngle = AngleClamp180( currentAngle )",variables:[{name:"angles",mandatory:!0,description:"Angle to be clamped"}]},{_id:1745,functionName:"AngleLerp",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns <angle> lerped angle value.",example:"180 = AngleLerp( 0, 360, 0.5 )",variables:[{name:"from",mandatory:!0,description:"An angle."},{name:"to",mandatory:!0,description:"An angle."},{name:"fraction",mandatory:!0,description:"A float from 0-1."}]},{_id:1746,functionName:"AnglesToForward",returnValue:"vector",referenceVariable:"",section:"vector",access:"Both",description:"Returns the forward vector corresponding to a set of angles.",example:"forward = AnglesToForward( forward )",variables:[{name:"angles",mandatory:!0,description:"A set of angles"}]},{_id:1747,functionName:"AnglesToRight",returnValue:"vector",referenceVariable:"",section:"vector",access:"Both",description:"Returns the right vector corresponding to a set of angles.",example:"right = AnglesToRight(angles)",variables:[{name:"angles",mandatory:!0,description:"A set of angles"}]},{_id:1748,functionName:"AnglesToUp",returnValue:"vector",referenceVariable:"",section:"vector",access:"Both",description:"Returns the up vector corresponding to a set of angles.",example:"up = AnglesToUp(angles)",variables:[{name:"angles",mandatory:!0,description:"A set of angles"}]},{_id:1749,functionName:"ASin",returnValue:"float",referenceVariable:"",section:"math",access:"Both",description:"Returns an angle corresponding to a particular sin value",example:"upAngle = ASin( upAmount )",variables:[{name:"sin value",mandatory:!0,description:"A sin value"}]},{_id:1750,functionName:"ATan",returnValue:"float",referenceVariable:"",section:"math",access:"Both",description:"Returns an angle corresponding to a particular tangential value",example:"upAngle = ATan( height/distance )",variables:[{name:"tan value",mandatory:!0,description:"A tangential value"}]},{_id:1751,functionName:"Ceil",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns the ceiling of floating point value <a>. This effectively rounds up Ceil(2.7) == 3, Ceil(3.9) == 4.",example:"rounded_down = Floor( val )",variables:[{name:"a",mandatory:!0,description:"A float or integer value."}]},{_id:1752,functionName:"Closer",returnValue:"int",referenceVariable:"",section:"vector",access:"Both",description:"Tests which of two points is the closest. Returns true if point a is closer to the reference than point b",example:"if( Closer( center, models[j].origin , models[i].origin ))...",variables:[{name:"reference",mandatory:!0,description:"The base position"},{name:"point a",mandatory:!0,description:"The first point"},{name:"point b",mandatory:!0,description:"The second point"}]},{_id:1753,functionName:"CombineAngles",returnValue:"vector",referenceVariable:"",section:"vector",access:"Both",description:"Returns angles b reoriented by angles a.",example:"crateAnglesInWorld = CombineAngles( boatAngles, crateAnglesInBoat )",variables:[{name:"angles a",mandatory:!0,description:"Angles representing the orientation in which to place <angles b>"},{name:"angles b",mandatory:!0,description:"Angles which will be reoriented"}]},{_id:1754,functionName:"Cos",returnValue:"float",referenceVariable:"",section:"math",access:"Both",description:"Returns the cos of an angle",example:"frac = Cos( degrees )",variables:[{name:"angle",mandatory:!0,description:"An angle in degrees"}]},{_id:1755,functionName:"DiffTrack",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns a lagged value between <from> and <to> based on <rate> and <deltaTime>",example:null,variables:[{name:"to",mandatory:!0,description:"Float, start of the range"},{name:"from",mandatory:!0,description:"Float, end of the range"},{name:"rate",mandatory:!0,description:"Floating point"},{name:"deltaTime",mandatory:!0,description:"Time elapsed"}]},{_id:1756,functionName:"DiffTrackAngle",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns a lagged angle between <from> and <to> based on <rate> and <deltaTime>. Properly accounts for wrapping 2pi",example:null,variables:[{name:"to",mandatory:!0,description:"Float, start of the range"},{name:"from",mandatory:!0,description:"Float, end of the range"},{name:"rate",mandatory:!0,description:"Floating point"},{name:"deltaTime",mandatory:!0,description:"Time elapsed"}]},{_id:1757,functionName:"Distance",returnValue:"float",referenceVariable:"",section:"vector",access:"Both",description:"Returns the distance between two points",example:"dist = Distance( org, ai[i].origin )",variables:[{name:"point1",mandatory:!0,description:"The first point"},{name:"point2",mandatory:!0,description:"The second point"}]},{_id:1758,functionName:"Distance2D",returnValue:"float",referenceVariable:"",section:"vector",access:"Both",description:"Returns the distance between two points, ignores height difference.",example:"dist = Distance2D( org, ai[i].origin )",variables:[{name:"point1",mandatory:!0,description:"The first point"},{name:"point2",mandatory:!0,description:"The second point"}]},{_id:1759,functionName:"Distance2DSquared",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns the squared distance between two points, ignores height difference.",example:"distsq = Distance2DSquared( org, ai[i].origin )",variables:[{name:"point1",mandatory:!0,description:"The first point"},{name:"point2",mandatory:!0,description:"The second point"}]},{_id:1760,functionName:"DistanceSquared",returnValue:"float",referenceVariable:"",section:"vector",access:"Both",description:"Returns the squared distance between two points - this is cheaper than the actual distance as it doesn't involve a square root",example:"dist2 = DistanceSquared(models[j].origin, center)",variables:[{name:"point1",mandatory:!0,description:"The first point"},{name:"point2",mandatory:!0,description:"The second point"}]},{_id:1761,functionName:"Float",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Casts a string or an integer to a float",example:"x = Float( floatValString )",variables:[{name:"value",mandatory:!0,description:"A string or integer number to cast to a float"}]},{_id:1762,functionName:"Floor",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns the floor of floating point value <a>. This effectively rounds down Floor(2.7) == 2, Floor(3.9) == 3.",example:"rounded_down = Floor( val )",variables:[{name:"a",mandatory:!0,description:"A float or integer value."}]},{_id:1763,functionName:"ForwardRotateAroundUpByAngle",returnValue:"vector",referenceVariable:"",section:"Math",access:"Both",description:"returns a vector that is the result of angles1 forward vector rotated around its up by degrees",example:"v=ForwardRotateByAngles( player_angles, frustum_edge_angle )",variables:[{name:"angles1",mandatory:!0,description:""},{name:"degrees",mandatory:!0,description:""}]},{_id:1764,functionName:"GetMinBitCountForNum",returnValue:"int",referenceVariable:"",section:"Math",access:"Both",description:"Returns the minimum number of bits needed to express the provided integer",example:"GetMinBitCountForNum( 15 ) returns 4",variables:[{name:"uint",mandatory:!0,description:"The integer a minimum bit count is needed for"}]},{_id:1765,functionName:"Int",returnValue:"int",referenceVariable:"",section:"math",access:"Both",description:"Casts a floating point number or a string to an integer",example:"x = Int( self.HUDHealthHeight )",variables:[{name:"value",mandatory:!0,description:"A string or floating point number to cast to an integer"}]},{_id:1766,functionName:"Length",returnValue:"float",referenceVariable:"",section:"vector",access:"Both",description:"Returns the length of the given vector",example:"dist = Length(models[j].origin - center)",variables:[{name:"vector",mandatory:!0,description:"A vector"}]},{_id:1767,functionName:"LengthSquared",returnValue:"float",referenceVariable:"",section:"vector",access:"Both",description:"Returns the squared vector length for the given vector - this is cheaper than the actual vector length as it doesn't involve a square root",example:"dist2 = LengthSquared(models[j].origin - center)",variables:[{name:"vector",mandatory:!0,description:"A vector"}]},{_id:1768,functionName:"LerpFloat",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns a lerped value between <from> and <to> based on <time>",example:"val = LerpFloat( 0, 10, 0.5); // would return 5.0",variables:[{name:"from",mandatory:!0,description:"Floating point value, start of the range"},{name:"to",mandatory:!0,description:"Floating point value, end of the range"},{name:"time",mandatory:!0,description:"Floating point value in the range of 0 - 1"}]},{_id:1769,functionName:"LerpVector",returnValue:"vector",referenceVariable:"",section:"Math",access:"Both",description:"Returns a lerped vector value between <from> and <to> based on <time>",example:"val = LerpVector( (0,0,0), (5,5,5), 0.5); // would return (2.5, 2.5, 2.5)",variables:[{name:"from",mandatory:!0,description:"Vector, start of the range"},{name:"to",mandatory:!0,description:"Vector, end of the range"},{name:"time",mandatory:!0,description:"Floating point value in the range of 0 - 1"}]},{_id:1770,functionName:"Log",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns the logarithm of a number to base 10",example:"y = Log( x )",variables:[{name:"number",mandatory:!0,description:""}]},{_id:1771,functionName:"MapFloat",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns a lerped value between <from> and <to> based on <time>. <time> is a value between <timeMin> and <timeMax>.",example:"val = MapFloat( 1, 2, 0, 10, 1.5); // would return 5.0",variables:[{name:"timeMin",mandatory:!0,description:"Floating point value, min time value"},{name:"timeMax",mandatory:!0,description:"Floating point value, max time value"},{name:"from",mandatory:!0,description:"Floating point value, start of the result range"},{name:"to",mandatory:!0,description:"Floating point value, end of the result range"},{name:"time",mandatory:!0,description:"Floating point value in the range from <timeMin> to <timeMax>"}]},{_id:1772,functionName:"Max",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns whichever of <a> or <b> is larger.",example:"largest = Max( val1, val2 )",variables:[{name:"a",mandatory:!0,description:"A float or integer value."},{name:"b",mandatory:!0,description:"A float or integer value."}]},{_id:1773,functionName:"Min",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns whichever of <a> or <b> is smallest.",example:"smallest = Min( val1, val2 )",variables:[{name:"a",mandatory:!0,description:"A float or integer value."},{name:"b",mandatory:!0,description:"A float or integer value."}]},{_id:1774,functionName:"PackRGBA",returnValue:"int",referenceVariable:"",section:"Math",access:"Both",description:"Packs rgba into a single int.",example:"Byte4PackRgba( 1.0, 1.0, 1.0, 1.0 )",variables:[{name:"red",mandatory:!0,description:"as a float 0.0-1.0"},{name:"green",mandatory:!0,description:"as a float 0.0-1.0"},{name:"blue",mandatory:!0,description:"as a float 0.0-1.0"},{name:"alpha",mandatory:!0,description:"as a float 0.0-1.0"}]},{_id:1775,functionName:"PointOnSegmentNearestToPoint",returnValue:"vector",referenceVariable:"",section:"math",access:"Both",description:"Given a line segment and a point P, this returns the point on the segment that is closest to P.",example:"nearestPoint = PointOnSegmentNearestToPoint( A, B, P )",variables:[{name:"SegmentA",mandatory:!0,description:"One endpoint of the line segment"},{name:"SegmentB",mandatory:!0,description:"Other endpoint of the line segment"},{name:"P",mandatory:!0,description:"The point"}]},{_id:1776,functionName:"Pow",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Return the value of base raised to exp power.",example:"c = pow( 2, 4 )",variables:[{name:"exp",mandatory:!0,description:"A float or integer value."}]},{_id:1777,functionName:"Project2Dto3D",returnValue:"vector",referenceVariable:"",section:"Math",access:"Client",description:"returns a world coordinate that projects to the given 2d coordinate ((-1,1),(-1,1))",example:"v=Project2DTo3D( 0, -1, -1, 5)",variables:[{name:"clientnum",mandatory:!0,description:"clientnumber - needed for viewport selection."},{name:"x",mandatory:!0,description:"screen space x coord (-1,1)"},{name:"y",mandatory:!0,description:"screen space y coord (-1,1)"},{name:"depth",mandatory:!0,description:"depth to assume near clip is at (at this depth the screen will be edge to edge)"}]},{_id:1778,functionName:"Project3Dto2D",returnValue:"vector",referenceVariable:"",section:"Math",access:"Client",description:"returns a screen coordinate vector (virtual UI coord) of a 3d coordinate",example:"hudPosition = Project3DTo2D( 0, target_pos )",variables:[{name:"clientnum",mandatory:!0,description:"client number - needed for viewport selection."},{name:"world_coordinate",mandatory:!0,description:"world space vector"}]},{_id:1779,functionName:"RandomFloat",returnValue:"float",referenceVariable:"",section:"math",access:"Server",description:"Returns a random floating point number r, where 0 <= r < max",example:"if ( RandomFloat( 100 ) > 50 ) ...",variables:[{name:"max",mandatory:!0,description:"The maximum floating point size"}]},{_id:1780,functionName:"RandomFloatRange",returnValue:"float",referenceVariable:"",section:"math",access:"Server",description:"Returns a random floating point number r, where min <= r < max",example:"rand = RandomFloatRange( 3.0, 5.0 )",variables:[{name:"min",mandatory:!0,description:"The minimum result"},{name:"max",mandatory:!0,description:"The maximum result"}]},{_id:1781,functionName:"RandomInt",returnValue:"int",referenceVariable:"",section:"math",access:"Server",description:"Returns a random integer between 0 and max-1 inclusive",example:"if ( RandomInt( 100 ) > 50 ) ...",variables:[{name:"max",mandatory:!0,description:"The maximum integer size"}]},{_id:1782,functionName:"RandomIntRange",returnValue:"int",referenceVariable:"",section:"math",access:"Server",description:"Returns a random integer r, where min <= r < max",example:"rand = RandomIntRange( 3, 5 )",variables:[{name:"min",mandatory:!0,description:"The minimum result"},{name:"max",mandatory:!0,description:"The maximum result + 1"}]},{_id:1783,functionName:"RotatePoint",returnValue:"vector",referenceVariable:"",section:"Math",access:"Both",description:"Returns <angle> lerped angle value.",example:"rotatedPoint = RotatePoint(point, angle )",variables:[{name:"point",mandatory:!0,description:"A point."},{name:"angles",mandatory:!0,description:"An angle."}]},{_id:1784,functionName:"RotatePointAroundAxis",returnValue:"vector",referenceVariable:"",section:"Math",access:"Both",description:"returns a vector that is the result of point rotated around the axis vector by num degrees",example:"v = RotatePointAroundAxis( point, up, degrees )",variables:[{name:"point",mandatory:!0,description:""},{name:"axis direction",mandatory:!0,description:""},{name:"degrees",mandatory:!0,description:""}]},{_id:1785,functionName:"Sin",returnValue:"float",referenceVariable:"",section:"math",access:"Both",description:"Returns the sin of an angle",example:"frac = Sin( degrees )",variables:[{name:"angle",mandatory:!0,description:"An angle in degrees"}]},{_id:1786,functionName:"Sqrt",returnValue:"float",referenceVariable:"",section:"Math",access:"Both",description:"Returns the square-root of floating point value <a>.",example:"c = sqrt( (a*a) + (b*b) )",variables:[{name:"a",mandatory:!0,description:"A float or integer value."}]},{_id:1787,functionName:"Tan",returnValue:"float",referenceVariable:"",section:"math",access:"Both",description:"Returns the tan of an angle",example:"frac = Tan( degrees )",variables:[{name:"angle",mandatory:!0,description:"An angle in degrees"}]},{_id:1788,functionName:"VectorCross",returnValue:"vector",referenceVariable:"",section:"Math",access:"Both",description:"Returns the cross product of two vectors",example:null,variables:[{name:"vector a",mandatory:!0,description:"The first vector"},{name:"vector b",mandatory:!0,description:"The second vector"}]},{_id:1789,functionName:"VectorDot",returnValue:"float",referenceVariable:"",section:"vector",access:"Both",description:"Returns the dot product of two vectors",example:null,variables:[{name:"vector a",mandatory:!0,description:"The first vector"},{name:"vector b",mandatory:!0,description:"The second vector"}]},{_id:1790,functionName:"VectorFromLineToPoint",returnValue:"vector",referenceVariable:"",section:"math",access:"Both",description:"Given a line and a point P, this returns a vector perpendicular to the line and pointing from the line to P.",example:"myvector = VectorFromLineToPoint( A, B, P )",variables:[{name:"SegmentA",mandatory:!0,description:"One point on the line"},{name:"SegmentB",mandatory:!0,description:"Another point on the line"},{name:"P",mandatory:!0,description:"The point"}]},{_id:1791,functionName:"VectorLerp",returnValue:"vector",referenceVariable:"",section:"vector",access:"Both",description:"Linear interpolates between two vectors.",example:"color = VectorLerp(oldColor, newColor, timeElapsed / timeTotal)",variables:[{name:"from",mandatory:!0,description:"The vector whose value is used when fraction is 0"},{name:"to",mandatory:!0,description:"The vector whose value is used when fraction is 1"},{name:"fraction",mandatory:!0,description:"The fraction of the way between vectors. Values less than 0 or greater than 1 do linear extrapolation."}]},{_id:1792,functionName:"VectorNormalize",returnValue:"vector",referenceVariable:"",section:"vector",access:"Both",description:"Returns a normalized copy of this vector",example:"difference = VectorNormalize(end - start)",variables:[{name:"vector",mandatory:!0,description:"The vector to normalize"}]},{_id:1793,functionName:"VectorProjection",returnValue:"vector",referenceVariable:"",section:"Math",access:"Both",description:"Returns the vector projection of vector a onto vector b",example:null,variables:[{name:"vector a",mandatory:!0,description:"The first vector"},{name:"vector b",mandatory:!0,description:"The second vector"}]},{_id:1794,functionName:"VectortoAngles",returnValue:"vector",referenceVariable:"",section:"vector",access:"Both",description:"Returns a set of angles corresponding to the given vector.",example:"angles = VectortoAngles(end - start)",variables:[{name:"vector",mandatory:!0,description:"The vector to convert to angles"}]},{_id:1795,functionName:"ViewAspect",returnValue:"float",referenceVariable:"",section:"Math",access:"Client",description:"returns the horizontal screen aspect",example:"viewAspect = ViewAspect( localClientNum )",variables:[{name:"clientnum",mandatory:!0,description:"client number - needed for viewport selection."}]},{_id:1796,functionName:"ActionButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the 'action' button. Use this for when the player might be in a scripted sequence but might still press the jump button.",example:"while( self ActionButtonPressed() )...",variables:[]},{_id:1797,functionName:"ActionSlotFourButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the action slot 4 button",example:"if ( self ActionSlotFourButtonPressed() ) ...",variables:[]},{_id:1798,functionName:"ActionSlotOneButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the action slot 1 button",example:"if ( self ActionSlotOneButtonPressed() ) ...",variables:[]},{_id:1799,functionName:"ActionSlotThreeButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the action slot 3 button",example:"if ( self ActionSlotThreeButtonPressed() ) ...",variables:[]},{_id:1800,functionName:"ActionSlotTwoButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the action slot 2 button",example:"if ( self ActionSlotTwoButtonPressed() ) ...",variables:[]},{_id:1801,functionName:"AddToDamageIndicator",returnValue:"void",referenceVariable:"<client>",section:"Player",access:"Server",description:"Add damage to damage indicator",example:"self AddToDamageIndicator( int( armor_damage ), vDir)",variables:[{name:"dmg",mandatory:!0,description:"The damage"},{name:"direction",mandatory:!1,description:"The direction of hit"}]},{_id:1802,functionName:"ADSButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Check if the player is pressing the 'ads' button.",example:"while( self AdsButtonPressed() )...",variables:[]},{_id:1803,functionName:"AllowADS",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets whether the player can switch to ADS",example:"player AllowAds( false )",variables:[{name:"player ads",mandatory:!0,description:""}]},{_id:1804,functionName:"AllowCrouch",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets whether the player can crouch",example:"player AllowCrouch( false )",variables:[{name:"player crouch",mandatory:!0,description:""}]},{_id:1805,functionName:"AllowDoubleJump",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets whether the player can double jump",example:"player AllowDoubleJump( false )",variables:[{name:"on off",mandatory:!0,description:""}]},{_id:1806,functionName:"AllowJump",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets whether the player can jump",example:"player AllowJump(false)",variables:[{name:"player jump",mandatory:!0,description:""}]},{_id:1807,functionName:"AllowLean",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets whether the player can lean",example:"player AllowLean( false )",variables:[{name:"player lean",mandatory:!0,description:""}]},{_id:1808,functionName:"AllowMelee",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets whether the player can melee",example:"player AllowMelee(false)",variables:[{name:"melee",mandatory:!0,description:""}]},{_id:1809,functionName:"AllowMeleePowerLeft",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets whether the player can melee power left",example:"player AllowMeleePowerLeft(false)",variables:[{name:"melee",mandatory:!0,description:""}]},{_id:1810,functionName:"AllowProne",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets whether the player can go prone",example:"player AllowProne( false )",variables:[{name:"player prone",mandatory:!0,description:""}]},{_id:1811,functionName:"AllowSlide",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets whether the player can slide",example:"player AllowSlide( false )",variables:[{name:"on off",mandatory:!0,description:""}]},{_id:1812,functionName:"AllowSpectateTeam",returnValue:"void",referenceVariable:"<player>",section:"client",access:"Server",description:"Set whether the player can spectate the given team.",example:'self AllowSpectateTeam( "axis", true )',variables:[{name:"team",mandatory:!0,description:"A string description of the team. Valid teams are 'axis', 'allies', 'none' or 'freelook'"},{name:"spectate",mandatory:!0,description:"A boolean value describing whether this player can spectate on this team."}]},{_id:1813,functionName:"AllowSprint",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets whether the player can sprint",example:"player AllowSprint(false)",variables:[{name:"player sprint",mandatory:!0,description:""}]},{_id:1814,functionName:"AllowStand",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets whether the player can stand up",example:"player AllowStand( false )",variables:[{name:"player stand",mandatory:!0,description:""}]},{_id:1815,functionName:"AllowWallRun",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets whether the player can wall run",example:"player AllowWallRun( false )",variables:[{name:"on off",mandatory:!0,description:""}]},{_id:1816,functionName:"AnyAmmoForWeaponModes",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the weapon has any ammo left",example:"if ( !(self AnyAmmoForWeaponModes( weapon )) )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to check"}]},{_id:1817,functionName:"ApplyKnockBack",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Applies a knockback on a player.",example:"player ApplyKnockBack( 10, dir )",variables:[{name:"amount",mandatory:!0,description:"the amount of knockback to apply"},{name:"dir",mandatory:!1,description:"the direction of knockback to apply"}]},{_id:1818,functionName:"AreControlsFrozen",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if the controls are frozen",example:"if( player AreControlsFrozen() )",variables:[]},{_id:1819,functionName:"AttackButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Check if the player is pressing the fire button",example:"if ( self AttackButtonPressed() ) ...",variables:[]},{_id:1820,functionName:"BeginLocationAirstrikeSelection",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Begin a location air strike selection",example:"self BeginLocationAirstrikeSelection( LOCATION_SELECTOR )",variables:[{name:"selection name",mandatory:!0,description:"The selection name"},{name:"radius",mandatory:!1,description:"The radius of the selection"}]},{_id:1821,functionName:"BeginLocationArtillerySelection",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Begin a location artillery selection",example:"self BeginLocationArtillerySelection( LOCATION_SELECTOR )",variables:[{name:"selection name",mandatory:!0,description:"The selection name"},{name:"radius",mandatory:!1,description:"The radius of the selection"}]},{_id:1822,functionName:"BeginLocationComlinkSelection",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Begin a location com link selection",example:"self BeginLocationComlinkSelection( LOCATION_SELECTOR, 1000 )",variables:[{name:"selection name",mandatory:!0,description:"The selection name"},{name:"radius",mandatory:!1,description:"The radius of the selection"}]},{_id:1823,functionName:"BeginLocationMortarSelection",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Begin a location mortar selection",example:"self BeginLocationMortarSelection( LOCATION_SELECTOR, 1500 )",variables:[{name:"selection name",mandatory:!0,description:"The selection name"},{name:"radius",mandatory:!1,description:"The radius of the selection"}]},{_id:1824,functionName:"BeginLocationNapalmSelection",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Begin a location napalm selection",example:"self BeginLocationNapalmSelection( LOCATION_SELECTOR )",variables:[{name:"selection name",mandatory:!0,description:"The selection name"},{name:"radius",mandatory:!1,description:"The radius of the selection"}]},{_id:1825,functionName:"BeginLocationSelection",returnValue:"void",referenceVariable:"<player>",section:"client",access:"Server",description:"Begin a location selection",example:"self BeginLocationSelection( LOCATION_SELECTOR )",variables:[{name:"selection name",mandatory:!0,description:"The selection name"},{name:"radius",mandatory:!1,description:"The radius of the selection"}]},{_id:1826,functionName:"BoostButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the change seat (Y) button",example:"if ( self BoostButtonPressed() ) ...",variables:[]},{_id:1827,functionName:"BotSetRandomCharacterCustomization",returnValue:"void",referenceVariable:"<bot>",section:"Player",access:"Server",description:"Equips this class number with the default class",example:"self BotSetRandomCharacterCustomization()",variables:[]},{_id:1828,functionName:"ButtonBitState",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Return true if the button_bit(s) indicated are pressed (note",example:'if ( self ButtonBitState( "BUTTON_BIT_ATTACK") ) ...',variables:[{name:"button",mandatory:!0,description:""}]},{_id:1829,functionName:"ButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:'Check if the host is pressing the button/key, "BUTTON_A", "BUTTON_B", "K", etc...',example:'while( self ButtonPressed( "BUTTON_A" ) ) ...',variables:[]},{_id:1830,functionName:"CalcPlayerOptions",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Calculate player options",example:"playerRenderOptions = self CalcPlayerOptions( class_num )",variables:[{name:"custom class slot",mandatory:!0,description:"The custom class slot"}]},{_id:1831,functionName:"CalcWeaponOptions",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Calculates weapon options",example:"primaryWeaponOptions = self CalcWeaponOptions( class_num, 0 )",variables:[{name:"custom class slot",mandatory:!0,description:"The custom class slot"},{name:"weapon slot",mandatory:!0,description:"primary weapon=0 or secondary weapon=1 or knife weapon=2"}]},{_id:1832,functionName:"CameraActivate",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Turns the script camera on or off.",example:"get_players()[0] CameraActivate( true )",variables:[{name:"active",mandatory:!0,description:"True to activate the camera, false to turn it off and return to 1st person view"}]},{_id:1833,functionName:"CameraSetAngles",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the focus point of the script camera.",example:"get_players()[0] CameraSetLookAt( ( 1100, -23, 644 ) )get_players()[0] CameraSetLookAt( my_entity )",variables:[{name:"position",mandatory:!1,description:"Either an entity to focus the camera on or a vector defining the camera's focus point"}]},{_id:1834,functionName:"CameraSetLookAt",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the focus point of the script camera.",example:"get_players()[0] CameraSetLookAt( ( 1100, -23, 644 ) )get_players()[0] CameraSetLookAt( my_entity )",variables:[{name:"position",mandatory:!1,description:"Either an entity to focus the camera on or a vector defining the camera's focus point"}]},{_id:1835,functionName:"CameraSetPosition",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the position of the script camera.",example:"get_players()[0] CameraSetPosition( ( 1100, -23, 644 ) )get_players()[0] CameraSetPosition( my_entity )",variables:[{name:"position",mandatory:!0,description:"Either an entity to link the camera to or a vector defining the world position"},{name:"angles",mandatory:!1,description:"The angles to set for the camera"}]},{_id:1836,functionName:"CanPlaceRiotshield",returnValue:"string[]",referenceVariable:"<player>",section:"Player",access:"Server",description:'Try to place riotshield where the player is standing. return an array containing placement "result", "origin", and "angles',example:"placement = level.player CanPlaceRiotshield()",variables:[]},{_id:1837,functionName:"CanPlayerPlaceTurret",returnValue:"string[]",referenceVariable:"<player>",section:"Player",access:"Server",description:'Try to place a Turret where the player is looking. It\'ll return an array containing the placement "result", "origin", and "angles".',example:"placement = level.player CanPlayerPlaceTurret()",variables:[]},{_id:1838,functionName:"CanPlayerPlaceVehicle",returnValue:"string[]",referenceVariable:"<player>",section:"Player",access:"Server",description:'Try to place a vehicle in front of the player. It\'ll return an array containing the placement "result", "origin", and "angles".',example:"placement = level.player CanPlayerPlaceVehicle( 25, 45, 50, 40, 80, 0.7 )",variables:[{name:"radius",mandatory:!0,description:"Radius of the bounds check"},{name:"height",mandatory:!0,description:"Height of the bounds check"},{name:"forward Distance",mandatory:!0,description:"Distance away from player origin."},{name:"up Distance",mandatory:!0,description:"Distance up from player origin."},{name:"sweep Distance",mandatory:!0,description:"Distance to sweep downwards."},{name:"min normal",mandatory:!0,description:"Minimum hit normal needed to be pass."}]},{_id:1839,functionName:"CantSeeEntities",returnValue:"entity[]",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns the set of entities that a player cannot see within a given angle, given a set of entities",example:"if( isplayer( self.enemy ) && self.enemy CantSeeEntities( entArray, 67 ) )",variables:[{name:"entArray",mandatory:!0,description:"The entities to check against"},{name:"dotRange",mandatory:!0,description:"The cosine of the angle representing your fov"},{name:"trace",mandatory:!0,description:"Perform a trace for entities"}]},{_id:1840,functionName:"CarryTurret",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Links the auto turret to the player to carry around.",example:"player CarryTurret( turret, offset, angleOffset )",variables:[{name:"turret",mandatory:!0,description:"The turret entity"},{name:"offset",mandatory:!0,description:"the offset from the player to place the turret"},{name:"angleOffset",mandatory:!0,description:"the angle offset of the turret"}]},{_id:1841,functionName:"ChangeSeatButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the change seat (Y) button",example:"if ( self ChangeSeatButtonPressed() ) ...",variables:[]},{_id:1842,functionName:"ClearCyberComAbility",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Removes player cybercombat ability",example:'avail = player ClearCyberComAbility( "cybercom_systemoverload" )',variables:[{name:"name",mandatory:!1,description:"Whether the player should be jammed or not. Empty, clears all"}]},{_id:1843,functionName:"ClearCyberComRig",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Removes player cybercombat rig",example:'avail = player ClearCyberComRig( "cybercom_systemoverload" )',variables:[{name:"name",mandatory:!1,description:"Whether the player should be jammed or not. Empty, clears all"}]},{_id:1844,functionName:"ClearDamageIndicator",returnValue:"void",referenceVariable:"<client>",section:"Player",access:"Server",description:"Clear damage indicator",example:"self ClearDamageIndicator()",variables:[]},{_id:1845,functionName:"ClearPerks",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"removes all perks for a player",example:"player ClearPerks()",variables:[]},{_id:1846,functionName:"ClonePlayer",returnValue:"entity",referenceVariable:"<client>",section:"client",access:"Server",description:"clone the player's model for death animations.",example:"body = self ClonePlayer(deathAnimDuration)",variables:[{name:"deathAnimationDuration",mandatory:!0,description:"the duration of the death animation"},{name:"killing weapon",mandatory:!0,description:"weapon that killed the player"},{name:"attacker",mandatory:!1,description:"attacker that killed the player"}]},{_id:1847,functionName:"CloseInGameMenu",returnValue:"void",referenceVariable:"<client>",section:"menus",access:"Server",description:"close the in game menu for this client.",example:"player CloseInGameMenu()",variables:[]},{_id:1848,functionName:"CloseLUIMenu",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Closes the given lui menu and returns true if it finds the menu and succeeds in closing it, false otherwise.",example:"player CloseLUIMenu( menu )",variables:[{name:"lui menu handle",mandatory:!0,description:"handle to the lui menu."}]},{_id:1849,functionName:"CloseMenu",returnValue:"void",referenceVariable:"<client>",section:"player",access:"Server",description:"close the specified menu for this client.",example:'player CloseMenu( game[ "menu_changeclass" ] )',variables:[{name:"menu index",mandatory:!0,description:'The precached menu index of type "menu"'}]},{_id:1850,functionName:"CreateFlashbackClone",returnValue:"entity",referenceVariable:"<client>",section:"Player",access:"Server",description:"clone the player's model for temporary flashback model",example:"body = self CreateFlashbackClone()",variables:[]},{_id:1851,functionName:"DamageRiotShield",returnValue:"int",referenceVariable:"",section:"Player",access:"Server",description:"Apply damage to a player riot shield or other weapon that supports damage states.",example:"newhealth = player DamageRiotShield( 100 ) )",variables:[]},{_id:1852,functionName:"DeathStreakActive",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if player's death streak is active",example:"if( player DeathStreakActive() )",variables:[]},{_id:1853,functionName:"DisableDeathStreak",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Disable player's death streak",example:"player DisableDeathStreak()",variables:[]},{_id:1854,functionName:"DisableInvulnerability",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Makes player vulnerable to damage. This is default behavior",example:"player DisableInvulnerability()",variables:[]},{_id:1855,functionName:"DisableOffhandWeapons",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Disable the player's offhand weapons",example:"player DisableOffhandWeapons()",variables:[]},{_id:1856,functionName:"DisableRoundStartDelay",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Enable players weapon after round start delay",example:"player DisableRoundStartDelay()",variables:[]},{_id:1857,functionName:"DisableUsability",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Disables usability for the player",example:"player DisableUsability()",variables:[]},{_id:1858,functionName:"DisableWeaponCycling",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Disable the player's weapon cycling",example:"player DisableWeaponCycling()",variables:[]},{_id:1859,functionName:"DisableWeaponFire",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Disable the player's weapon fire",example:"player DisableWeaponFire(()",variables:[]},{_id:1860,functionName:"DisableWeapons",returnValue:"void",referenceVariable:"<player>",section:"client",access:"Server",description:"Disable the weapons of the player",example:"self DisableWeapons()",variables:[{name:"quick",mandatory:!1,description:"Set the Disable weapons quick flag"}]},{_id:1861,functionName:"DropItem",returnValue:"entity",referenceVariable:"<player>",section:"client",access:"Server",description:"Drop an item with the given item name",example:"self DropItem( current )",variables:[{name:"item name",mandatory:!0,description:"the name of the item to drop"},{name:"dropTag",mandatory:!1,description:"If specified drop and snap the weapon to this tag"}]},{_id:1862,functionName:"DropScavengerItem",returnValue:"entity",referenceVariable:"<player>",section:"Player",access:"Server",description:"Drop an item with the given item name. This item will be only available to those with the scavenger perk",example:'self DropScavengerItem( "scavenger_item_mp" )',variables:[{name:"item name",mandatory:!0,description:"the name of the item to drop"}]},{_id:1863,functionName:"EnableDeathStreak",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Enable player's death streak",example:"player EnableDeathStreak()",variables:[]},{_id:1864,functionName:"EnableInvulnerability",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Makes player invulnerable to damage",example:"player EnableInvulnerability()",variables:[]},{_id:1865,functionName:"EnableOffhandWeapons",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Enable the player's offhand weapons",example:"player EnableOffhandWeapons()",variables:[]},{_id:1866,functionName:"EnableRoundStartDelay",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Disable the players weapon during round start",example:"player EnableRoundStartDelay()",variables:[]},{_id:1867,functionName:"EnableUsability",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Enables usability for the player",example:"player EnableUsability()",variables:[]},{_id:1868,functionName:"EnableWeaponCycling",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Enable the player's weapon cycling",example:"player EnableWeaponCycling()",variables:[]},{_id:1869,functionName:"EnableWeaponFire",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Enable the player's weapon fire",example:"player EnableWeaponFire()",variables:[]},{_id:1870,functionName:"EnableWeapons",returnValue:"void",referenceVariable:"<player>",section:"client",access:"Server",description:"Enables the weapons of the player",example:"self EnableWeapons()",variables:[]},{_id:1871,functionName:"EndLocationSelection",returnValue:"void",referenceVariable:"<player>",section:"client",access:"Server",description:"Ends location selection",example:"self endLocationSelection()",variables:[]},{_id:1872,functionName:"FakeDamageFrom",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Make the player take damage from the given direction",example:"self FakeDamageFrom(vDir)",variables:[{name:"dir",mandatory:!0,description:"The direction to take damage from"}]},{_id:1873,functionName:"FinishMeleeHit",returnValue:"void",referenceVariable:"<client>",section:"Player",access:"Server",description:"Notifies the clients of the melee hit or miss",example:"self finishMeleeHit( eAttacker, sWeapon, vPoint, vDir, iBoneIndex, bHit )",variables:[{name:"Attacker",mandatory:!0,description:"The entity that is attacking."},{name:"Weapon",mandatory:!0,description:"The weapon number of the weapon used to inflict the damage"},{name:"Origin",mandatory:!0,description:"(vector) The origin of the damage"},{name:"Direction",mandatory:!0,description:"(vector) The direction of the damage"},{name:"bone index",mandatory:!0,description:"Which bone was the closest to the hit"},{name:"shieldHit",mandatory:!0,description:"Was the hit delivered against a shield"},{name:"hit",mandatory:!0,description:"Was the hit successful or a swipe"},{name:"fromBehind",mandatory:!0,description:"Was the hit from behind the victim"}]},{_id:1874,functionName:"FinishPlayerDamage",returnValue:"bool",referenceVariable:"<client>",section:"damage",access:"Server",description:"Does damage to a player - usually as part of the damage callback",example:"self FinishPlayerDamage( eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, iBone, vDamageOrigin, psOffsetTime, vSurfaceNormal )",variables:[{name:"Inflictor",mandatory:!0,description:"The entity that causes the damage.(e.g. a turret)"},{name:"Attacker",mandatory:!0,description:"The entity that is attacking."},{name:"Damage",mandatory:!0,description:"Integer specifying the amount of damage done"},{name:"Damage Flags",mandatory:!0,description:"Integer specifying flags that are to be applied to the damage"},{name:"Means Of Death",mandatory:!0,description:"Integer specifying the method of death"},{name:"Weapon",mandatory:!0,description:"The weapon number of the weapon used to inflict the damage"},{name:"Point",mandatory:!0,description:"Damage point"},{name:"Direction",mandatory:!0,description:"(vector) The direction of the damage"},{name:"Hit Loc",mandatory:!0,description:"The location of the hit"},{name:"Damage Origin",mandatory:!0,description:"Where the damage originated from."},{name:"Offset Time",mandatory:!0,description:"The time offset for the damage"},{name:"bone index",mandatory:!0,description:"Which bone was the closest to the hit"},{name:"Surface Normal",mandatory:!0,description:"The normal of the surface impacted."}]},{_id:1875,functionName:"ForceGrenadeThrow",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Forces the player to throw a held grenade",example:"player ForceGrenadeThrow()",variables:[]},{_id:1876,functionName:"ForceOffHandEnd",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Force the player to not use offhand weapon",example:"self forceoffhandend()",variables:[]},{_id:1877,functionName:"ForceSlick",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets whether the player is forced to be on a slick surface",example:"player ForceSlick(true)",variables:[{name:"slick",mandatory:!0,description:""}]},{_id:1878,functionName:"FragButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Check if the player is pressing the frag button",example:"if ( self FragButtonPressed() ) ...",variables:[]},{_id:1879,functionName:"FreezeControls",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Blocks or unblocks control input from this player",example:"player FreezeControls( true )",variables:[{name:"freeze state",mandatory:!0,description:""}]},{_id:1880,functionName:"FreezeControlsAllowLook",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Blocks or unblocks control input from this player, but allows the player to look around",example:"level.player FreezeControlsAllowLook( true )",variables:[{name:"freeze state",mandatory:!0,description:""}]},{_id:1881,functionName:"GamepadUsedLast",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is playing with a gamepad.",example:"if( player GamepadUsedLast() )",variables:[]},{_id:1882,functionName:"GetCharacterBodyModel",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the body model for this player as selected in character customization",example:"self GetCharacterBodyModel()",variables:[{name:"modelType",mandatory:!1,description:"The index of the model type, defaults to CCBODY_MODEL_THIRDPERSON"}]},{_id:1883,functionName:"GetCharacterBodyRenderOptions",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the body render options for this player",example:"self GetCharacterBodyRenderOptions()",variables:[]},{_id:1884,functionName:"GetCharacterBodyType",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the character body type for the player.",example:"bodyIndex = self GetCharacterBodyType( )",variables:[]},{_id:1885,functionName:"GetCharacterHeadModel",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"getcybercomabilitiesServer",description:"Gets the head model for this player",example:"self GetCharacterHelmetModel()",variables:[]},{_id:1886,functionName:"GetCharacterHelmetModel",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the helmet model for this player as selected in character customization",example:"self GetCharacterHelmetModel()",variables:[{name:"modelType",mandatory:!1,description:"The index of the model type, defaults to CCBODY_MODEL_THIRDPERSON"}]},{_id:1887,functionName:"GetControllerUIModelValue",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets a data value for a given lui menu, the data name has to be precached and the value as well, if its a string.",example:'player GetControllerUIModelValue( "hudItems.regenDelayProgress")',variables:[{name:"ui model data path from controller",mandatory:!0,description:"precached name string for the data which we're trying to get."}]},{_id:1888,functionName:"GetCurrentOffHand",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the current offhand weapon",example:"weapon = self GetCurrentOffhand()",variables:[]},{_id:1889,functionName:"GetCurrentWeapon",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Gets the current player weapon",example:"currentweapon = player GetCurrentWeapon()",variables:[]},{_id:1890,functionName:"GetCurrentWeaponAltWeapon",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:'Gets the alt weapon for the players current weapon. Returns "none',example:"currentweapon = player GetCurrentWeaponAltWeapon()",variables:[]},{_id:1891,functionName:"GetCurrentWeaponSpinLerp",returnValue:"float",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the current weapon spin",example:"weapon_spin_lerp = self GetCurrentWeaponSpinLerp()",variables:[]},{_id:1892,functionName:"GetCyberComAbilities",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets player cybercombat abilities by type",example:"enabled = player GetCyberComAbility( CCOM_TYPE_CONTROL )",variables:[{name:"type",mandatory:!0,description:"found in _cybercom.gsh"}]},{_id:1893,functionName:"GetCyberComActiveType",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets player cybercom active type",example:"player GetCyberComState()",variables:[{name:"type",mandatory:!0,description:"type field"}]},{_id:1894,functionName:"GetCyberComRigs",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets player cybercombat rigs flags",example:"enabled = player GetCyberComRigs()",variables:[]},{_id:1895,functionName:"GetCyberComUpgrades",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets player cybercombat abilities by type",example:"enabled = player GetCyberComUpgrade( CCOM_TYPE_CONTROL )",variables:[{name:"type",mandatory:!0,description:"found in _cybercom.gsh"}]},{_id:1896,functionName:"GetDLCAvailable",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the mask corresponding to the DLC that the player has",example:"player GetDLCAvailable( )",variables:[]},{_id:1897,functionName:"GetEnemyDogTagModel",returnValue:"string",referenceVariable:"<entity>",section:"Player",access:"Server",description:"Get the enemy of the dog tag model currently associated character body",example:"friendly_model = player GetEnemyDogTagModel( )",variables:[]},{_id:1898,functionName:"GetFractionMaxAmmo",returnValue:"float",referenceVariable:"<player>",section:"player",access:"Server",description:"Get fraction of the max ammo",example:"frac = players[i] GetFractionMaxAmmo( lethal_grenade )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to give max ammo to"}]},{_id:1899,functionName:"GetFractionStartAmmo",returnValue:"float",referenceVariable:"<player>",section:"player",access:"Server",description:"Give fraction of start ammo to the player for the weapon",example:"start = player GetFractionStartAmmo( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to give ammo to"}]},{_id:1900,functionName:"GetFriendlies",returnValue:"entity[]",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns an array of friendly players. The player called on is not included in the array.",example:"friends = self GetFriendlies()",variables:[{name:"bool",mandatory:!1,description:"true, return only players that are alive, false return all players"}]},{_id:1901,functionName:"GetFriendlyDogTagModel",returnValue:"string",referenceVariable:"<entity>",section:"Player",access:"Server",description:"Get the friendly of the dog tag model currently associated character body",example:"friendly_model = player GetFriendlyDogTagModel( )",variables:[]},{_id:1902,functionName:"GetGUID",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the GUID of the player",example:"guid = self GetGUID()",variables:[]},{_id:1903,functionName:"GetGunAngles",returnValue:"vector",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the player's gun angles",example:"angles = player GetGunAngles()",variables:[]},{_id:1904,functionName:"GetHeroAbilityName",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns the name of the weapon assigned to the currently selected body",example:"weaponName = self GetHeroAbilityName()",variables:[]},{_id:1905,functionName:"GetHeroWeaponName",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns the name of the weapon assigned to the currently selected body",example:"weaponName = self GetHeroWeaponName()",variables:[]},{_id:1906,functionName:"GetInventoryHeldWeapon",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the player's inventory held weapon",example:"inventoryWeapon = player GetInventoryHeldWeapon()",variables:[]},{_id:1907,functionName:"GetInventoryWeapon",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the inventory weapon",example:"inventoryWeapon = self GetInventoryWeapon()",variables:[]},{_id:1908,functionName:"GetIpAddress",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the ip address of the player",example:"ipAddress = self GetIpAddress()",variables:[]},{_id:1909,functionName:"GetLeagueTeamID",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the league team ID",example:"id = player GetLeagueTeamID()",variables:[]},{_id:1910,functionName:"GetLightingState",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the current lighting state for the player",example:"ls = player GetLightingState()",variables:[]},{_id:1911,functionName:"GetLockOnLossRadius",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns the lock on loss radius for the currently equipped heatseeking launcher.",example:"radius = player GetLockOnRadius()",variables:[]},{_id:1912,functionName:"GetLockOnOrigin",returnValue:"vector",referenceVariable:"<player>",section:"Player",access:"Server",description:"gets the origin to use for the replay gun lockon on the entity",example:"player GetLockOnOrigin( entity )",variables:[{name:"bool",mandatory:!0,description:""}]},{_id:1913,functionName:"GetLockOnRadius",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns the lock on radius for the currently equipped heatseeking launcher.",example:"radius = player GetLockOnRadius()",variables:[]},{_id:1914,functionName:"GetLockOnSpeed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns the lock on speed in miliseconds for the currently equipped heatseeking launcher.",example:"speed = player GetLockOnSpeed()",variables:[]},{_id:1915,functionName:"GetLUIMenu",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns a handle to a lui menu.",example:'player GetLUIMenu( "myMenu" )',variables:[{name:"lui menu name",mandatory:!0,description:"name of the menu."}]},{_id:1916,functionName:"GetLUIMenuData",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the current value for the given data name.",example:'player GetLUIMenuData( menu, "title" )',variables:[{name:"lui menu handle",mandatory:!0,description:"handle for the lui menu."},{name:"lui menu data name",mandatory:!0,description:"name of the data which had been set on the menu."}]},{_id:1917,functionName:"GetMpDialogName",returnValue:"string",referenceVariable:"<entity>",section:"Player",access:"Server",description:"Get the name of the mpdialog bundle of the currently associated character body",example:"mpDialogBundleName = player GetMpDialogName( )",variables:[]},{_id:1918,functionName:"GetNormalizedCameraMovement",returnValue:"vector",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the player's camera movement normalized",example:"v_stick = player GetNormalizedCameraMovement()",variables:[]},{_id:1919,functionName:"GetNormalizedMovement",returnValue:"vector",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the player's movement normalized",example:"norm_move = self GetNormalizedMovement()",variables:[]},{_id:1920,functionName:"GetOffHandSecondaryClass",returnValue:"string",referenceVariable:"<player>",section:"player",access:"Server",description:"Get whether the player is using a flash or smoke",example:"offhand_secondary = self GetOffHandSecondaryClass()",variables:[]},{_id:1921,functionName:"GetPerks",returnValue:"string[]",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns an array of all player perks. The array is size 0 if the player has no perks.",example:"perks = player GetPerks()",variables:[]},{_id:1922,functionName:"GetPlayerAngles",returnValue:"vector",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the player view angles",example:"angles = player GetPlayerAngles()",variables:[]},{_id:1923,functionName:"GetPlayerAttachmentCosmeticVariantIndexes",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the player's held weapon acvi",example:"acvi = self GetPlayerAttachmentCosmeticVariantIndexes( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to get acvi from"}]},{_id:1924,functionName:"GetPlayerCameraPos",returnValue:"vector",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the player's camera position",example:"vieworg = player GetCameraPos()",variables:[]},{_id:1925,functionName:"GetPlayerGenderType",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns the gender string of the player",example:'if ( self GetPlayerGender() == "male" )',variables:[{name:"mode",mandatory:!0,description:"SessionMode"}]},{_id:1926,functionName:"GetPlayerMovementState",returnValue:"int",referenceVariable:"",section:"Player",access:"Server",description:"Returns the player movement state for the match record.",example:null,variables:[]},{_id:1927,functionName:"GetPlayerSelectedGesture",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the equipped gesture",example:"gesture = player GetPlayerSelectedGesture( 0 )",variables:[{name:"gestureType",mandatory:!0,description:"The type of gesture to get"}]},{_id:1928,functionName:"GetPlayerSelectedTaunt",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the equipped taunt",example:"taunt = player GetPlayerSelectedTaunt( 0 )",variables:[{name:"tauntType",mandatory:!0,description:"The type of taunt to get"}]},{_id:1929,functionName:"GetPlayerShowcaseWeapon",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the showcase weapon of the given player",example:"showcaseWeapon = player GetPlayerShowcaseWeapon()",variables:[]},{_id:1930,functionName:"GetPlayerViewHeight",returnValue:"float",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the player's view height",example:"height = player GetPlayerViewHeight()",variables:[]},{_id:1931,functionName:"GetReplayGunLockOnOrigin",returnValue:"vector",referenceVariable:"<player>",section:"Player",access:"Server",description:"gets the origin to use for the replay gun lockon on the entity",example:"player GetLockOnOrigin( entity )",variables:[{name:"bool",mandatory:!0,description:""}]},{_id:1932,functionName:"GetSnapshotAckIndex",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the snapshot acknowledgment index",example:"num = self getsnapshotackindex()",variables:[]},{_id:1933,functionName:"GetSunShadowSplitDistance",returnValue:"float",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the current sun shadow split difference for the player",example:"distance = player GetSunShadowSplitDistance()",variables:[]},{_id:1934,functionName:"GetTargetScreenAngles",returnValue:"vector",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get target screen view angles",example:"angles = self GetTargetScreenAngles( targetpos )",variables:[{name:"targetpos",mandatory:!0,description:"The position to get angles for."}]},{_id:1935,functionName:"GetVehicleBoostTime",returnValue:"float",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the vehicle's max boost time",example:"boostTime = player GetVehicleBoostTime()",variables:[]},{_id:1936,functionName:"GetVehicleBoostTimeLeft",returnValue:"float",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the vehicle's remaining boost time",example:"boostTimeLeft = player GetVehicleBoostTimeLeft()",variables:[]},{_id:1937,functionName:"GetVehicleFocusEntity",returnValue:"entity",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the current vehicle focus entity for the player",example:"focusEnt = player GetVehicleFocusEntity()",variables:[]},{_id:1938,functionName:"GetVehicleMinBoostTime",returnValue:"float",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the vehicle's min boost time needed in order to boost",example:"minBoostTime = player GetVehicleMinBoostTime()",variables:[]},{_id:1939,functionName:"GetVehicleOccupied",returnValue:"entity",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns the vehicle entity that the player occupies. If player isn't in a vehicle then this causes an error.",example:"self GetVehicleOccupied()",variables:[]},{_id:1940,functionName:"GetWeapon",returnValue:"weapon",referenceVariable:"",section:"Player",access:"Server",description:"Gets weapon structure to be usable.",example:'weapon = GetWeapon( "pistol_standard" );',variables:[{name:"weapon",mandatory:!0,description:"The weapon"}]},{_id:1941,functionName:"GetWeaponAcvi",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets weapon options from held weapon",example:"primaryWeaponAcvi = self GetWeaponAcvi( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon"}]},{_id:1942,functionName:"GetWeaponAmmoClip",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the weapon's ammo count in clip",example:"ammo = self GetWeaponAmmoClip( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to get ammo count from"}]},{_id:1943,functionName:"GetWeaponAmmoFuel",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the weapon's fuel count",example:"fuel = self GetWeaponAmmoFuel( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to get fuel count from"}]},{_id:1944,functionName:"GetWeaponAmmoStock",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Get the weapon's total ammo count",example:"ammo = self GetWeaponAmmoStock( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to get ammo count from"}]},{_id:1945,functionName:"GetWeaponForWeaponRoot",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns a weapon that the player is holding that has the same weapon root. Returns undefined if the player is not holding the weapon.",example:"weapon_with_attachments = player GetWeaponForWeaponRoot( <weapon> )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to check"}]},{_id:1946,functionName:"GetWeaponOptions",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get the weapon's render options",example:"weaponOptions = self GetWeaponOptions( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to get options from"}]},{_id:1947,functionName:"GetWeaponsList",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Gets an array of all weapons that the player has. Alt-mode weapons by default are not included",example:"weapList = player GetWeaponsList()",variables:[{name:"include_alt_modes",mandatory:!1,description:"1/True to include alt-mode weapons"}]},{_id:1948,functionName:"GetWeaponsListPrimaries",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:null,example:null,variables:[]},{_id:1949,functionName:"GetXUID",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gets the XUID of the player",example:"guid = self GetXUID()",variables:[]},{_id:1950,functionName:"GiveDedicatedShadow",returnValue:"void",referenceVariable:"<entity>",section:"Player",access:"Server",description:"Sets the model lod bias",example:"player GiveDedicatedShadow( 8 )",variables:[{name:"entity",mandatory:!0,description:"The entity to enable the dedicated shadow on"}]},{_id:1951,functionName:"GiveMaxAmmo",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Give the weapon max ammo",example:"self GiveMaxAmmo( primary )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to give ammo to"}]},{_id:1952,functionName:"GiveNextBaseWeapon",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Give the player the next base weapon",example:"self GiveNextBaseWeapon()",variables:[]},{_id:1953,functionName:"GiveStartAmmo",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Give the weapon initial ammo",example:"self GiveStartAmmo( primary )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to give ammo to"}]},{_id:1954,functionName:"GiveWeapon",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Give a weapon to the player",example:"e_player GiveWeapon( w_spike_launcher )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to give"},{name:"options",mandatory:!1,description:"The weapon options"},{name:"acvi",mandatory:!1,description:"The attachment cosmetic variant index"}]},{_id:1955,functionName:"GiveWeaponNextAttachment",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Give the weapon the next attachment",example:'self giveweaponnextattachment( "muzzle" )',variables:[{name:"attachment point",mandatory:!0,description:"The attachment point name"}]},{_id:1956,functionName:"HasAGrenadePulledBack",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"check is a client has a grenade (any type including special) currently pulled back",example:"self HasAGrenadePulledBack( )",variables:[]},{_id:1957,functionName:"HasCyberComAbility",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Checks to see if player has ability",example:'enabled = player HasCyberComAbility( "cybercom_systemoverload" )',variables:[{name:"name",mandatory:!0,description:"Name of the ability"},{name:"typeenabled",mandatory:!1,description:"Whether the player has the correct type enabled."}]},{_id:1958,functionName:"HasCyberComRig",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Checks to see if player has rig",example:'enabled = player HasCyberComRig( "cybercom_systemoverload" )',variables:[{name:"name",mandatory:!0,description:"Whether the player should be jammed or not."}]},{_id:1959,functionName:"HasDLCAvailable",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Determine whether the player has paid for the specified dlc package",example:'player HasDLCAvailable( "dlc3" )',variables:[{name:"pack id",mandatory:!0,description:"the pack id"}]},{_id:1960,functionName:"HasMaxPrimaryWeapons",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if the player has maximum primary weapons",example:"if( self HasMaxPrimaryWeapons() )",variables:[]},{_id:1961,functionName:"HasPerk",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"test if player has a perk",example:'player HasPerk( "specialty_gpsjammer" )',variables:[{name:"perk name",mandatory:!0,description:"the perk to check"}]},{_id:1962,functionName:"HasRiotShield",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Return true if player has a riot shield in their inventory.",example:"if ( player HasRiotShield() )",variables:[]},{_id:1963,functionName:"HasWeapon",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player has the given weapon",example:"if( e_player HasWeapon( w_spike_launcher, true ) )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to check"},{name:"ignore_attachments",mandatory:!1,description:"Only check the root weapon, ignore all the attachments."}]},{_id:1964,functionName:"HideViewModel",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Hide the player's current view model.",example:"player HideViewModel()",variables:[]},{_id:1965,functionName:"InitialWeaponRaise",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Setup weaponstate to force first raise animation",example:'self InitialWeaponRaise( "ak47" )',variables:[{name:"weapon name",mandatory:!0,description:"The name of the weapon to try first raise anim with"}]},{_id:1966,functionName:"InventoryButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the inventory button",example:"if ( self InventoryButtonPressed() ) ...",variables:[]},{_id:1967,functionName:"IsCarryingTurret",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if player is carrying turret or not.",example:"player IsCarryingTurret()",variables:[]},{_id:1968,functionName:"IsChargeShotPending",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if player has a charge shot pending with a charge shot weapon",example:"if( self IsChargeShotPending() )",variables:[]},{_id:1969,functionName:"IsDroppingWeapon",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if the player is currently dropping their weapon",example:"player IsDroppingWeapon()",variables:[]},{_id:1970,functionName:"IsFiring",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player is currently meleeing",example:"player IsFiring()",variables:[]},{_id:1971,functionName:"IsGrappling",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if the player is currently grappling",example:"player IsGrappling()",variables:[]},{_id:1972,functionName:"IsHost",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if the player is the host",example:"player IsHost()",variables:[]},{_id:1973,functionName:"IsHostForBots",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if the passed in entity is the host for bots",example:"player IsHostForBots()",variables:[]},{_id:1974,functionName:"IsInMoveMode",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if the player is in either of the given move modes",example:'if ( player IsInMoveMode( "ufo", "noclip" ) )',variables:[{name:"move_mode_1",mandatory:!0,description:"The move mode to check"},{name:"move_mode_2",mandatory:!1,description:"The move mode to check"}]},{_id:1975,functionName:"IsInVehicle",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns whether or not this player is currently occupying a vehicle.",example:"self IsInVehicle()",variables:[]},{_id:1976,functionName:"IsLocalToHost",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if the player is on the same physical machine as the host",example:"player IsLocalToHost()",variables:[]},{_id:1977,functionName:"IsLookingAt",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player is looking at entity",example:"if( isplayer( self.enemy ) && self.enemy islookingat( self ) )",variables:[{name:"entity",mandatory:!0,description:"The entity to check"}]},{_id:1978,functionName:"IsMeleeing",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player is currently meleeing",example:"player IsMeleeing()",variables:[]},{_id:1979,functionName:"IsPlayerOnSameMachine",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns whether or not this player is on the same machine as the other player.",example:"if ( self IsPlayerOnSameMachine( player ) )",variables:[{name:"player",mandatory:!0,description:"The player to test against"}]},{_id:1980,functionName:"IsReloading",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if the player is currently reloading",example:"player IsReloading()",variables:[]},{_id:1981,functionName:"IsRemoteControlling",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns whether or not this player is currently occupying a remote controlled entity.",example:"self IsRemoteControlling()",variables:[]},{_id:1982,functionName:"IsSwitchingWeapons",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if the player is currently switching weapons",example:"player IsSwitchingWeapons()",variables:[]},{_id:1983,functionName:"IsTalking",returnValue:"int",referenceVariable:"<player>",section:"client",access:"Server",description:"Returns true if the player is talking via voice chat",example:"if( player IsTalking() )",variables:[]},{_id:1984,functionName:"IsThrowingGrenade",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Returns true if the player is currently throwing a grenade",example:"player IsThrowingGrenade()",variables:[]},{_id:1985,functionName:"IsUsingOffHand",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns true if player is using offhand weapon",example:"if( self IsUsingOffHand() )",variables:[]},{_id:1986,functionName:"IsWeaponOverheating",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Is the players Weapon Overheating?",example:"self IsWeaponOverheating()",variables:[{name:"get heatval",mandatory:!1,description:"If positive pass back the heatval of the weapon (0 to 100)."},{name:"weapon",mandatory:!1,description:"If present check this specific weapon otherwise check the player's current weapon."}]},{_id:1987,functionName:"IsWeaponViewOnlyLinked",returnValue:"bool",referenceVariable:"<player>",section:"Player",access:"Server",description:"Returns whether or not this player is linked to an enity with weapon view only linking.",example:"self IsWeaponViewOnlyLinked()",variables:[]},{_id:1988,functionName:"JumpButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the 'jump' button.",example:"while( self JumpButtonPressed() )...",variables:[]},{_id:1989,functionName:"LinkGuidedMissileCamera",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"set player eflags for the guided missile",example:"player LinkGuidedMissileCamera()",variables:[]},{_id:1990,functionName:"LinkToMissile",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Links a player camera and controls to a missile",example:"player LinkToMissile( rocket, true )",variables:[{name:"missle",mandatory:!0,description:"missile entity to link the player to"},{name:"boost_enabled",mandatory:!1,description:""},{name:"brake_enabled",mandatory:!1,description:""}]},{_id:1991,functionName:"MeleeButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Check if the player is pressing the melee button",example:"if ( self MeleeButtonPressed() ) ...",variables:[]},{_id:1992,functionName:"MurderLine",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Get all the enemy players on the line between given points and murder them to death",example:'player MurderLine( origin, endpos, "kniferang_mp" )',variables:[{name:"from",mandatory:!0,description:"The from position"},{name:"to",mandatory:!0,description:"The to position"},{name:"weapon",mandatory:!0,description:"The weapon used"}]},{_id:1993,functionName:"NextPlayerRenderOption",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the next player render option",example:"level.dev_cac_player NextPlayerRenderOption( tag, forward )",variables:[{name:"optionName",mandatory:!0,description:"The tag of the next option"},{name:"forward",mandatory:!0,description:"The delta"}]},{_id:1994,functionName:"OffhandSpecialButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the gadget button",example:"if ( self OffhandSpecialButtonPressed() ) ...",variables:[]},{_id:1995,functionName:"OpenLUIMenu",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Opens a lui menu( has to be precahced ) and returns a handle to it.",example:'player OpenLUIMenu( "myMenu", true )',variables:[{name:"lui menu name",mandatory:!0,description:"name of the menu."},{name:"persistent",mandatory:!1,description:"the menu will remain open even if the player dies."}]},{_id:1996,functionName:"OpenMenu",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Open the menu with the given menu index",example:'self openMenu( game[ "menu_changeclass" ] )',variables:[{name:"menu index",mandatory:!0,description:"The menu index"}]},{_id:1997,functionName:"OpenMenuNoMouse",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Open the menu with the given menu index",example:'self OpenMenuNoMouse( game[ "menu_changeclass" ] )',variables:[{name:"menu index",mandatory:!0,description:"The menu index"}]},{_id:1998,functionName:"PickupAmmoEvent",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Lets the client know a weapon was picked up",example:"self PickupWeaponEvent( weapon )",variables:[{name:"weapon",mandatory:!1,description:""}]},{_id:1999,functionName:"PickupWeaponEvent",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Lets the client know a weapon was picked up",example:"self PickupWeaponEvent( weapon )",variables:[{name:"weapon",mandatory:!0,description:""}]},{_id:2e3,functionName:"PingPlayer",returnValue:"void",referenceVariable:"<player>",section:"objective",access:"Server",description:"Flashes a player on their teammate's compasses",example:"self PingPlayer()",variables:[]},{_id:2001,functionName:"PlayBombDefuse",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Play the players bomb defuse animation",example:"self PlayBombDefuse()",variables:[]},{_id:2002,functionName:"PlayBombPlant",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Play the players bomb plant animation",example:"self PlayBombPlant()",variables:[]},{_id:2003,functionName:"PlayClientAirstrike",returnValue:"void",referenceVariable:"",section:"Player",access:"Server",description:"Plays the client sided part of the airstrike/bombrun",example:'PlayClientAirstrike( pos, yaw, "marines", "axis", owner, "left", height )',variables:[{name:"position",mandatory:!0,description:"The position of airstrike"},{name:"yaw",mandatory:!0,description:"The yaw"},{name:"teamFaction",mandatory:!0,description:"The team faction"},{name:"team",mandatory:!0,description:"The team"},{name:"owner",mandatory:!0,description:"The owner of airstike"},{name:"exittype",mandatory:!0,description:"The exit type"},{name:"height",mandatory:!0,description:"The height"}]},{_id:2004,functionName:"PlayClientNapalm",returnValue:"void",referenceVariable:"",section:"Player",access:"Server",description:"Plays the client sided part of the Napalm",example:'PlayClientNapalm( startPos, plane.yaw, "vietcong", "axis", plane.owner, "left", height )',variables:[{name:"position",mandatory:!0,description:"The position of Napalm"},{name:"yaw",mandatory:!0,description:"The yaw"},{name:"teamFaction",mandatory:!0,description:"The team faction"},{name:"team",mandatory:!0,description:"The team"},{name:"owner",mandatory:!0,description:"The owner of Napalm"},{name:"exittype",mandatory:!0,description:"The exit type"},{name:"height",mandatory:!0,description:"The height"}]},{_id:2005,functionName:"PlayerADS",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Gets the player weapon position fraction",example:"if ( self PlayerADS() > 0.3 )",variables:[]},{_id:2006,functionName:"PlayerKnockback",returnValue:"void",referenceVariable:"<actor>",section:"Player",access:"Server",description:"Turn knockback on and off for a player",example:"self PlayerKnockback( true )",variables:[{name:"true/false",mandatory:!0,description:"if true, client affected by knockback"}]},{_id:2007,functionName:"PlayHitMarker",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Plays a hit marker event",example:'self PlayHitMarker( "evt_squad_activate", 3, "flakjacket" )',variables:[{name:"sound name",mandatory:!0,description:"The name of the sound or hash"},{name:"damage state",mandatory:!1,description:"How damaged the victim is"},{name:"perk feedback",mandatory:!1,description:"If the victim had any perks active that modified the hit marker"},{name:"is dead",mandatory:!1,description:"If the victim has died from this hit marker and needs a red flash"}]},{_id:2008,functionName:"PlayLocalSound",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Plays a sound locally",example:'self playlocalsound( "evt_squad_activate" )',variables:[{name:"sound name",mandatory:!0,description:"The name of the sound or hash"}]},{_id:2009,functionName:"PopulateCyberComUnlocks",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Fills ability array with unlock data",example:"player PopulateCyberComUnlocks()",variables:[{name:"type",mandatory:!0,description:"type field"}]},{_id:2010,functionName:"PrimaryButtonPressedLocal",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the local player is pressing the primary button (BUTTON_A)",example:"if ( self PrimaryButtonPressedLocal() ) ...",variables:[]},{_id:2011,functionName:"PrimeMovie",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Starts priming the cinematic movie to be played.",example:'self PrimeMovie( "mymovie" )',variables:[{name:"moviename",mandatory:!0,description:"movie name"}]},{_id:2012,functionName:"ReloadButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the 'usereload' button.",example:"while( self reloadButtonPressed() )...",variables:[]},{_id:2013,functionName:"ReloadWeaponAmmo",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the weapon's ammoclip from the ammo",example:"self ReloadWeaponAmmo( <weapon> )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to be reloaded"}]},{_id:2014,functionName:"RemoteControlTurret",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Remote control into a turret",example:"player RemoteControlTurret( turret )",variables:[{name:"turret",mandatory:!0,description:"the remote controlled turret."}]},{_id:2015,functionName:"RemoteControlTurretOff",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Stops remote controlling a turret",example:"player RemoteControlTurretOff( turret )",variables:[{name:"turret",mandatory:!0,description:"the remote controlled turret."}]},{_id:2016,functionName:"ResetAnimations",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Reset player animations after a body type change",example:"self ResetAnimations())",variables:[]},{_id:2017,functionName:"ResetCharacterCustomization",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Resets all of the character customization to what is in the player stats",example:"self ResetCharacterCustomization()",variables:[]},{_id:2018,functionName:"ResetFlashBack",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Resets the players flashback history",example:"self resetflashback()",variables:[]},{_id:2019,functionName:"ResetSpreadOverride",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Reset the player's aim spread to 255",example:"self ResetSpreadOverride()",variables:[]},{_id:2020,functionName:"Revive",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Revive the player",example:"self Revive())",variables:[]},{_id:2021,functionName:"RevivePlayer",returnValue:"void",referenceVariable:"<client>",section:"Player",access:"Server",description:"Callback from script to get player out of last stand, increases health, removes damage timer, should clear screen of damageFX",example:"self RevivePlayer()",variables:[]},{_id:2022,functionName:"SayAll",returnValue:"void",referenceVariable:"<player>",section:"client",access:"Server",description:"Write a client chat message from this client to everybody",example:"self SayAll( saytext )",variables:[{name:"message",mandatory:!0,description:"A localizable message to send to all players"}]},{_id:2023,functionName:"SayTeam",returnValue:"void",referenceVariable:"<player>",section:"client",access:"Server",description:"Write a client chat message from this client to everybody on their team",example:"self SayTeam( sayText )",variables:[{name:"message",mandatory:!0,description:"A localizable message to send to all players on the player's team."}]},{_id:2024,functionName:"SecondaryButtonPressedLocal",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the local player is pressing the secondary button (BUTTON_B)",example:"if ( self SecondaryButtonPressedLocal() ) ...",variables:[]},{_id:2025,functionName:"SecondaryOffhandButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Check if the player is pressing the secondary offhand button",example:"if ( self SecondaryOffhandButtonPressed() ) ...",variables:[]},{_id:2026,functionName:"SetActionSlot",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Sets action slot for the player",example:'self SetActionSlot( 4, "weapon", level.DEAD_CONTROL_WEAPON )',variables:[{name:"slot",mandatory:!0,description:"The action slot"},{name:"action slot type",mandatory:!0,description:'The type of slot. can be "weapon"/"altMode"/""'},{name:"weapon",mandatory:!1,description:"The weapon to set"}]},{_id:2027,functionName:"SetArenaPoints",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the player's arena points",example:"player SetArenaPoints( 19 )",variables:[{name:"point",mandatory:!0,description:"points"}]},{_id:2028,functionName:"SetBlockWeaponPickup",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Blocks the player from picking up other weapons while using this weapon",example:"self setBlockWeaponPickup( killstreakWeapon, true )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to set block for"},{name:"enabled",mandatory:!0,description:"True if weapon pickup should be blocked"}]},{_id:2029,functionName:"SetCarryingObject",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Enable or disable the player carrying object flag. Disables doublejump and juke",example:"self SetCarryingObject( true ); // disables doublejump and juke",variables:[{name:"onoff",mandatory:!0,description:"True to enable, false otherwise"}]},{_id:2030,functionName:"SetCharacterBodyStyle",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the character body style for the current body type. Resets all colors for the body style to default.",example:"self SetCharacterBodyStyle( 0 )",variables:[{name:"character body type index",mandatory:!0,description:"The index of the character body type"}]},{_id:2031,functionName:"SetCharacterBodyType",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the character body type for the player. Resets all other customization to default for the new body type.",example:"self SetCharacterBodyType( 1 )",variables:[{name:"character body type index",mandatory:!0,description:"The index of the character body type"},{name:"character head type index",mandatory:!1,description:"The index of the character head type"}]},{_id:2032,functionName:"SetCharacterHelmetStyle",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the character body style for the current helmet type. Resets all colors for the helmet style to default.",example:"self SetCharacterHelmetStyle( 0 )",variables:[{name:"character body type index",mandatory:!0,description:"The index of the character body type"}]},{_id:2033,functionName:"SetClientCGObjectiveText",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the objective text only on this client",example:"self SetClientCGObjectiveText( util",variables:[{name:"text",mandatory:!0,description:"The text to set"}]},{_id:2034,functionName:"SetClientCompass",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets compass dvar only on this client",example:"self SetClientCompass( 0 )",variables:[{name:"value",mandatory:!0,description:"The value to set"}]},{_id:2035,functionName:"SetClientDrawTalk",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets cg_drawTalk dvar only on this client",example:"self SetClientDrawTalk( 3 )",variables:[{name:"value",mandatory:!0,description:"The value to set"}]},{_id:2036,functionName:"SetClientFocalLength",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets cg_focalLength dvar only on this client",example:"self SetClientFocalLength( 23.3622 )",variables:[{name:"value",mandatory:!0,description:"The focal length value to set (float)"}]},{_id:2037,functionName:"SetClientHUDHardcore",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets ui_hud_hardcore dvar only on this client",example:"self SetClientHUDHardcore( 0 )",variables:[{name:"value",mandatory:!0,description:"The value to set"}]},{_id:2038,functionName:"SetClientMiniScoreboardHide",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets miniscoreboardhide dvar only on this client",example:"players[i] SetClientMiniScoreboardHide( true )",variables:[{name:"enable",mandatory:!0,description:"True/1 to hide, false/0 otherwise"}]},{_id:2039,functionName:"SetClientNumLives",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets scr_numLives dvar only on this client",example:"self SetClientNumLives( level.numLives )",variables:[{name:"numLives",mandatory:!0,description:"The numlives to set"}]},{_id:2040,functionName:"SetClientPlayerPushAmount",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets playerPushAmount dvar only on this client",example:"self SetClientPlayerPushAmount( 1 )",variables:[{name:"amount",mandatory:!0,description:"The push amount"}]},{_id:2041,functionName:"SetClientPlayerSprintTime",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets player_sprintTime dvar only on this client",example:"self SetClientPlayerSprintTime( level.playerSprintTime )",variables:[{name:"time",mandatory:!0,description:"The spring time"}]},{_id:2042,functionName:"SetClientScriptMainMenu",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets g_scriptMainMenu dvar only on this client",example:'self SetClientScriptMainMenu( game["menu_class"] )',variables:[{name:"value",mandatory:!0,description:"The value to set"}]},{_id:2043,functionName:"SetClientThirdPerson",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the client to be third person",example:"self SetClientThirdPerson( 1 )",variables:[{name:"onoff",mandatory:!0,description:"1 to set, 0 otherwise"}]},{_id:2044,functionName:"SetClientThirdPersonAngle",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets cg_thirdPerson dvar only on this client",example:"self SetClientThirdPersonAngle( 354 )",variables:[{name:"angle",mandatory:!0,description:"The angle to set"}]},{_id:2045,functionName:"SetClientUIVisibilityFlag",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets a HUD visibility flag only on this client",example:'e_player SetClientUIVisibilityFlag( "hud_visible", 1 )',variables:[{name:"flagName",mandatory:!0,description:"The name of the flag"},{name:"value",mandatory:!0,description:"The value to set"}]},{_id:2046,functionName:"SetControllerUIModelValue",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets a data value for a given lui menu, the data name has to be precached and the value as well, if its a string.",example:'player SetControllerUIModelValue( "hudItems.regenDelayProgress", 0.2 )',variables:[{name:"ui model data path from controller",mandatory:!0,description:"precached name string for the data which we're trying to set."},{name:"ui model value",mandatory:!0,description:"value for the data which we're trying to set on the controller."}]},{_id:2047,functionName:"SetCurrentSpectatorClient",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the given client as a spectator",example:"self SetCurrentSpectatorClient( player )",variables:[{name:"client",mandatory:!0,description:"The client to set spectator"}]},{_id:2048,functionName:"SetCurrentWeaponSpinLerp",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the current weapon's spin",example:"self SetCurrentWeaponSpinLerp( 0.0 )",variables:[{name:"spin",mandatory:!0,description:"The spin value"}]},{_id:2049,functionName:"SetCyberComAbilities",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets player cybercombat abilities by type",example:"enabled = player SetCyberComAbility( CCOM_TYPE_CONTROL, true )",variables:[{name:"type",mandatory:!0,description:"found in _cybercom.gsh"},{name:"upgrade",mandatory:!1,description:"true/false"}]},{_id:2050,functionName:"SetCyberComAbility",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets player cybercombat ability",example:'enabled = player SetCyberComAbility( "cybercom_systemoverload" )',variables:[{name:"name",mandatory:!0,description:"Whether the player should be jammed or not."},{name:"upgrade",mandatory:!1,description:"true if it is an upgrade"}]},{_id:2051,functionName:"SetCyberComAbilityFlags",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets player cybercombat Abilities",example:"enabled = player SetCyberComAbilities( ability, CCOM_TYPE_CONTROL )",variables:[{name:"Abilities",mandatory:!0,description:"Abilities bit field"},{name:"Type",mandatory:!0,description:"Cybercom type field"}]},{_id:2052,functionName:"SetCyberComActiveType",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets player cybercom active type",example:"player SetCyberComState( type )",variables:[{name:"type",mandatory:!0,description:"type field"}]},{_id:2053,functionName:"SetCyberComRig",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets player cybercombat rig",example:'enabled = player SetCyberComRig( "cybercom_systemoverload" )',variables:[{name:"name",mandatory:!0,description:"Whether the player should be jammed or not."},{name:"upgraded",mandatory:!1,description:"Bool, Upgraded; Whether this rig is set to the upgraded level"},{name:"slot",mandatory:!1,description:"Int Slot 0-1 range, Slot to put this rig into."}]},{_id:2054,functionName:"SetCyberComRigsFlags",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets player cybercombat rigs",example:"enabled = player SetCyberComrigs( CCOM_TYPE_CONTROL, true )",variables:[{name:"rigs",mandatory:!0,description:"rig bit field"}]},{_id:2055,functionName:"SetCyberComUpgradeFlags",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets player cybercombat Upgrades",example:"enabled = player SetCyberComUpgrades( upgrade, CCOM_TYPE_CONTROL )",variables:[{name:"Upgrades",mandatory:!0,description:"Upgrades bit field"},{name:"Type",mandatory:!0,description:"Cybercom type field"}]},{_id:2056,functionName:"SetDisabledTargetHint",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set target not selected hint",example:"self SetDisabledTargetHint()",variables:[{name:"weapon",mandatory:!1,description:""}]},{_id:2057,functionName:"SetElectrifiedState",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the player into the electrified state for 3rd person anim purposes. Different from SetElectrified() which plays the postfx",example:null,variables:[{name:"electrified",mandatory:!0,description:""}]},{_id:2058,functionName:"SetEnterTime",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the player's session enter time",example:"self setEnterTime( getTime() )",variables:[{name:"time",mandatory:!0,description:"The time to set"}]},{_id:2059,functionName:"SetEverHadWeaponAll",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the EverHadAllPlayerHeldWeapons flag of the player",example:"self SetEverHadWeaponAll( true )",variables:[{name:"flag",mandatory:!0,description:"True to set the flag"}]},{_id:2060,functionName:"SetHighlighted",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Highlight the player",example:"self SetHighlighted( true )",variables:[{name:"onoff",mandatory:!0,description:"True to highlight, false otherwise"}]},{_id:2061,functionName:"SetInventoryHeldWeapon",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the player's inventoryHeldWeapon.",example:"player SetInventoryHeldWeapon( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The held weapon to be set as inventoryHeldWeapon. Use undefined to clear the inventoryHeldWeapon."}]},{_id:2062,functionName:"SetInventoryWeapon",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the inventory weapon",example:"self SetInventoryWeapon( weapon )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to set"}]},{_id:2063,functionName:"SetLowReady",returnValue:"void",referenceVariable:"",section:"Player",access:"Server",description:"set the player into low ready weapon state.",example:"self SetLowReady(true);",variables:[]},{_id:2064,functionName:"SetLUIMenuData",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets a data value for a given lui menu, the data name has to be precached and the value as well, if its a string.",example:'player SetLUIMenuData( menu, "title", "Some Title" )',variables:[{name:"lui menu handle",mandatory:!0,description:"handle to the lui menu opened."},{name:"lui menu data name",mandatory:!0,description:"precached name string for the data which we're trying to set."},{name:"lui menu data value",mandatory:!0,description:"value for the data which we're trying to set on the menu."}]},{_id:2065,functionName:"SetModelLodBias",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the model lod bias",example:"player SetModelLodBias( 8 )",variables:[{name:"bias",mandatory:!0,description:"bias. Setting of 0 reverts to the model lod bias."}]},{_id:2066,functionName:"SetNoLOSOnTargetsHint",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set target not selected hint",example:"self SetNoLOSOnTargetsHint()",variables:[{name:"weapon",mandatory:!1,description:""}]},{_id:2067,functionName:"SetNoTargetsHint",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set target not selected hint",example:"self SetNoTargetsHint()",variables:[{name:"weapon",mandatory:!1,description:""}]},{_id:2068,functionName:"SetOffhandPrimaryClass",returnValue:"string",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set whether the player is using a grenade or gear.",example:'player setOffhandPrimaryClass( "claymore_mp" )',variables:[{name:"name",mandatory:!0,description:"the weapon name"}]},{_id:2069,functionName:"SetOffhandSecondaryClass",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set whether the player is using a flash or smoke grenade.",example:'player SetOffhandPrimaryClass( "concussion_grenade_mp" )',variables:[{name:"name",mandatory:!0,description:"the weapon name"}]},{_id:2070,functionName:"SetOffhandVisible",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Enable or disable visibility of the offhand weapon",example:"self SetOffhandVisible( true )",variables:[{name:"onoff",mandatory:!0,description:"True/1 to enable, false otherwise"}]},{_id:2071,functionName:"SetOrigin",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set the player's origin",example:"player SetOrigin( v_origin )",variables:[{name:"origin",mandatory:!0,description:"The origin to set"}]},{_id:2072,functionName:"SetParagonIconId",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the player's paragon icon id",example:"player SetParagonIconId( 1, 1 )",variables:[{name:"paragon icon id",mandatory:!0,description:"the paragon rank id"}]},{_id:2073,functionName:"SetParagonRank",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the player's paragon rank",example:"player SetParagonRank( 1, 1 )",variables:[{name:"paragon rank id",mandatory:!0,description:"the paragon rank id"}]},{_id:2074,functionName:"SetPerk",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"give the specified perk",example:'player SetPerk( "specialty_gpsjammer" )',variables:[{name:"perk name",mandatory:!0,description:"the perk to give"}]},{_id:2075,functionName:"SetPlacementHint",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the placement hint string that will be displayed for this player.",example:"player SetPlacementHint( turret.canBePlaced )",variables:[{name:"onoff",mandatory:!0,description:"true if the hint should say that the weapon can be placed, false if not"}]},{_id:2076,functionName:"SetPlayerAngles",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set the player's view angles",example:"player SetPlayerAngles( v_angles )",variables:[{name:"angles",mandatory:!0,description:"The view angles to set"}]},{_id:2077,functionName:"SetPlayerRenderOptions",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the player render options",example:"self SetPlayerRenderOptions( playerRenderOptions )",variables:[{name:"options",mandatory:!0,description:"The player render options"}]},{_id:2078,functionName:"SetRank",returnValue:"void",referenceVariable:"<player>",section:"client",access:"Server",description:"Sets the player's rank and prestige level",example:"player SetRank( 1, 2 )",variables:[{name:"rank id",mandatory:!0,description:"the rank id"},{name:"prestige level",mandatory:!1,description:"The prestige level"}]},{_id:2079,functionName:"SetRiotshieldFailHint",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set riot shield fail hint",example:"self SetRiotshieldFailHint()",variables:[{name:"weapon",mandatory:!1,description:""}]},{_id:2080,functionName:"SetSpawnWeapon",returnValue:"void",referenceVariable:"<player>",section:"client",access:"Server",description:"Set the weapon that this player will spawn with",example:'self SetSpawnWeapon( "ak47" )',variables:[{name:"weapon name",mandatory:!0,description:"The name of the weapon to spawn with"}]},{_id:2081,functionName:"SetSpreadOverride",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set the player's aim spread",example:"self SetSpreadOverride( 0 )",variables:[{name:"value",mandatory:!0,description:"The value to set"}]},{_id:2082,functionName:"SetSprintCooldown",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the player's sprint cooldown duration",example:"self SetSprintCooldown( 4 )",variables:[{name:"duration",mandatory:!0,description:"The duration to set"}]},{_id:2083,functionName:"SetSprintDuration",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the player's sprint duration",example:"self SetSprintDuration( 4 )",variables:[{name:"duration",mandatory:!0,description:"The duration to set"}]},{_id:2084,functionName:"SetSunShadowSplitDistance",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the sun shadow split distance for the player",example:"player SetSunShadowSplitDistance( 200 )",variables:[{name:"distance",mandatory:!0,description:"split distance. Setting of 0 reverts to the default split distance."}]},{_id:2085,functionName:"SetTacticalWheel",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets whether this player will be able to use the cybercom tactical wheel or not",example:"player SetTacticalWheel( true )",variables:[{name:"enabled",mandatory:!0,description:"turn on or off"}]},{_id:2086,functionName:"SetTargetAlreadyInUseHint",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set target already in use failure hint",example:"self settargetalreadyinusehint()",variables:[{name:"weapon",mandatory:!1,description:""}]},{_id:2087,functionName:"SetTargetAlreadyTargetedHint",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set target already being targeted hint",example:"self SetTargetAlreadyTargetedHint()",variables:[{name:"weapon",mandatory:!1,description:""}]},{_id:2088,functionName:"SetTargetedEntityEndTime",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set targeted entity end time, for use on the client side in the UI.",example:"self SetTargetedEntityEndTime( weapon, 0.0 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon (player should have this weapon)"},{name:"endtime",mandatory:!0,description:"The end time of the targeted entity"}]},{_id:2089,functionName:"SetTargetedMissilesRemaining",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set targeted entity missiles remaining, for use on the client side in the UI.",example:"self SetTargetedMissilesRemaining( weapon, 0.0 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon (player should have this weapon)"},{name:"missilesRemaining",mandatory:!0,description:"The amount of missiles remaining to destroy the target"}]},{_id:2090,functionName:"SetTargetingAbortedHint",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set targeting aborted hint",example:"self SetDisabledTargetHint()",variables:[{name:"weapon",mandatory:!1,description:""}]},{_id:2091,functionName:"SetTargetOORHint",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set out of range failure hint",example:"self settargetoorhint()",variables:[{name:"weapon",mandatory:!1,description:""}]},{_id:2092,functionName:"SetTargetWrongTypeHint",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set target validity failure hint",example:"self settargetwrongtypehint()",variables:[{name:"weapon",mandatory:!1,description:""}]},{_id:2093,functionName:"SetVehicleDamageMeter",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the vehicle damage meter",example:"player SetRefEndTime( killstreaEndTime )",variables:[{name:"damage",mandatory:!0,description:"the amount of damage normalized 0..1"}]},{_id:2094,functionName:"SetVehicleDrivableDuration",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the drivable duration for the players vehicle (intended for use with client side display purposes)",example:"player SetVehicleDrivableDuration( killstreakDuration )",variables:[{name:"duration",mandatory:!0,description:"the drivable duration in milliseconds"}]},{_id:2095,functionName:"SetVehicleDrivableEndTime",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the vehicle drivable end time.",example:"player SetVehicleDrivableEndTime( killstreakEndTime )",variables:[{name:"end time",mandatory:!0,description:"the drivable end time in milliseconds"}]},{_id:2096,functionName:"SetVehicleFocusEntity",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Gives a player's dedicated shadow to the designated entity. player GiveDedicatedShadow( player) returns the dedicated shadow to the playerSets the focus entity for a player driven vehicle (currently only supported by helicopters). This will attempt to make the vehicle orient towards the focus target.",example:"player GiveDedicatedShadow( entity )player SetVehicleFocusEntity( focusEntity )",variables:[{name:"entity",mandatory:!0,description:"The entity to enable the dedicated shadow on"},{name:"focus entity",mandatory:!0,description:"The entity to focus on"}]},{_id:2097,functionName:"SetVehicleLockedOnByEnt",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the vehicle locked on by entity",example:"player SetVehicleLockedOnByEnt( mostDangerousEnemyWithLockOn )",variables:[{name:"entity",mandatory:!0,description:"an entity that acquired a missile lock on the player's vehicle"}]},{_id:2098,functionName:"SetVehicleWeaponWaitDuration",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the weapon wait duration for the players vehicle (intended for use with client side display purposes)",example:"player SetVehicleWeaponWaitDuration( reloadDuration )",variables:[{name:"duration",mandatory:!0,description:"the weapon reload (or recharge) duration in milliseconds"}]},{_id:2099,functionName:"SetVehicleWeaponWaitEndTime",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the vehicle weapon wait end time.",example:"player SetVehicleWeaponWaitEndTime( weaponReloadEndTime )",variables:[{name:"end time",mandatory:!0,description:"the weapon wait end time in milliseconds"}]},{_id:2100,functionName:"SetVelocity",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set the velocity of the player",example:"self setvelocity(force)",variables:[{name:"velocity",mandatory:!0,description:"The velocity to set"}]},{_id:2101,functionName:"SetViewClamp",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the view clamp for the player, only works during animscripted for now. Ranges are relative to tag_camera. Left, Right, Top, Bottom",example:"player SetViewClamp( 50, 50, 30, 30 )",variables:[]},{_id:2102,functionName:"SetWeaponAmmoClip",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Set the weapon's ammo",example:"self SetWeaponAmmoClip( weapon, weapon.clipSize )",variables:[{name:"weapon",mandatory:!0,description:"The weapon"},{name:"ammo",mandatory:!0,description:"The ammo count"}]},{_id:2103,functionName:"SetWeaponAmmoFuel",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the weapon ammo fuel",example:'self SetWeaponAmmoFuel( weapon, weapondata["fuel"] )',variables:[{name:"weapon",mandatory:!0,description:"The weapon"},{name:"fuel",mandatory:!0,description:"The ammo fuel amount"}]},{_id:2104,functionName:"SetWeaponAmmoStock",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Set the weapon's ammo",example:"reviver SetWeaponAmmoStock( level.weaponReviveTool, 1 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon"},{name:"ammo",mandatory:!0,description:"The new ammo count"}]},{_id:2105,functionName:"SetWeaponFriendlyHacking",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the weapon lockon completion percentage",example:"self SetWeaponFriendlyTargetLocked( weapon, 0.0 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon (player should have this weapon)"},{name:"isFriendlyHacking",mandatory:!0,description:"Set to true if a friendly is hacking the target"}]},{_id:2106,functionName:"SetWeaponFriendlyTargeting",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the weapon lockon completion percentage",example:"self SetWeaponFriendlyTargeting( weapon, 0.0 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon (player should have this weapon)"},{name:"isFriendlyTargeting",mandatory:!0,description:"Set to true if a friendly is targetting"}]},{_id:2107,functionName:"SetWeaponFriendlyTargetLocked",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the weapon lockon completion percentage",example:"self SetWeaponFriendlyTargetLocked( weapon, 0.0 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon (player should have this weapon)"},{name:"isFriendlyTargetLocked",mandatory:!0,description:"Set to true if a friendly is target locked"}]},{_id:2108,functionName:"SetWeaponHackPercent",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the weapon hack completion percentage",example:"self SetWeaponHackPercent( weapon, 0.0 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon (player should have this weapon)"},{name:"heat",mandatory:!0,description:"The heat percent to set"}]},{_id:2109,functionName:"SetWeaponHeatPercent",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the weapon heat percentage",example:"self SetWeaponHeatPercent( weapon, 0.0 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon (player should have this weapon)"},{name:"heat",mandatory:!0,description:"The heat percent to set"}]},{_id:2110,functionName:"SetWeaponLockOnPercent",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the weapon lockon completion percentage",example:"self SetWeaponLockOnPercent( weapon, 0.0 )",variables:[{name:"weapon",mandatory:!0,description:"The weapon (player should have this weapon)"},{name:"heat",mandatory:!0,description:"The heat percent to set"}]},{_id:2111,functionName:"SetWeaponOverheating",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Set the players Weapon Overheating value",example:'self SetWeaponOverheating( weapondata["overheat"], weapondata["heat"], weapon )',variables:[{name:"overheat",mandatory:!0,description:"Whether the weapon is overheating."},{name:"heatval",mandatory:!0,description:"The new heatval of the weapon (0 to 100)."},{name:"weapon",mandatory:!1,description:"If present set this specific weapon otherwise set the player's current weapon."}]},{_id:2112,functionName:"ShowViewModel",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Show the player's current view model.",example:"player ShowViewModel()",variables:[]},{_id:2113,functionName:"SortHeldWeapons",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sort the playerState heldWeapons to remove empty spaces",example:"e_player SortHeldWeapon()",variables:[]},{_id:2114,functionName:"SpawnSpectator",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Spawns the player, does not send any notifies",example:null,variables:[{name:"origin",mandatory:!0,description:"origin to spawn"},{name:"angles",mandatory:!0,description:"angles to spawn"}]},{_id:2115,functionName:"SprintButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the 'sprint' button.",example:"while( self SprintButtonPressed() )...",variables:[]},{_id:2116,functionName:"SprintUpRequired",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Force the player to release the sprint button before sprinting.",example:"self SprintUpRequired()",variables:[]},{_id:2117,functionName:"StanceButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the 'stance' button.",example:"while( self StanceButtonPressed() )...",variables:[]},{_id:2118,functionName:"StartCameraTween",returnValue:"void",referenceVariable:"",section:"Player",access:"Server",description:"Start a camera tween, call this right before a camera pop to do a blend.",example:"player StartCameraTween( 0.5 );",variables:[{name:"time",mandatory:!0,description:'How long to do the blend."'}]},{_id:2119,functionName:"StartRevive",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Starts the revive sequence on a player. <reviver> is the one administering aid to the player this is called on.",example:"playerInLastStand StartRevive( rescuer )",variables:[{name:"reviver",mandatory:!0,description:"the player reviving the player this is called on"}]},{_id:2120,functionName:"StopCarryTurret",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"UnLinks the auto turret from the player and sets it on the ground.",example:"player StopCarryTurret( turret, origin, angles )",variables:[{name:"turret",mandatory:!0,description:"turret entity"},{name:"origin",mandatory:!1,description:"The new origin of turret"},{name:"angles",mandatory:!1,description:"The new angles of turret"}]},{_id:2121,functionName:"StopLocalSound",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Stops the local sound",example:"targetent StopLocalSound( level.missileDroneSoundStart )",variables:[{name:"sound name",mandatory:!0,description:"The name of the sound"}]},{_id:2122,functionName:"StopRevive",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Stops the revive behavior on a player when the revive did not complete. <reviver> is the one administering aid to the player this is called on.",example:"playerInLastStand StopRevive( rescuer )",variables:[{name:"reviver",mandatory:!0,description:"the player reviving the player this is called on"}]},{_id:2123,functionName:"Suicide",returnValue:"void",referenceVariable:"<player>",section:"client",access:"Server",description:"Kills the player immediately as a suicide",example:"self suicide()",variables:[]},{_id:2124,functionName:"SwitchToOffHand",returnValue:"bool",referenceVariable:"<player>",section:"player",access:"Server",description:"Switch to the offhand weapon",example:"self SwitchToOffhand( primaryOffhand )",variables:[{name:"weapon",mandatory:!0,description:"Weapon to switch to"}]},{_id:2125,functionName:"SwitchToWeapon",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Switch to a different weapon or cycle weapons if no weapon is given",example:"level.player SwitchToWeapon( weapon )",variables:[{name:"weapon object",mandatory:!1,description:"The weapon to switch to"}]},{_id:2126,functionName:"SwitchToWeaponImmediate",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Switch to a different weapon or cycle weapons if no weapon is given without playing the dropping animation for current weapon",example:"level.player SwitchToWeaponImmediate( weapon )",variables:[{name:"weapon object",mandatory:!1,description:"The weapon to switch to"}]},{_id:2127,functionName:"TakeAllWeapons",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Makes the player take all weapons",example:"player TakeAllWeapons()",variables:[]},{_id:2128,functionName:"TakeWeapon",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Take the weapon",example:"e_player TakeWeapon( w_spike_launcher )",variables:[{name:"weapon",mandatory:!0,description:"The weapon to take"},{name:"ignore_attachments",mandatory:!1,description:"Only check the root weapon, ignore all the attachments."}]},{_id:2129,functionName:"ThrowButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the 'throw' button.",example:"while( self ThrowButtonPressed() )...",variables:[]},{_id:2130,functionName:"TurnedHuman",returnValue:"void",referenceVariable:"<client>",section:"Player",access:"Server",description:"Called when client is turned back to human",example:"self TurnedHuman()",variables:[]},{_id:2131,functionName:"UndoLastStand",returnValue:"void",referenceVariable:"<client>",section:"Player",access:"Server",description:"Undo the last stand for the client",example:"self UndoLastStand()",variables:[]},{_id:2132,functionName:"UnlinkFromMissile",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Unlinks a player camera from a missile",example:"player UnlinkFromMissile()",variables:[]},{_id:2133,functionName:"UnlinkGuidedMissileCamera",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"clear player eflags for the guided missile",example:"player UnlinkGuidedMissileCamera()",variables:[]},{_id:2134,functionName:"UnSetPerk",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"takes the specified perk from the player",example:'player UnSetPerk( "specialty_gpsjammer" )',variables:[{name:"perk name",mandatory:!0,description:"the perk to unset"}]},{_id:2135,functionName:"UpdateWeaponOptions",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Update weapon options for a weapon that the player has",example:'player UpdateWeaponOptions( "m1garand", player calcWeaponOptions() )',variables:[{name:"weapon name",mandatory:!0,description:"The weapon name to give to the player"},{name:"weapon options",mandatory:!1,description:"options value computed using calcweaponoptions call"}]},{_id:2136,functionName:"UseButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"player",access:"Server",description:"Check if the player is pressing the use button",example:"if ( self UseButtonPressed() ) ...",variables:[]},{_id:2137,functionName:"VehicleMoveUpButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the 'stance' button.",example:"while( self StanceButtonPressed() )...",variables:[]},{_id:2138,functionName:"WeaponLockCount",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"returns the number of active lock objects (i.e. those with at least lock started or lock set active)",example:"player WeaponLockCount()",variables:[]},{_id:2139,functionName:"WeaponLockDetect",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Sets the tartget as detected. Will clear any existing hard lock. Use WeaponLockStart() to start lock.",example:"player WeaponLockDetect( enemyGuy )",variables:[{name:"entity",mandatory:!0,description:""},{name:"slot",mandatory:!1,description:""}]},{_id:2140,functionName:"WeaponLockFinalize",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Locks player's weapon onto an entity. Implies WeaponLockStart(), so this may be called to jump to a hard lock.",example:"player WeaponLockFinalize( enemyGuy )",variables:[{name:"entity",mandatory:!0,description:""},{name:"slot",mandatory:!1,description:""}]},{_id:2141,functionName:"WeaponLockFree",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Clears player's weapon lock.",example:"player WeaponLockClear()",variables:[{name:"slot",mandatory:!1,description:"The weapon slot. Default is 0"}]},{_id:2142,functionName:"WeaponLockNoClearance",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"When set true, the player will be unable to fire their lockon weapon, and will recieve a hint print telling them that there is an obstruction.",example:"player WeaponLockNoClearance( true )",variables:[{name:"bool",mandatory:!0,description:""},{name:"slot",mandatory:!1,description:"The weapon slot. Default is 0"}]},{_id:2143,functionName:"WeaponLockRemoveSlot",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"removes the given slot values and compresses the remaining slots (i.e. 1,2,3 with 2 removed becomes 1,3,blank)",example:"player WeaponLockGetFlags()",variables:[{name:"slot",mandatory:!0,description:"The weapon slot. Default is 0"}]},{_id:2144,functionName:"WeaponLockStart",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"Begins player's weapon lockon sequence (hud effects, etc). Will clear any existing hard lock. Use WeaponLockFinalize() to complete lock.",example:"player WeaponLockStart( enemyGuy )",variables:[{name:"entity",mandatory:!0,description:""},{name:"slot",mandatory:!1,description:""}]},{_id:2145,functionName:"WeaponLockTargetTooClose",returnValue:"void",referenceVariable:"<player>",section:"player",access:"Server",description:"When set true, the player will be unable to fire their lockon weapon, and will recieve a hint print telling them that they are too close.",example:"player WeaponLockTargetTooClose( true )",variables:[{name:"bool",mandatory:!0,description:""},{name:"slot",mandatory:!1,description:"The weapon slot. Default is 0"}]},{_id:2146,functionName:"WeaponPlayEjectBrass",returnValue:"void",referenceVariable:"<player>",section:"Player",access:"Server",description:"Play the eject brass FX for a weapon.",example:"player WeaponPlayEjectBrass()",variables:[]},{_id:2147,functionName:"WeaponSwitchButtonPressed",returnValue:"int",referenceVariable:"<player>",section:"Player",access:"Server",description:"Check if the player is pressing the weapon switch button",example:"if ( self WeaponSwitchButtonPressed() ) ...",variables:[]},{_id:2148,functionName:"ChangeFontScaleOverTime",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Set a hud element to transition in fontScale over time. Normally setting the fontScale of an element causes an immediate visual change. However, if the fontScale gets set within <time> after calling ChangeFontScaleOverTime, then the hud element will transition to the new fontScale over the remaining <time>.",example:"level.introstring1 ChangeFontScaleOverTime( 1.2 ); level.introstring1.fontScale = 0.3; // This will transition the fontScale from whatever it was before to the new value of 0.3 over 1.2 seconds.",variables:[{name:"time",mandatory:!0,description:"The time to scale the element font in seconds"}]},{_id:2149,functionName:"ClearTargetEnt",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Clear this waypoint from targetting an entity.",example:"waypoint ClearTargetEnt()",variables:[]},{_id:2150,functionName:"CloseLUIMenu",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"Close the LUI menu specified.",example:"CloseLUIMenu( localClientNum, menuIndex )",variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client on the machine."},{name:"menuIndex",mandatory:!0,description:"Menu ID received from CreateLUIMenu."}]},{_id:2151,functionName:"CreateLUIMenu",returnValue:"int",referenceVariable:"",section:"UI",access:"Client",description:"Creates a LUI menu to be opened later with OpenLUIMenu.",example:'CreateLUIMenu( localClientNum, "ScriptDebugMenu")',variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client on the machine."},{name:"name",mandatory:!0,description:"Name of the menu to create."}]},{_id:2152,functionName:"CreateUIModel",returnValue:"int",referenceVariable:"",section:"UI",access:"Client",description:"Creates and returns a UIModel from a parent model.",example:'CreateUIModel( gameScoreModel, "enZemeyScore" )',variables:[{name:"parentModel",mandatory:!0,description:"The parent model of the model to retrieve."},{name:"newPathName",mandatory:!0,description:"The name/path of the new model to create."}]},{_id:2153,functionName:"Destroy",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Remove this Hud element altogether.",example:"self.bombstopwatch Destroy()",variables:[]},{_id:2154,functionName:"FadeOverTime",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Set a hud element to transition in color (or alpha) over time. Normally setting the color (or alpha) of an element causes an immediate visual change. However, if the color (or alpha) gets set within <time> after calling fadeOverTime, then the hud element will transition to the new color over the remaining <time>.",example:"level.introstring1 FadeOverTime( 1.2 ); level.introstring1.alpha = 0.3; // This will transition the alpha from whatever it was before to the new value of 0.3 over 1.2 seconds.",variables:[{name:"time",mandatory:!0,description:"The time to fade the element in seconds"}]},{_id:2155,functionName:"FreeUIModel",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"Frees a UIModel.",example:"FreeUIModel( gameScoreModel )",variables:[{name:"modelToFree",mandatory:!0,description:"The model to free."}]},{_id:2156,functionName:"GetGlobalUIModel",returnValue:"int",referenceVariable:"",section:"UI",access:"Client",description:"Returns the gloabl UIModel.",example:"GetGlobalModel()",variables:[]},{_id:2157,functionName:"GetLUIMenu",returnValue:"int",referenceVariable:"",section:"UI",access:"Client",description:"Gets the first instance found of a given menu name active for the given client (undefined if not found)",example:'menuIndex = GetLUIMenu( localClientNum, "HudElementImage" )',variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client on the machine."},{name:"menuName",mandatory:!0,description:"Menu name"}]},{_id:2158,functionName:"GetLUIMenuData",returnValue:"string",referenceVariable:"",section:"UI",access:"Client",description:"Gets data from a LUI menu.",example:'modelValue = GetLUIMenuData( localClientNum, menuIndex, "title" )',variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client on the machine."},{name:"menuIndex",mandatory:!0,description:"Menu ID received from CreateLUIMenu."},{name:"menuDataName",mandatory:!0,description:"Menu Data Name linked to the UIModel."}]},{_id:2159,functionName:"GetTextWidth",returnValue:"int",referenceVariable:"<hud_element>",section:"UI",access:"Server",description:"Returned the width of the text in the hudelem.",example:"width = elem GetTextWidth()",variables:[]},{_id:2160,functionName:"GetUIModel",returnValue:"int",referenceVariable:"",section:"UI",access:"Client",description:"Returns a UIModel from the parent model passed in and the name of the model to retrieve.",example:'GetUIModel( gameScoreModel, "enemeyScore" )',variables:[{name:"parentModel",mandatory:!0,description:"The parent model of the model to retrieve."},{name:"lookupModelName",mandatory:!0,description:"The name of the model to retrieve."}]},{_id:2161,functionName:"GetUIModelForController",returnValue:"int",referenceVariable:"",section:"UI",access:"Client",description:"Returns the UIModel from the controller root.",example:"GetUIModelForController( localClientNum )",variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client on the machine."}]},{_id:2162,functionName:"GetUIModelValue",returnValue:"string",referenceVariable:"",section:"UI",access:"Client",description:"Returns the value of the UIModel passed in.",example:"GetUIModelValue( gameScoreModel )",variables:[{name:"model",mandatory:!0,description:"Model of the value to retrieve."}]},{_id:2163,functionName:"IsLuiEnabled",returnValue:"int",referenceVariable:"",section:"UI",access:"Client",description:"true if lui system has the input focus",example:"if( IsLuiEnabled() )",variables:[]},{_id:2164,functionName:"LuiDisable",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"user input is removed from lui system",example:"LuiDisable( 0 )",variables:[{name:"localclientnum",mandatory:!0,description:"The local client"}]},{_id:2165,functionName:"LuiEnable",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"user input is handed to lui system until returned",example:'LuiEnable("overlay")',variables:[{name:"localclientnum",mandatory:!0,description:"The local client"},{name:"menuname",mandatory:!0,description:"The name of the menu to enable"}]},{_id:2166,functionName:"LuiLoad",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"Loads a lui file, making the menus available for addition",example:'LuiLoad("overlay")',variables:[]},{_id:2167,functionName:"MoveOverTime",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Set a hud element to move over time.",example:"newStr MoveOverTime( timer )",variables:[{name:"time",mandatory:!0,description:"The time to move the element in seconds"}]},{_id:2168,functionName:"NewClientHudElem",returnValue:"hudelem",referenceVariable:"",section:"hud",access:"Server",description:"Create a new hud element for a particular client",example:"self.kc_topbar = NewClientHudElem(self)",variables:[{name:"client",mandatory:!0,description:"The client for whom the hud element is created."}]},{_id:2169,functionName:"NewDamageIndicatorHudElem",returnValue:"hudelem",referenceVariable:"",section:"UI",access:"Server",description:"Create a new hud element for a particular client",example:"self.kc_topbar = NewClientHudElem(self)",variables:[{name:"client",mandatory:!0,description:"The client for whom the hud element is created."}]},{_id:2170,functionName:"NewDebugHudElem",returnValue:"hudelem",referenceVariable:"",section:"UI",access:"Server",description:null,example:null,variables:[]},{_id:2171,functionName:"NewHudElem",returnValue:"hudelem",referenceVariable:"",section:"hud",access:"Server",description:"Create a new hud element",example:"overlay = NewHudElem()",variables:[]},{_id:2172,functionName:"NewScoreHudElem",returnValue:"hudelem",referenceVariable:"",section:"UI",access:"Server",description:"Create a new score hud element for a particular client",example:"self.hud_rankscroreupdate = NewScoreHudElem(self)",variables:[{name:"client",mandatory:!0,description:"The client for whom the hud element is created."}]},{_id:2173,functionName:"NewTeamHudElem",returnValue:"hudelem",referenceVariable:"",section:"hud",access:"Server",description:"Create a new hud element for a particular team",example:'level.progressbar_allies_neutralize = NewTeamHudElem( "axis" )',variables:[{name:"team",mandatory:!0,description:"The team for whom the hud element is created. Must be 'axis', 'allies' or 'spectator'"}]},{_id:2174,functionName:"OpenLUIMenu",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"Opens a loaded LUI menu.",example:"OpenLUIMenu( localClientNum, menuIndex )",variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client on the machine."},{name:"menuIndex",mandatory:!0,description:"Menu ID received from CreateLUIMenu."}]},{_id:2175,functionName:"OpenLUIPopup",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"Opens a loaded LUI menu.",example:'OpenLUIPopup( localClientNum, "SomePopup")',variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client on the machine."},{name:"name",mandatory:!0,description:"Name of the popup menu to open."}]},{_id:2176,functionName:"PopulateScriptDebugMenu",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"Sets a UIModel from the model being passed in.",example:"PopulateScriptDebugMenu( localClientNum, menu_items_array )",variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client on the machine."},{name:"array",mandatory:!0,description:"Array of menu item names for the debug menu."}]},{_id:2177,functionName:"Reset",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Reset a HUD element to its default state.",example:"element Reset()",variables:[]},{_id:2178,functionName:"ScaleOverTime",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Set a hud element to scale over time.",example:"other.progressbar ScaleOverTime( level.planttime, level.barsize, 8 )",variables:[{name:"time",mandatory:!0,description:"The time to scale the element in seconds"},{name:"width",mandatory:!0,description:"The new width of the material."},{name:"height",mandatory:!0,description:"The new height of the material."}]},{_id:2179,functionName:"SetClock",returnValue:"void",referenceVariable:"<hud_clock_element>",section:"hud",access:"Server",description:"Set a clock HUD element to count down over a time period.",example:'level.bombstopwatch SetClock( 5, 60, "hudStopwatch", 64, 64 )',variables:[{name:"time",mandatory:!0,description:"The new timer time in seconds to count down"},{name:"time",mandatory:!0,description:"The time in seconds represented by a full cycle of the hand, for instance a stopwatch would be 60s."},{name:"material",mandatory:!0,description:"The material for the hud clock"},{name:"width",mandatory:!1,description:"The width of the material."},{name:"height",mandatory:!1,description:"The height of the material."}]},{_id:2180,functionName:"SetClockUp",returnValue:"void",referenceVariable:"<hud_clock_element>",section:"hud",access:"Server",description:"Set a clock HUD element to count up over a time period.",example:'level.bombstopwatch SetClockUp( 5, 60, "hudStopwatch", 64, 64 )',variables:[{name:"time",mandatory:!0,description:"The new timer time in seconds to count up"},{name:"full time",mandatory:!0,description:"The time in seconds represented by a full cycle of the hand, for instance a stopwatch would be 60s."},{name:"material",mandatory:!0,description:"The material for the hud clock"},{name:"width",mandatory:!1,description:"The width of the material."},{name:"height",mandatory:!1,description:"The height of the material."}]},{_id:2181,functionName:"SetCOD7DecodeFX",returnValue:"void",referenceVariable:"<hud_element>",section:"UI",access:"Server",description:"Set the hudelem string to display with a decode effect.",example:"elem SetCOD7DecodeFX( 2000, 600 )",variables:[{name:"decodeTime",mandatory:!0,description:"Time for each letter to decode."},{name:"decayStart",mandatory:!0,description:"Time to wait before starting the text decay effect."},{name:"decayDuration",mandatory:!0,description:"How long to spend decaying."}]},{_id:2182,functionName:"SetExtraCamRenderReady",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"Sets an extra cam render job to start processing",example:"StartExtraCamRender( 2 )",variables:[{name:"jobIdx",mandatory:!0,description:"Extra Cam Render job index."}]},{_id:2183,functionName:"SetGameTypeString",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Set the game type string for the game",example:null,variables:[{name:"game type",mandatory:!0,description:"A string containing the game type"}]},{_id:2184,functionName:"SetLUIMenuData",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"Set data for LUI menu.",example:'SetLUIMenuData( localClientNum, menuIndex, "title", "Some Title" )',variables:[{name:"localClientNum",mandatory:!0,description:"Number of the local client on the machine."},{name:"menuIndex",mandatory:!0,description:"Menu ID received from CreateLUIMenu."},{name:"menuDataName",mandatory:!0,description:"Menu Data Name linked to the UIModel."},{name:"menuDataValue",mandatory:!0,description:"Value for that piece of menu data."}]},{_id:2185,functionName:"SetMapNameString",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Set the map name string",example:null,variables:[{name:"map name",mandatory:!0,description:"A string containing the map name"}]},{_id:2186,functionName:"SetPerks",returnValue:"void",referenceVariable:"<hud_element>",section:"UI",access:"Server",description:"Sets a hud element to be a perks element.",example:"hudelement SetPerks( true )",variables:[{name:"client",mandatory:!0,description:"client we should be showing the perks of"}]},{_id:2187,functionName:"SetPlayerNameString",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Set the player name string for a HUD element",example:null,variables:[{name:"player",mandatory:!0,description:"A player entity"}]},{_id:2188,functionName:"SetPulseFX",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:'Set the hudelem string to display with a "Pulse" effect.',example:"elem SetPulseFX( 40, 2000, 600 )",variables:[{name:"speed",mandatory:!0,description:"Time (in milliseconds) each letter takes to type out."},{name:"decayStart",mandatory:!0,description:"Time to wait before starting the string's decay effect."},{name:"decayDuration",mandatory:!0,description:"How long to spend decaying."}]},{_id:2189,functionName:"SetRedactFX",returnValue:"void",referenceVariable:"<hud_element>",section:"UI",access:"Server",description:"Set the hudelem string to display with a redact effect.",example:"elem SetRedactFX( 2000, 600, 3000, 400 )",variables:[{name:"decayStart",mandatory:!0,description:"Time to wait before starting the text decay effect."},{name:"decayDuration",mandatory:!0,description:"How long to spend decaying."},{name:"redactDecayStart",mandatory:!0,description:"Time to wait before starting the redact decay effect."},{name:"redactDecayDuration",mandatory:!0,description:"How long to spend decaying."}]},{_id:2190,functionName:"SetShader",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Set the material for this Hud Element",example:'waypoint SetShader( "playbook_objective_stop", 15, 15 )',variables:[{name:"materialname",mandatory:!0,description:"A the name of the material to set"},{name:"width",mandatory:!1,description:"The width of the material."},{name:"height",mandatory:!1,description:"The height of the material."}]},{_id:2191,functionName:"SetTargetEnt",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Set the entity that this waypoint should target. In MP, entity should already be a broadcasting entity, as with Objective_OnEntity().",example:"waypoint SetTargetEnt( level.axis.bombcarrier )",variables:[{name:"entity",mandatory:!0,description:"Entity to Target"}]},{_id:2192,functionName:"SetTenthsTimer",returnValue:"void",referenceVariable:"<hud_timer_element>",section:"hud",access:"Server",description:"Set a timer HUD element to count down in tenths of a second",example:"self.kc_timer SetTenthsTimer( self.archivetime - delay )",variables:[{name:"time",mandatory:!0,description:"The new timer time"}]},{_id:2193,functionName:"SetTenthsTimerUp",returnValue:"void",referenceVariable:"<hud_timer_element>",section:"hud",access:"Server",description:"Set a timer HUD element to count up in tenths of a second",example:"self.kc_timer SetTenthsTimerUp( self.archivetime - delay )",variables:[{name:"time",mandatory:!0,description:"The new timer time"}]},{_id:2194,functionName:"SetText",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Set HUD text for this element.",example:"level.introstring1 SetText(string1)",variables:[{name:"text",mandatory:!0,description:"A localized text reference"}]},{_id:2195,functionName:"SetTimer",returnValue:"void",referenceVariable:"<hud_timer_element>",section:"hud",access:"Server",description:"Set a timer HUD element to count down",example:"level.reinforcement_hud SetTimer( level.counter )",variables:[{name:"time",mandatory:!0,description:"The new timer time"}]},{_id:2196,functionName:"SetTimerUp",returnValue:"void",referenceVariable:"<hud_timer_element>",section:"hud",access:"Server",description:"Set a timer HUD element to count up",example:"level.reinforcement_hud SetTimerUp( level.counter )",variables:[{name:"time",mandatory:!0,description:"The new timer time"}]},{_id:2197,functionName:"SetTypewriterFX",returnValue:"void",referenceVariable:"<hud_element>",section:"UI",access:"Server",description:"Set the hudelem string to display with a redact effect.",example:"elem SetTypewriterFX( 100, 600, 3000 )",variables:[{name:"letterTime",mandatory:!0,description:"Time it take for each letter to type in."},{name:"decayStart",mandatory:!0,description:"Time to wait before starting the text decay effect."},{name:"decayDuration",mandatory:!0,description:"How long to spend decaying."}]},{_id:2198,functionName:"SetUIModelValue",returnValue:"void",referenceVariable:"",section:"UI",access:"Client",description:"Sets a UIModel from the model being passed in.",example:"SetUIModelValue( gameScoreModel )",variables:[{name:"model",mandatory:!0,description:"Model of the value to set."},{name:"value",mandatory:!0,description:"Value to set."}]},{_id:2199,functionName:"SetValue",returnValue:"void",referenceVariable:"<hud_value_element>",section:"hud",access:"Server",description:"Set a value HUD element to a given value.",example:"level.reinforcement_hud SetValue( 0 )",variables:[{name:"value",mandatory:!0,description:"The value to set the element to"}]},{_id:2200,functionName:"SetWarGameData",returnValue:"void",referenceVariable:"<hud_element>",section:"UI",access:"Server",description:"Creates a WAR specific HUD progress element",example:"hudelement SetWarGameData( 0, 1, 30 )",variables:[{name:"momentumProgress",mandatory:!0,description:" <momentumMultiplier>, <momentumBlitzkriegTime>"}]},{_id:2201,functionName:"SetWayPoint",returnValue:"void",referenceVariable:"<hud_element>",section:"hud",access:"Server",description:"Sets a hud element to be a waypoint.",example:"newdeathicon SetWayPoint( true )",variables:[{name:"constantSize",mandatory:!0,description:"boolean describing whether the hud element remains the same size"},{name:"offscreenMaterialName",mandatory:!1,description:"Material to draw when waypoint is offscreen."},{name:"isDistanceShown",mandatory:!1,description:"boolean turning on/off player distance to waypoint display above the waypoint."},{name:"no offscreen",mandatory:!1,description:"boolean turning on/off arrow indicators when element is offscreen."}]},{_id:2202,functionName:"Array",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"create an array",example:null,variables:[{name:"args",mandatory:!0,description:"one or more args to add to the array"}]},{_id:2203,functionName:"ArrayCombine",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"combine two arrays into and returns one new array",example:null,variables:[{name:"array1",mandatory:!0,description:"array to operate on"},{name:"array2",mandatory:!0,description:"array to operate on"},{name:"allowdupes",mandatory:!0,description:"if true then allow duplicate entries, otherwise prune them out when combining"},{name:"preserve_keys",mandatory:!0,description:"if true then preserve the keys (only for string keys) otherwise renumber when combining"}]},{_id:2204,functionName:"ArrayCopy",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"returns a copy of an array",example:null,variables:[{name:"array1",mandatory:!0,description:"array to operate on"}]},{_id:2205,functionName:"ArrayGetClosest",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Returns the entity/vector that is closest to the <origin> from the <array>.",example:"ent = ArrayGetClosest( player.origin, a_enemies )",variables:[{name:"origin",mandatory:!0,description:"The origin to get closest from"},{name:"array",mandatory:!0,description:"The array to search in"},{name:"dist",mandatory:!1,description:"The minimum distance to check when finding closest (has to be positive)"}]},{_id:2206,functionName:"ArrayGetFarthest",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Returns the entity/vector that is farthest to the <origin> from the <array>.",example:"ent = ArrayGetFarthest( player.origin, a_enemies )",variables:[{name:"origin",mandatory:!0,description:"The origin to get farthest from"},{name:"array",mandatory:!0,description:"The array to search in"},{name:"dist",mandatory:!1,description:"The maximum distance when finding farthest (has to be positive)"}]},{_id:2207,functionName:"ArrayInsert",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"insert a value into an array at a given index",example:null,variables:[{name:"array",mandatory:!0,description:"array to operate on"},{name:"value",mandatory:!0,description:"value to insert"},{name:"index",mandatory:!0,description:"index at which to insert the value (must be an integer) - moves existing entries as required"}]},{_id:2208,functionName:"ArrayIntersect",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Returns an array of values that are present in both arrays.",example:"newArray = ArrayIntersect( array1, array2 )",variables:[{name:"array1",mandatory:!0,description:"An Array"},{name:"array2",mandatory:!0,description:"An Array"},{name:"matchKeys",mandatory:!1,description:"Optionally returns an array of matching key/value pairs from the two input arrays (preserving the keys)."}]},{_id:2209,functionName:"ArrayRemoveIndex",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Remove a value from an array at a given index",example:null,variables:[{name:"array",mandatory:!0,description:"array to operate on"},{name:"index",mandatory:!0,description:"index of value to remove"},{name:"preserve_keys",mandatory:!1,description:"defaults to false, if true then it preserves the keys - otherwise creates integer keys"}]},{_id:2210,functionName:"ArrayRemoveValue",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Remove a value from an array (may affect multiple indexes)",example:null,variables:[{name:"array",mandatory:!0,description:"array to operate on"},{name:"value",mandatory:!0,description:"value to remove (may be undefined)"},{name:"preserve_keys",mandatory:!1,description:"defaults to false, if true then it preserves the keys - otherwise creates integer keys"}]},{_id:2211,functionName:"Assert",returnValue:"void",referenceVariable:"",section:"debug",access:"Both",description:"Assert that the given statement is correct. The function will throw a script error if this is false.",example:"Assert( enemyInSight == true )",variables:[{name:"value",mandatory:!0,description:"statement that is asserted to be correct"},{name:"desc",mandatory:!1,description:"string describing the nature of the assert"}]},{_id:2212,functionName:"AssertMsg",returnValue:"void",referenceVariable:"",section:"debug",access:"Both",description:"Throws a script error with the given message.",example:'AssertMsg( "Unhandled enemy type." )',variables:[{name:"message",mandatory:!0,description:"error message"}]},{_id:2213,functionName:"AssociativeArray",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"creates an associativeArray",example:null,variables:[{name:"key_i",mandatory:!1,description:"the string key for the next value[OPTIONAL]"}]},{_id:2214,functionName:"ClientHasSnapshot",returnValue:"int",referenceVariable:"",section:"Utility",access:"Client",description:"Returns true if client has recieved a snapshot from the server",example:null,variables:[{name:"local client",mandatory:!0,description:"the desired Local Client number."}]},{_id:2215,functionName:"ErrorMsg",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Throws a non-fatal script error with the given message.",example:'ErrorMsg( "Unhandled enemy type." )',variables:[{name:"message",mandatory:!0,description:"error message"}]},{_id:2216,functionName:"GetArrayKeys",returnValue:"void",referenceVariable:"",section:"level",access:"Both",description:"Returns an array consisting of the keys of the input array.",example:"result = GetArrayKeys( array )",variables:[{name:"array",mandatory:!0,description:"Input array"}]},{_id:2217,functionName:"GetAttachmentTableIndex",returnValue:"int",referenceVariable:"",section:"Utility",access:"Both",description:"Returns the attachment table index for the attachment name",example:'attachmentIndex = GetAttachmentTableIndex( "reflex" )',variables:[{name:"attachmentRef",mandatory:!0,description:"Attachment Reference"}]},{_id:2218,functionName:"GetDvarFloat",returnValue:"float",referenceVariable:"",section:"dvars",access:"Both",description:"Gets the value of a dvar.",example:'GetDvarFloat( "r_eyesAdjust", 1.0 )',variables:[{name:"dvar",mandatory:!0,description:"The dvar name as a string or hash."},{name:"default_value",mandatory:!1,description:"The value to be returned if the dvar doesn't exist, must be an float."}]},{_id:2219,functionName:"GetDvarInt",returnValue:"int",referenceVariable:"",section:"dvars",access:"Both",description:"Gets the value of a dvar.",example:'GetDvarInt( "r_eyesAdjust", 1 )',variables:[{name:"dvar",mandatory:!0,description:"The dvar name as a string or hash."},{name:"default_value",mandatory:!1,description:"The value to be returned if the dvar doesn't exist, must be an integer."}]},{_id:2220,functionName:"GetDvarString",returnValue:"string",referenceVariable:"",section:"Utility",access:"Both",description:"Gets the value of a dvar.",example:'GetDvarString( "r_eyesAdjust", "yes" )',variables:[{name:"dvar",mandatory:!0,description:"The dvar name as a string or hash."},{name:"default_value",mandatory:!1,description:"The value to be returned if the dvar doesn't exist, must be a string."}]},{_id:2221,functionName:"GetDvarVector",returnValue:"vector",referenceVariable:"",section:"Utility",access:"Both",description:"Gets the value of a dvar.",example:'GetDvarVector( "r_eyesAdjust", (1,0,0) )',variables:[{name:"dvar",mandatory:!0,description:"The dvar name as a string or hash."},{name:"default_value",mandatory:!1,description:"The value to be returned if the dvar doesn't exist, must be an vector."}]},{_id:2222,functionName:"GetFirstArrayKey",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Returns the first key of the input array.",example:"key = GetFirstArrayKey( array )",variables:[{name:"array",mandatory:!0,description:"Input array"}]},{_id:2223,functionName:"GetItemIndexFromRef",returnValue:"int",referenceVariable:"",section:"Utility",access:"Both",description:"Returns the item index for the specified item reference",example:"itemIndex = GetItemIndexFromRef( <itemRef> )",variables:[{name:"itemRef",mandatory:!0,description:"Item Reference"}]},{_id:2224,functionName:"GetLastArrayKey",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Returns the last key of the input array.",example:"key = GetLastArrayKey( array )",variables:[{name:"array",mandatory:!0,description:"Input array"}]},{_id:2225,functionName:"GetMapCenter",returnValue:"vector",referenceVariable:"",section:"Utility",access:"Client",description:"Returns the map center",example:"center = GetMapCenter()",variables:[]},{_id:2226,functionName:"GetNextArrayKey",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Returns the next key of the input array, after the specified key.",example:"key = GetNextArrayKey( array, key )",variables:[{name:"array",mandatory:!0,description:"Input array"},{name:"key",mandatory:!0,description:"The given key"}]},{_id:2227,functionName:"GetPrevArrayKey",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Returns the prev key of the input array, before the specified key.",example:"key = GetPrevArrayKey( array, key )",variables:[{name:"array",mandatory:!0,description:"Input array"},{name:"key",mandatory:!0,description:"The given key"}]},{_id:2228,functionName:"GetServerTime",returnValue:"int",referenceVariable:"",section:"Utility",access:"Client",description:"Returns the time according to the server",example:"GetServerTime(localClientNum)",variables:[{name:"localClientNum",mandatory:!0,description:"The local client"}]},{_id:2229,functionName:"GetStructField",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Returns the value of the field in a struct using a string to name the field",example:"value = GetStructField( struct, field_string )",variables:[{name:"struct",mandatory:!0,description:"Input struct"},{name:"field_string",mandatory:!0,description:'string value that describes the field (foo.bar, for example would be "bar")'}]},{_id:2230,functionName:"GetSubStr",returnValue:"string",referenceVariable:"",section:"string",access:"Both",description:"Returns the substring of characters >= <start index> and < <end index>. <end index> is optional.",example:"name = getSubStr( playerwarp_string, 8 )",variables:[{name:"string",mandatory:!0,description:"The input string"},{name:"start index",mandatory:!0,description:"The start index of the substring"},{name:"end index",mandatory:!1,description:"The end index of the substring"}]},{_id:2231,functionName:"GetSystemTime",returnValue:"vector",referenceVariable:"",section:"Utility",access:"Client",description:"Returns the time of the system in a vector where the 0 index is hours (in 24hr time), 1 is minutes, and 2 is seconds",example:"GetSystemTime(1)",variables:[{name:"ignore timezone",mandatory:!1,description:"Set to non-zero to ignore the timezone information"}]},{_id:2232,functionName:"IsArray",returnValue:"int",referenceVariable:"",section:"variables",access:"Both",description:"Checks whether this entity/variable is an array",example:"if ( isarray ( gun_owner )) ...",variables:[{name:"variable",mandatory:!0,description:"variable that may or may not be a array"}]},{_id:2233,functionName:"IsClass",returnValue:"int",referenceVariable:"",section:"Utility",access:"Both",description:"Checks whether this entity/variable is a class object",example:"if ( isclass(self)) ...",variables:[{name:"variable",mandatory:!0,description:"variable that may or may not be a class"}]},{_id:2234,functionName:"IsFloat",returnValue:"int",referenceVariable:"",section:"Utility",access:"Both",description:"Checks whether this entity/variable is a float",example:"if ( IsFloat( gun_owner ) ) ...",variables:[{name:"variable",mandatory:!0,description:"variable that may or may not be a float"}]},{_id:2235,functionName:"IsFunctionPtr",returnValue:"int",referenceVariable:"",section:"Utility",access:"Both",description:"Checks whether given variable is of type Function Pointer in script, useful to differentiate between Var and FuncPtr in Script.",example:"if ( IsFunctionPtr( myFuncPtr ) ) ...",variables:[{name:"variable",mandatory:!0,description:"variable to test"}]},{_id:2236,functionName:"IsInArray",returnValue:"bool",referenceVariable:"",section:"Utility",access:"Both",description:"searches an array to determine if a given value is present in that array",example:null,variables:[{name:"array",mandatory:!0,description:"array to search"},{name:"value",mandatory:!0,description:"value to search for"}]},{_id:2237,functionName:"IsInt",returnValue:"int",referenceVariable:"",section:"Utility",access:"Both",description:"Checks whether this entity/variable is an int",example:"if ( IsInt( gun_owner ) ) ...",variables:[{name:"variable",mandatory:!0,description:"variable that may or may not be an int"}]},{_id:2238,functionName:"IsMatureContentEnabled",returnValue:"bool",referenceVariable:"",section:"Utility",access:"Client",description:"Returns true if mature content is enabled",example:"if( IsMatureContentEnabled() )",variables:[]},{_id:2239,functionName:"IsShowBloodEnabled",returnValue:"bool",referenceVariable:"",section:"Utility",access:"Client",description:"Returns true if blood is enabled",example:"if( IsShowBloodEnabled() )",variables:[]},{_id:2240,functionName:"IsShowGibsEnabled",returnValue:"bool",referenceVariable:"",section:"Utility",access:"Client",description:"Returns true if gibs is enabled",example:"if( IsShowGibsEnabled() )",variables:[]},{_id:2241,functionName:"IsString",returnValue:"int",referenceVariable:"",section:"variables",access:"Both",description:"Checks whether this entity/variable is a string",example:"if ( isstring ( gun_owner )) ...",variables:[{name:"variable",mandatory:!0,description:"variable that may or may not be a string"}]},{_id:2242,functionName:"IsStruct",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Checks whether this variable is a struct object",example:"if ( isstruct(self)) ...",variables:[{name:"variable",mandatory:!0,description:"variable that may or may not be a struct"}]},{_id:2243,functionName:"IsSubStr",returnValue:"bool",referenceVariable:"",section:"string",access:"Both",description:"Returns true/false if <substring> is a substring of <string>. Case sensitive.",example:'has_str = IsSubStr( "my_string", "str" )',variables:[]},{_id:2244,functionName:"IString",returnValue:"istring",referenceVariable:"",section:"Utility",access:"Both",description:"Casts a string to an istring",example:"x = istring( String )",variables:[{name:"value",mandatory:!0,description:"A string to cast to an istring"}]},{_id:2245,functionName:"IsVec",returnValue:"int",referenceVariable:"",section:"Utility",access:"Both",description:"Checks whether this entity/variable is a vector",example:"if ( IsVec( gun_owner ) ) ...",variables:[{name:"variable",mandatory:!0,description:"variable that may or may not be a vector"}]},{_id:2246,functionName:"IsWeapon",returnValue:"bool",referenceVariable:"",section:"Utility",access:"Both",description:"Checks whether this is a weapon object",example:"if ( IsWeapon( current_weapon ) ) ...",variables:[{name:"weapon_object",mandatory:!0,description:"An parameter that may be a weapon object"}]},{_id:2247,functionName:"MakeLocalizedString",returnValue:"string",referenceVariable:"",section:"Utility",access:"Both",description:"Make a localized string of the given string",example:null,variables:[{name:"string",mandatory:!0,description:"The string to translate"}]},{_id:2248,functionName:"SplitArgs",returnValue:"string[]",referenceVariable:"",section:"Utility",access:"Client",description:"Splits a space seperated string, returning an array of each word in the string.",example:'args = SplitArgs("First second third fourth")',variables:[{name:"arg string",mandatory:!0,description:"space seperated string."}]},{_id:2249,functionName:"sprintf",returnValue:"string",referenceVariable:"",section:"Utility",access:"Both",description:"Replaces field specifiers in a string with values passed in, returns result string format specifiers take the form of {[n]} in the source string where [n] indicates which value to print, e.g. 0 is the first user arg",example:'sprintf("{0} is the first string","first")',variables:[{name:"string",mandatory:!0,description:"The string to translate"},{name:"args",mandatory:!1,description:"zero or more arguments"}]},{_id:2250,functionName:"StrEndsWith",returnValue:"bool",referenceVariable:"",section:"Utility",access:"Both",description:"Returns true/false if <string> ends with <substring>. Case sensitive.",example:'ends_with = StrEndsWith( "my_string", "_string" )',variables:[{name:"string",mandatory:!0,description:"String to search"},{name:"substring",mandatory:!0,description:"Substring to search with."}]},{_id:2251,functionName:"StrIsFloat",returnValue:"bool",referenceVariable:"",section:"Utility",access:"Both",description:"Check if a string is a float.",example:'StrIsFloat( "1.2" ); // true',variables:[{name:"string",mandatory:!0,description:""}]},{_id:2252,functionName:"StrIsInt",returnValue:"bool",referenceVariable:"",section:"Utility",access:"Both",description:"Check if a string is an int.",example:'StrIsInt( "1" ); // true',variables:[{name:"string",mandatory:!0,description:""}]},{_id:2253,functionName:"StrIsNumber",returnValue:"bool",referenceVariable:"",section:"Utility",access:"Both",description:"Check if a string is a number.",example:'StrIsNumber( "1.2" ); // true',variables:[{name:"string",mandatory:!0,description:""}]},{_id:2254,functionName:"StrStartsWith",returnValue:"bool",referenceVariable:"",section:"Utility",access:"Both",description:"Returns true/false if <string> starts with <substring>. Case sensitive.",example:'starts_with = StrStartsWith( "my_string", "my_" )',variables:[{name:"string",mandatory:!0,description:"String to search"},{name:"substring",mandatory:!0,description:"Substring to search with."}]},{_id:2255,functionName:"StrStrip",returnValue:"string",referenceVariable:"",section:"Utility",access:"Both",description:"Strip whitespace from right and left side of string.",example:"StrStrip( \" hq_cleared \" ); // 'hq_cleared'",variables:[{name:"string",mandatory:!0,description:""}]},{_id:2256,functionName:"StrTok",returnValue:"string[]",referenceVariable:"",section:"string",access:"Both",description:"Tokenizes <string> by the delimiters <delim>. Returns the array of string tokens.",example:'my_string_array = StrTok( "my_string; my_string_2", "; " )',variables:[{name:"string",mandatory:!0,description:"The input string"},{name:"delim",mandatory:!0,description:"The delimiter to tokenize by"}]},{_id:2257,functionName:"StrTok2",returnValue:"string[]",referenceVariable:"",section:"Utility",access:"Both",description:"Tokenizes <string> by a single delimiter string. doesn't treat the delimiter string as a series of characters, but as a string",example:'my_string_array = StrTok2( "my_string foo; my_string_2", "foo; " )',variables:[{name:"string",mandatory:!0,description:"The input string"},{name:"delim",mandatory:!0,description:"The delimiter to tokenize by"},{name:"case_sensitive",mandatory:!1,description:"true if test is case sensitive"}]},{_id:2258,functionName:"TableLookup",returnValue:"void",referenceVariable:"",section:"precache",access:"Both",description:"look up a row in a table and pull out a particular column from that row",example:'TableLookup( "mp/statstable.csv", 0, "INDEX_KILLS", 1 )',variables:[{name:"filename",mandatory:!0,description:"The table to look up"},{name:"search column num",mandatory:!0,description:"The column number of the stats table to search through"},{name:"search value",mandatory:!0,description:"The value to use when searching the <search column num>"},{name:"return value column num",mandatory:!0,description:"The column number value to return after we find the correct row"}]},{_id:2259,functionName:"TableLookupColumnCount",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"look up the number of columns in a table",example:'TableLookup( "mp/statstable.csv" )',variables:[{name:"filename",mandatory:!0,description:"The table to look up"}]},{_id:2260,functionName:"TableLookupColumnForRow",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"look up a particular row and column in a table",example:'TableLookupRowNum( "mp/statstable.csv", 0, "INDEX_KILLS" )',variables:[{name:"filename",mandatory:!0,description:"The table to look up"},{name:"search column num",mandatory:!0,description:"The column number of the stats table to search through"},{name:"search value",mandatory:!0,description:"The value to use when searching the <search column num>"}]},{_id:2261,functionName:"TableLookupFindCoreAsset",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Find core asset index for a stringtable",example:'TableLookupRowNum( "mp/statstable.csv" )',variables:[{name:"filename",mandatory:!0,description:"The table to look up"}]},{_id:2262,functionName:"TableLookupIString",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"look up a row in a table and pull out a particular column from that row",example:'TableLookupIString( "mp/statstable.csv", 0, "INDEX_KILLS", 1 )',variables:[{name:"filename",mandatory:!0,description:"The table to look up"},{name:"search column num",mandatory:!0,description:"The column number of the stats table to search through"},{name:"search value",mandatory:!0,description:"The value to use when searching the <search column num>"},{name:"return value column num",mandatory:!0,description:"The column number value to return after we find the correct row"}]},{_id:2263,functionName:"TableLookupRow",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"Return an array of strings for the columns in that row",example:null,variables:[{name:"filename",mandatory:!0,description:"The table to look up"},{name:"row num",mandatory:!0,description:"The row num of the row in table to return"}]},{_id:2264,functionName:"TableLookupRowCount",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"look up the number of rows in a table",example:'TableLookup( "mp/statstable.csv" )',variables:[{name:"filename",mandatory:!0,description:"The table to look up"}]},{_id:2265,functionName:"TableLookupRowNum",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"look up a row number in a table",example:'TableLookupRowNum( "mp/statstable.csv", 0, "INDEX_KILLS" )',variables:[{name:"filename",mandatory:!0,description:"The table to look up"},{name:"search column num",mandatory:!0,description:"The column number of the stats table to search through"},{name:"search value",mandatory:!0,description:"The value to use when searching the <search column num>"}]},{_id:2266,functionName:"Throw",returnValue:"void",referenceVariable:"",section:"Utility",access:"Both",description:"force a script exception (from a builtin call)",example:"throw( )",variables:[]},{_id:2267,functionName:"ToLower",returnValue:"string",referenceVariable:"",section:"string",access:"Both",description:"Converts <string> to a lower case string which is returned.",example:'my_string = ToLower( "MY_STRING" )',variables:[{name:"string",mandatory:!0,description:"(string) Base string"}]},{_id:2268,functionName:"ToUpper",returnValue:"string",referenceVariable:"",section:"Utility",access:"Both",description:"Converts <string> to a upper case string which is returned.",example:'my_string = ToUpper( "lower" )',variables:[{name:"string",mandatory:!0,description:"(string) Base string"}]},{_id:2269,functionName:"AttachPath",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Attaches this vehicle to the given path.",example:"bomber AttachPath( aBomberPaths[i] )",variables:[{name:"node",mandatory:!0,description:"A node on the path to attach."}]},{_id:2270,functionName:"CancelAIMove",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Tell the vehicle to stop moving towards its current goal position.",example:"eTank CancelAIMove()",variables:[]},{_id:2271,functionName:"ClearDefaultPitch",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Clears the desired default pitch for a vehicle.",example:"level.heli cleardefaultpitch()",variables:[]},{_id:2272,functionName:"ClearGoalYaw",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Clear the goal yaw direction for this vehicle.",example:"level.flak1 ClearGoalYaw()",variables:[]},{_id:2273,functionName:"ClearGunnerTarget",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Clear the target for the vehicle turret.",example:"eTank ClearGunnerTarget(0)",variables:[{name:"gunner index",mandatory:!1,description:"Which gun, 0-3."}]},{_id:2274,functionName:"ClearLookAtEnt",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Clear the entity or origin the vehicle is orienting towards.",example:"heli clearLookAt()",variables:[]},{_id:2275,functionName:"ClearTargetYaw",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Clear the target yaw direction for this vehicle.",example:"level.flak1 cleartargetyaw()",variables:[]},{_id:2276,functionName:"ClearTurretTarget",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Clear the target for the vehicle turret.",example:"eTank ClearTurretTarget()",variables:[{name:"turret index",mandatory:!1,description:"0 for turret, 1-4 for gunners"}]},{_id:2277,functionName:"ClearVehGoalPos",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Clears the target position for this vehicle.",example:"tank ClearVehGoalPos()",variables:[]},{_id:2278,functionName:"CreateTrack",returnValue:"void",referenceVariable:"",section:"Vehicle",access:"Server",description:"Set the node enabled or disabled for vehicle pathfinding. SetVehGoalPos will now return true or false if it can find a path.",example:"CreateTrack( track_node )",variables:[{name:"node",mandatory:!0,description:""}]},{_id:2279,functionName:"DisableDriverFiring",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Enables or disables the driver's vehicle turret",example:"tank DisableDriverFiring( true )",variables:[]},{_id:2280,functionName:"DisableGunnerFiring",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Enable or disable gunner firing",example:"tank DisableGunnerFiring( 1, true )",variables:[{name:"gunner index",mandatory:!0,description:"The gunner to disable/enable"},{name:"onoff",mandatory:!0,description:"true to disable, false otherwise"}]},{_id:2281,functionName:"DrawTrajectory",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Draws the vehicles trajectory.",example:"plane DrawTrajectory( true )",variables:[{name:"show",mandatory:!0,description:"Whether to draw trajectory or not"}]},{_id:2282,functionName:"DrivePath",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Starts the vehicle driving this path and uses the vehicle physics, not locked to the spline, can only achieve turns that the physics can handle.",example:"huey DrivePath( start_node )",variables:[{name:"node index",mandatory:!1,description:"A node on the path to attach."},{name:"allow free drive",mandatory:!1,description:"This give the player free driving but script notifies when passing nodes on a vehcile spline"}]},{_id:2283,functionName:"FinishVehicleDamage",returnValue:"entity",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Does damage to an vehicle - usually as part of the damage callback",example:"self FinishVehicleDamage( eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, vDir, sHitLoc, psOffsetTime, damageUnderneathVehicle, modelindex, partname, damageteammates )",variables:[{name:"Inflictor",mandatory:!0,description:"The entity that causes the damage.(e.g. a turret)"},{name:"Attacker",mandatory:!0,description:"The entity that is attacking."},{name:"Damage",mandatory:!0,description:"Integer specifying the amount of damage done"},{name:"Damage Flags",mandatory:!0,description:"Integer specifying flags that are to be applied to the damage"},{name:"Means Of Death",mandatory:!0,description:"Integer specifying the method of death"},{name:"Weapon",mandatory:!0,description:"The weapon number of the weapon used to inflict the damage"},{name:"Point",mandatory:!0,description:"Point of damage"},{name:"Direction",mandatory:!0,description:"(vector) The direction of the damage"},{name:"Hit Loc",mandatory:!0,description:"The location of the hit"},{name:"Offset Time",mandatory:!0,description:"The time offset for the damage"},{name:"DamageFromUnderneath",mandatory:!0,description:"If the hit is underneath the vehicle"},{name:"modelIndex",mandatory:!0,description:"which model in the dobj was hit"},{name:"partIndex",mandatory:!0,description:"which bone was hit"},{name:"damageteammates",mandatory:!0,description:"Whether to damage teammates or not"}]},{_id:2284,functionName:"FinishVehicleRadiusDamage",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Does damage to an vehicle - usually as part of the damage callback",example:"self FinishVehicleRadiusDamage( eInflictor, eAttacker, iDamage, iDFlags, sMeansOfDeath, sWeapon, vPoint, fRadius, fConeRadius, fConeDir, psOffsetTime )",variables:[{name:"Inflictor",mandatory:!0,description:"The entity that causes the damage.(e.g. a turret)"},{name:"Attacker",mandatory:!0,description:"The entity that is attacking."},{name:"Damage",mandatory:!0,description:"Integer specifying the amount of damage done"},{name:"Inner Damage",mandatory:!0,description:"Integer specifying the amount of inner damage done"},{name:"Outer Damage",mandatory:!0,description:"Integer specifying the amount of outer damage done"},{name:"Damage Flags",mandatory:!0,description:"Integer specifying flags that are to be applied to the damage"},{name:"Means Of Death",mandatory:!0,description:"Integer specifying the method of death"},{name:"Weapon",mandatory:!0,description:"The weapon number of the weapon used to inflict the damage"},{name:"Point",mandatory:!0,description:"(vector) The Point of the damage"},{name:"Radius",mandatory:!0,description:"(float) The radius of the damage"},{name:"ConeRadius",mandatory:!0,description:"(float) The radius of the cone damage"},{name:"ConeDirection",mandatory:!0,description:"(vector) The direction of the cone damage"},{name:"Offset Time",mandatory:!0,description:"The time offset for the damage"}]},{_id:2285,functionName:"FireWeapon",returnValue:"entity",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Fire the vehicle's weapon",example:"m_vehicle FireWeapon( 0, m_e_target, v_target_offset )",variables:[{name:"turret_index",mandatory:!1,description:"turret index, 0 being main turret, 1~4 being gunners"},{name:"target ent",mandatory:!1,description:"A target entity for guided missiles"},{name:"target offset",mandatory:!1,description:"Only used for projectile and bomb weapons"},{name:"attacker",mandatory:!1,description:"real attacker who should take credit of this shot"}]},{_id:2286,functionName:"Flip180",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Flips this vehicle 180 (for going forwards / backwards along a path)",example:"huey Flip180()",variables:[]},{_id:2287,functionName:"FreeVehicle",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Frees this vehicle instance. It will unlink any players occupying the vehicle. It will change the vehicle into a vehicle corpse. It will send a death notify on the vehicle. Once called the vehicle cannot move anymore.",example:"self FreeVehicle()",variables:[]},{_id:2288,functionName:"GetAllVehicleNodes",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Gets all of the vehicle nodes in a level",example:"nodes = GetAllVehicleNodes()",variables:[]},{_id:2289,functionName:"GetAngularVelocity",returnValue:"vector",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets the current angular velocity.",example:"self GetAngularVelocity()",variables:[]},{_id:2290,functionName:"GetAttachPos",returnValue:"vector[]",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Returns the origin and angles if the vehicle were to be attached to the path. The origin and angles are returned as a vector array of size 2. Origin is 1st and angles is 2nd.",example:"pos = self GetAttachPos( node )origin = pos[0]angles = pos[1]",variables:[{name:"node index",mandatory:!0,description:"A node on the path to attach."}]},{_id:2291,functionName:"GetBrake",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets the brake value of a nitrous physics vehicle.",example:"jeep getbrake()",variables:[]},{_id:2292,functionName:"GetDefaultAcceleration",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets the acceleration value set in GDT.",example:"accel = self GetDefaultAcceleration()",variables:[]},{_id:2293,functionName:"GetGoalSpeedMPH",returnValue:"float",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Gets the goal speed in miles per hour.",example:"self GetGoalSpeedMPH()",variables:[]},{_id:2294,functionName:"GetGoalYaw",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Set the goal yaw direction for this vehicle. Goal yaw is ignored if vehicle doesn't stop at goal. Lookat entity has priority over goal yaw",example:"level.flak1 GetGoalYaw()",variables:[]},{_id:2295,functionName:"GetGunnerTargetEnt",returnValue:"entity",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets the target entity for this gunner position.",example:"target = huey GetGunnerTurretEnt( 0 )",variables:[{name:"gunner index",mandatory:!0,description:"Which gun, 0-3."}]},{_id:2296,functionName:"GetGunnerTargetVec",returnValue:"vector",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Get the target position for this vehicle turret gunner.",example:"endpt = GetGunnerTargetVec( 1 )",variables:[{name:"gunner index",mandatory:!0,description:"which gun 0-3"}]},{_id:2297,functionName:"GetHandBrake",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets the hand brake value of a nitrous physics vehicle.",example:"jeep gethandbrake()",variables:[]},{_id:2298,functionName:"GetHeliHeightLock",returnValue:"int",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Locks the heli to the height mesh",example:"if ( vehicle GetHeliHeightLock( ) )",variables:[]},{_id:2299,functionName:"GetHeliHeightLockHeight",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets the mesh height at a given point.",example:"maxheight = GetHeliHeightLockHeight( point )",variables:[{name:"point",mandatory:!0,description:"The point to check at"}]},{_id:2300,functionName:"GetMaxSpeed",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Get the max speed of a vehicle. By default gets the script setting",example:"heli GetMaxSpeed( true )",variables:[{name:"get gdt",mandatory:!1,description:"true to get the gdt setting and not the script set."}]},{_id:2301,functionName:"GetNumVehicles",returnValue:"int",referenceVariable:"",section:"level",access:"Server",description:"Gets the number of vehicles entities in the level",example:"vehicleCount = GetNumVehicles()",variables:[]},{_id:2302,functionName:"GetOccupantSeat",returnValue:"int",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Get the seat index occupied by the given player. -1 if player isn't in vehicle.",example:"isDriver = 0 == vehicle GetOccupantSeat( player )",variables:[{name:"player",mandatory:!0,description:"The player to get the seat index for"}]},{_id:2303,functionName:"GetPathFixedOffset",returnValue:"vector",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets a fixed offset from the path for a specific vehicle.",example:"offset = huey GetPathFixedOffset()",variables:[]},{_id:2304,functionName:"GetPathVariableOffset",returnValue:"vector",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets a variable offset from the path for a specific vehicle.",example:"offset = huey GetPathVariableOffset()",variables:[]},{_id:2305,functionName:"GetPhysAcceleration",returnValue:"vector",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets the vehicles acceleration vector.",example:"accel = plane GetPhysAccel()",variables:[]},{_id:2306,functionName:"GetScriptBrake",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets the script brake value of a nitrous physics vehicle.",example:"jeep getscriptbrake()",variables:[]},{_id:2307,functionName:"GetSeatFiringAngles",returnValue:"vector",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Retrieve the angles specifying the direction in which bullets, projectiles, etc. will be emitted from the weapon when it is fired.",example:"turretBarrelAngles = tank GetSeatFiringAngles( 0 )",variables:[{name:"seat index",mandatory:!0,description:"The seat to firing angles for"}]},{_id:2308,functionName:"GetSeatFiringOrigin",returnValue:"vector",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Retrieve the location at the end of the barrel where bullets, projectiles, etc. are emitted when the gun is fired.",example:"turretBarrelOrigin = tank GetSeatFiringOrigin( 0 )",variables:[{name:"seat index",mandatory:!0,description:"The seat to firing origin for"}]},{_id:2309,functionName:"GetSeatOccupant",returnValue:"entity",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Get the entity occupying the given seat index. Undefined if the seat is empty.",example:"driver = vehicle GetSeatOccupant( 0 )",variables:[{name:"seat",mandatory:!0,description:"0 driver, 1-4 gunners, 5-10 passengers"}]},{_id:2310,functionName:"GetSpeed",returnValue:"float",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Gets the current speed in inches per second.",example:"self GetSpeed()",variables:[]},{_id:2311,functionName:"GetSpeedMPH",returnValue:"float",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Gets the current speed in miles per hour.",example:"self GetSpeedMPH()",variables:[]},{_id:2312,functionName:"GetSteering",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Returns the steer factor of the vehicle.",example:"self GetSteering()",variables:[]},{_id:2313,functionName:"GetThrottle",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Returns the throttle factor of the vehicle.",example:"self GetThrottleFactor()",variables:[]},{_id:2314,functionName:"GetTimeFromVehicleNodeToNode",returnValue:"float",referenceVariable:"",section:"Vehicle",access:"Server",description:"The time it would take to go from start node to end node if traveling the spline speed.",example:"time = GetTimeFromVehicleNodeToNode( start_node, end_node )",variables:[{name:"start_node",mandatory:!0,description:"The start node of the path"},{name:"end_node",mandatory:!0,description:"The end node of the path"}]},{_id:2315,functionName:"GetTurretHeatValue",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Get the current heat value for a vehicle weapon.",example:"heat = self GetTurretHeatValue( 1 )",variables:[{name:"gunner index",mandatory:!0,description:"which gun 0-3"}]},{_id:2316,functionName:"GetTurretLimitsYaw",returnValue:"vector",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Get the furthest relative yaw angles the turret can aim, all numbers are positive",example:"limit = veh GetTurretLimits( 1 ); limitMin = -limit[0]; limitMax = limit[1]",variables:[{name:"turret index",mandatory:!1,description:"0 for turret, 1-4 for gunners"}]},{_id:2317,functionName:"GetTurretTargetVec",returnValue:"vector",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Get the target position for this vehicle turret or gunner.",example:"endpt = GetTurretTargetVec( 1 )",variables:[{name:"turret index",mandatory:!1,description:"0 for turret, 1-4 for gunners"}]},{_id:2318,functionName:"GetVehDamageMultiplier",returnValue:"float",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Gets the damage multiplier that applies to the damage type.",example:"vehicle GetVehDamageMultiplier( damgType )",variables:[{name:"damageType",mandatory:!0,description:"The type of damage being applied to the vehicle"}]},{_id:2319,functionName:"GetVehicleAvoidance",returnValue:"int",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Locks the heli to the height mesh",example:"if ( vehicle GetVehicleAvoidance() )",variables:[]},{_id:2320,functionName:"GetVehicleAvoidanceNodes",returnValue:"vector[]",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Get the positions for nearby avoidance nodes.",example:"nodes = plane GetVehicleAvoidanceNodes( radius )",variables:[{name:"radius",mandatory:!0,description:"A radius to filter out nodes returned."}]},{_id:2321,functionName:"GetVehicleNode",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Gets a vehicle node with the given name, key pair",example:'node = getvehiclenode(self.target, "targetname")',variables:[{name:"name",mandatory:!0,description:"(string) The name to search for"},{name:"key",mandatory:!0,description:"(string) The key that name goes with"}]},{_id:2322,functionName:"GetVehicleNodeArray",returnValue:"void",referenceVariable:"",section:"level",access:"Server",description:"Gets an array of vehicle nodes that have the given name, key pair",example:'nodes = GetVehicleNodeArray(self.target, "targetname")',variables:[{name:"name",mandatory:!0,description:"(string) The name to search for"},{name:"key",mandatory:!0,description:"(string) The key that name goes with"}]},{_id:2323,functionName:"GetVehicleOwner",returnValue:"entity",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Returns the owner of this particular vehicle.",example:"eFlak88user = eFlak88 GetVehicleOwner()",variables:[]},{_id:2324,functionName:"GetVehOccupants",returnValue:"entity[]",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Get the occupants of this vehicle in an entity array.",example:"ridersarray = vehicle getvehoccupants()",variables:[]},{_id:2325,functionName:"GetWheelSurface",returnValue:"string",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Returns the surface type of the given wheel as a string.",example:"surface = self GetWheelSurface( side )",variables:[{name:"wheel",mandatory:!0,description:"The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'"}]},{_id:2326,functionName:"IsDriverFiring",returnValue:"bool",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Checks if this driver is firing the vehicle turret",example:"if( tank IsDriverFiring() )",variables:[]},{_id:2327,functionName:"IsGunnerFiring",returnValue:"bool",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Checks if this gun is currently firing.",example:"if( tank IsGunnerFiring( 1 ) )",variables:[{name:"gunner index",mandatory:!0,description:"The gunner to check"}]},{_id:2328,functionName:"IsInsideHeliHeightLock",returnValue:"int",referenceVariable:"",section:"Vehicle",access:"Server",description:"Returns true if Helicopter is inside height mesh",example:"if ( IsInsideHeliHeightLock() )",variables:[]},{_id:2329,functionName:"IsRemoteControl",returnValue:"int",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Query whether this vehicle is usable by players",example:"if ( vehicle isvehicleusable( ) )...",variables:[]},{_id:2330,functionName:"IsTurretReady",returnValue:"int",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Query whether this vehicle's turret is ready for firing",example:"while ( level.playertank IsTurretReady() != true ) ...",variables:[]},{_id:2331,functionName:"IsVehicleImmuneToDamage",returnValue:"bool",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"This checks the vehicle GDT settings related to bulletdamage, grenadedamage, etc.",example:"if ( vehicle IsVehicleImmuneToDamage( flags, mod, weapon ) )",variables:[{name:"Damage Flags",mandatory:!0,description:"Integer specifying flags that are to be applied to the damage"},{name:"Means Of Death",mandatory:!0,description:"Integer specifying the method of death"},{name:"Weapon",mandatory:!0,description:"The weapon number of the weapon used to inflict the damage"}]},{_id:2332,functionName:"IsVehicleManualControl",returnValue:"int",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"check if vehicle hkai behavior is enabled. Not to be confused with UseVehicle()",example:"vehicle IsVehicleManualControl()",variables:[]},{_id:2333,functionName:"IsVehicleSeatOccupied",returnValue:"int",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"same as useby except you can specify a seat, 0 driver, 1-4 gunners, 5-10 passengers",example:"lvt IsVehicleSeatOccupied( 2 )",variables:[{name:"seat",mandatory:!0,description:"0 driver, 1-4 gunners, 5-10 passengers"}]},{_id:2334,functionName:"IsVehicleTurretOverheating",returnValue:"bool",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Returns true if the vehicle turret weapon is overheating, else returns false.",example:"if( self IsVehicleTurretOverheating( 1 ) )",variables:[{name:"gunner index",mandatory:!0,description:"which gun 0-3"}]},{_id:2335,functionName:"IsVehicleUsable",returnValue:"int",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Query whether this vehicle is usable by players",example:"if ( vehicle isvehicleusable( ) )...",variables:[]},{_id:2336,functionName:"JoltBody",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Jolts the vehicle.",example:"self JoltBody( (self.origin + (0,0,64)), 0.5 )",variables:[{name:"jolt position",mandatory:!0,description:"The position of the jolt"},{name:"intensity",mandatory:!0,description:"The intensity of the jolt"},{name:"speedFrac",mandatory:!1,description:"A speed fraction to apply to the jolt. Most be betweeon 0 and 1."},{name:"deceleration",mandatory:!1,description:"The deceleration to apply to this vehicle in miles per hour per second."}]},{_id:2337,functionName:"MakeVehicleUnusable",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets this vehicle to be not usable by the player",example:"car MakeVehicleUnusable()",variables:[]},{_id:2338,functionName:"MakeVehicleUsable",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets this vehicle to be usable by the player",example:"nFlak makeVehicleUsable()",variables:[]},{_id:2339,functionName:"PathFixedOffset",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets a fixed offset for this vehicle to travel on a vehicle path.",example:"huey PathFixedOffset( (0, -200, 0) )",variables:[{name:"offset",mandatory:!0,description:"The offset to apply. A vector in the form (forward, right, up)"}]},{_id:2340,functionName:"PathFixedOffsetClear",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Clears the vehicles fixed offset.",example:"huey PathFixedOffsetClear()",variables:[]},{_id:2341,functionName:"PathMove",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Moves the entire path for this vehicle to the specific origin and angles.",example:"huey PathMove( node, origin, angles )",variables:[{name:"node index",mandatory:!0,description:"Which node to move to the new location (it moves the whole path not just this node)."},{name:"new origin",mandatory:!0,description:"The new position"},{name:"new angles",mandatory:!0,description:"The new angles"}]},{_id:2342,functionName:"PathMoveClear",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Clears the moved path for this vehicle. If not cleared then all paths taken will be moved.",example:"huey ClearPathMove()",variables:[]},{_id:2343,functionName:"PathVariableOffset",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets a variable offset for this vehicle to travel on a vehicle path.",example:"huey PathVariableOffset( (0, 50, 0), 2 )",variables:[{name:"offset",mandatory:!0,description:"The offset to apply. A vector in the form (forward, right, up)"},{name:"time",mandatory:!0,description:" The interval at which to choose new offsets"}]},{_id:2344,functionName:"PathVariableOffsetClear",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Clears the vehicles variable offset.",example:"huey PathVariableOffsetClear()",variables:[]},{_id:2345,functionName:"RecalcSplinePaths",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Recalcs all the nodes int the map",example:"tank2 RecalcSplinePaths()",variables:[]},{_id:2346,functionName:"ReconnectVehicleNodes",returnValue:"void",referenceVariable:"",section:"Vehicle",access:"Server",description:"Reconnect vehicle nodes",example:"ReconnectVehicleNodes()",variables:[]},{_id:2347,functionName:"ResetVehicleFromDropDeploy",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Reset vehicle properties from drop deploy so that it may behave as normal.",example:"raps ResetVehicleFromDropDeploy()",variables:[]},{_id:2348,functionName:"ResumeSpeed",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets the vehicle to resume its path speed.",example:"level.tank ResumeSpeed( 3 )",variables:[{name:"acceleration",mandatory:!1,description:"The acceleration to apply to this vehicle in miles per hour per second."}]},{_id:2349,functionName:"ReturnPlayerControl",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"After controlling a vehicle from script using something like setvehgoalpos(), if the vehicle is being driven by a player, you call this function to return control of the vehicle to the player.",example:"cobra returnplayercontrol()",variables:[]},{_id:2350,functionName:"SeatGetWeapon",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Returns the weapon name for the specified seat. Undefined if there isn't a weapon. Only driver and gunner seats can have weapons.",example:"weaponname = vehicle SeatGetWeapon( 0 )",variables:[{name:"seat index",mandatory:!0,description:"The seat to get weapon for"}]},{_id:2351,functionName:"SetAcceleration",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets the acceleration for this vehicle.",example:"self SetAcceleration( 15 )",variables:[{name:"acceleration",mandatory:!0,description:"The acceleration of the vehicle in miles per hour per second"}]},{_id:2352,functionName:"SetAirResistance",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets the speed at which air resistance maxes out.",example:"self SetAirResistance( 60 )",variables:[{name:"max air resistance speed",mandatory:!0,description:"speed at which air resistance maxes out (MPH)"}]},{_id:2353,functionName:"SetAngularVelocity",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets the angular velocity of a vehicle in degs/s.",example:"self SetAngularVelocity( (0, 90, 0) )",variables:[{name:"angular velocity",mandatory:!0,description:"The angular velocity to set"}]},{_id:2354,functionName:"SetBrake",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Turns off/on the hand brake of a nitrous physics vehicle.",example:"jeep setbrake(1)",variables:[{name:"bool",mandatory:!0,description:"True or 1 to turn on the brake, false or 0 otherwise"}]},{_id:2355,functionName:"SetBuoyancyOffset",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"set buoyancy offset that changes the height an individual vehicle floats in water",example:"crocodile SetBuoyancyOffset( 20 )",variables:[{name:"offset",mandatory:!0,description:"A height offset from water surface."}]},{_id:2356,functionName:"SetDamageStage",returnValue:"void",referenceVariable:"",section:"Vehicle",access:"Server",description:"Set the damage stage of the helicopter",example:"self setdamagestage( 3 )",variables:[{name:"stage",mandatory:!0,description:"the damage stage to set"}]},{_id:2357,functionName:"SetDeceleration",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets the deceleration for this vehicle.",example:"self SetDeceleration( 5 )",variables:[{name:"deceleration",mandatory:!0,description:"The deceleration of the vehicle in miles per hour per second"}]},{_id:2358,functionName:"SetDefaultPitch",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Set the desired default pitch for a vehicle.",example:"level.heli setdefaultpitch(10)",variables:[{name:"pitch",mandatory:!0,description:"Set the default pitch"}]},{_id:2359,functionName:"SetDrivePathPhysicsScale",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"This scales all of the necessary parameters that will help a vehicle drive a path better.",example:"boat SetDrivePathPhysicsScale( 3.0 )",variables:[{name:"scale",mandatory:!1,description:"The scale to set"}]},{_id:2360,functionName:"SetGoalYaw",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Set the goal yaw direction for this vehicle. Goal yaw is ignored if vehicle doesn't stop at goal. Lookat entity has priority over goal yaw",example:"level.flak1 SetGoalYaw( int_value )",variables:[{name:"integer",mandatory:!0,description:"The yaw direction of the target"}]},{_id:2361,functionName:"SetGunnerTargetEnt",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Set the target entity for this vehicle gunner.",example:"eLiberator SetGunnerTargetEnt( eFlaktarget, (0,0,0), 2 )",variables:[{name:"target entity",mandatory:!0,description:"The target."},{name:"target offset",mandatory:!1,description:"The target offset."},{name:"gunner index",mandatory:!1,description:"Which gun, 0-3."}]},{_id:2362,functionName:"SetGunnerTargetVec",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Set the target position for this vehicle turret gunner.",example:"level.flak1 SetGunnerTargetVec( vec1, 1 )",variables:[{name:"target position",mandatory:!0,description:"vecter to aim at/ the position of the target"},{name:"gunner index",mandatory:!1,description:"which gun 0-3"}]},{_id:2363,functionName:"SetGunnerTurretOnTargetRange",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Set the range at which the gunner_turret_on_target notify will occur.",example:"boat SetGunnerTurretOnTargetRange( 0, 15 )",variables:[{name:"gunner index",mandatory:!0,description:"Which gun, 0-3."},{name:"range",mandatory:!1,description:"In degrees"}]},{_id:2364,functionName:"SetHeliDogfighting",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets the vehicle (intended for VTOLs only) to be in dogfighting mode (dogfights with the vehicle's focus entity)",example:"vehicle SetHeliDogfighting( true )",variables:[{name:"enabled",mandatory:!0,description:"true to enable dogfighting, false otherwise"}]},{_id:2365,functionName:"SetHeliHeightCap",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Pulls the heli back down below the height mesh",example:"vehicle SetHeliHeightCap( true )",variables:[{name:"enabled",mandatory:!0,description:"true to enable, false otherwise"}]},{_id:2366,functionName:"SetHeliHeightLock",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Locks the heli to the height mesh",example:"vehicle SetHeliHeightLock( true )",variables:[{name:"enabled",mandatory:!0,description:"true to enable lock, false otherwise"}]},{_id:2367,functionName:"SetHeliHeightPatchEnabled",returnValue:"void",referenceVariable:"",section:"Vehicle",access:"Server",description:"Enabled or disables the specified heli height lock path",example:'SetHeliHeightPatchEnabled( "area51", 0 )',variables:[{name:"targetname",mandatory:!0,description:"All heli height lock patches with this target name"},{name:"enabled",mandatory:!0,description:"Turn it on or off"},{name:"player",mandatory:!1,description:"If defined, only modify the setting for that player"}]},{_id:2368,functionName:"SetHoverParams",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Set the hovering parameters.",example:"self SetHoverParams( 50, 1, 0.5 )",variables:[{name:"radius",mandatory:!0,description:"The hovering range."},{name:"speed",mandatory:!1,description:"Speed to hover at (MPH)"},{name:"accel",mandatory:!1,description:"Acceleration to hover at (MPH/s)"}]},{_id:2369,functionName:"SetJitterParams",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Set the jitter parameters. Set everything to 0 to stop jittering. Vehicle ignores jitter parameters when on ground",example:"self SetJitterParams( (0,0,20), 0.5, 1.5 ); // Jitter up or down randomly within 20 units, switching every 0.5 to 1.5 seconds",variables:[{name:"range vector",mandatory:!0,description:"The jitter range vector."},{name:"min period",mandatory:!1,description:"Minimum time in seconds to switch jitter direction. Default 0.5 sec"},{name:"max period",mandatory:!1,description:"Maximum time in seconds to switch jitter direction. Default 1.0 sec"}]},{_id:2370,functionName:"SetLookAtEnt",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Set the entity this vehicle will orient towards.",example:"eFlak88 setLookAtEnt( eFlaktarget )",variables:[{name:"entity",mandatory:!0,description:"The target."}]},{_id:2371,functionName:"SetLookAtOrigin",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Set the origin this vehicle will orient towards.",example:"heli setLookAtOrigin( org )",variables:[{name:"entity",mandatory:!0,description:"The target."}]},{_id:2372,functionName:"SetMantleEnabled",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets the mantle enabled flag on the vehicle",example:"vehicle SetMantleEnabled( true )",variables:[{name:"enabled",mandatory:!0,description:"True to set the mantle enabled, false otherwise"}]},{_id:2373,functionName:"SetMaxAccelerationScale",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets the max acceleration scale for this physics vehicle.",example:"self SetMaxAccelerationScale( 2.6 )",variables:[{name:"scale",mandatory:!0,description:"The acceleration scale of the physics vehicle"}]},{_id:2374,functionName:"SetMaxPitchRoll",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets max pitch and roll angle for this vehicle.",example:"self SetMaxPitchRoll( 30, 30 )",variables:[{name:"pitch",mandatory:!0,description:"Max pitch angle"},{name:"roll",mandatory:!0,description:"Max roll angle"}]},{_id:2375,functionName:"SetMaxSpeedScale",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets the max speed scale for this physics vehicle.",example:"self SetMaxSpeedScale( 2.6 )",variables:[{name:"scale",mandatory:!0,description:"The max speed scale of the physics vehicle"}]},{_id:2376,functionName:"SetMinDesiredTurnYaw",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"The vehicle will not update its desired yaw until the min turn yaw is reached. Set it to 0 to clear it.",example:"quadtank SetMinDesiredTurnYaw( 45 )",variables:[{name:"yaw",mandatory:!0,description:"The min desired turn yaw to set"}]},{_id:2377,functionName:"SetNearGoalNotifyDist",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Set distance near goal at which near_goal notification should be sent once.",example:"tank setNearGoalNotifyDist( 50 )",variables:[{name:"dist",mandatory:!0,description:"Distance to goal position"}]},{_id:2378,functionName:"SetPathTransitionTime",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Set the time it takes for a vehicle to lerp on to a spline.",example:"boat SetPathTransitionTime( 1.0 )",variables:[{name:"time",mandatory:!0,description:"The transition time"}]},{_id:2379,functionName:"SetPhysAcceleration",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets the vehicles acceleration vector.",example:"plane SetPhysAcceleration( ( 0, 0, -1600) )",variables:[{name:"acceleration",mandatory:!0,description:"The vehicle acceleration"}]},{_id:2380,functionName:"SetPhysAngles",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets the angles on the phys structure",example:"self SetPhysAngles( VectorToAngles( desired_forward ) )",variables:[{name:"angles vector",mandatory:!0,description:"The desired angles."}]},{_id:2381,functionName:"SetPlaneBarrelRoll",returnValue:"void",referenceVariable:"<plane>",section:"Vehicle",access:"Server",description:"Set the goal Roll direction for this plane. PLANE_ON_CURVE has priority over ROLL if this is not set.",example:"level.plane SetPlaneGoalRoll( 1, 5.0f )",variables:[{name:"number",mandatory:!0,description:"The number of rolls"},{name:"time",mandatory:!1,description:"The goal roll time"}]},{_id:2382,functionName:"SetPlaneGoalPos",returnValue:"void",referenceVariable:"<plane>",section:"Vehicle",access:"Server",description:"Set the target position, speed, angles for this vehicle.",example:"plane Setplanegoalpos( ( 200, 200, 200 ), ( 30, 0, 90 ), 170.0 )",variables:[{name:"goal position",mandatory:!0,description:"The goal position"}]},{_id:2383,functionName:"SetRotorSpeed",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets the helicopters rotor speed.",example:"heli SetRotorSpeed( 0.2 )",variables:[{name:"speed",mandatory:!0,description:"The rotor speed, 0 is stopped 1 is full speed."}]},{_id:2384,functionName:"SetSeatOccupied",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets this seat to be occupied/disabled (for players.",example:"vehicle SetSeatOccupied( 2, true )",variables:[{name:"seat",mandatory:!0,description:"0 driver, 1-4 gunners, 5-10 passengers"},{name:"onoff",mandatory:!1,description:"true to enable, false otherwise"}]},{_id:2385,functionName:"SetSpeed",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets the speed and acceleration for this vehicle.",example:"self SetSpeed( 60, 15, 5 )",variables:[{name:"speed",mandatory:!0,description:"The speed of the vehicle in miles per hour"},{name:"acceleration",mandatory:!1,description:"The acceleration of the vehicle in miles per hour per second"},{name:"deceleration",mandatory:!1,description:"Deceleration. If not specified, set to be equal to half of accleration"}]},{_id:2386,functionName:"SetSpeedImmediate",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets the speed and acceleration for this vehicle instantaneously. Direction will be toward the goal direction if there is a goal, otherwise the current direction.",example:"self setspeedimmediate(60, 15, 5)",variables:[{name:"speed",mandatory:!0,description:"The speed of the vehicle in miles per hour"},{name:"acceleration",mandatory:!1,description:"The acceleration of the vehicle in miles per hour per second"},{name:"deceleration",mandatory:!1,description:"Deceleration. If not specified, set to be equal to half of accleration"}]},{_id:2387,functionName:"SetSwitchNode",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets a switch node for this vehicle.",example:"tank2 SetSwitchNode( tank2snode1, tank2snode2 )",variables:[{name:"source node",mandatory:!0,description:"The switch source node"},{name:"dest node",mandatory:!0,description:"The switch destination node."}]},{_id:2388,functionName:"SetTargetYaw",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Set the target yaw direction for this vehicle. Goal yaw has priority over target yaw.",example:"level.flak1 SetTargetYaw( vec1 )",variables:[{name:"yaw",mandatory:!0,description:"The yaw direction of the target"}]},{_id:2389,functionName:"SetTurningAbility",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"If this is higher, helicopters can make sharper turns to match goal positions better.",example:"self SetTurningAbility( 0.9 )",variables:[{name:"turning ability",mandatory:!0,description:"Between 0.001 and 1.0. Defaults to 0.5"}]},{_id:2390,functionName:"SetTurretTargetEnt",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Set the target entity for this vehicle turret.",example:"eFlak88 SetTurretTargetEnt( eFlaktarget, eFlaktarget.origin )",variables:[{name:"target entity",mandatory:!0,description:"The target."},{name:"target offset",mandatory:!1,description:"The target offset."}]},{_id:2391,functionName:"SetTurretTargetRelativeAngles",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Set the target entity for this vehicle turret.",example:"eFlak88 SetTurretTargetEnt( eFlaktarget, eFlaktarget.origin )",variables:[{name:"relative angles",mandatory:!0,description:"The target angle"},{name:"turret index",mandatory:!1,description:"0 for turret, 1-4 for gunners"}]},{_id:2392,functionName:"SetTurretTargetVec",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Set the target position for this vehicle turret.",example:"level.flak1 SetTurretTargetVec( vec1 )",variables:[{name:"target position",mandatory:!0,description:"The position of the target"}]},{_id:2393,functionName:"SetVehGoalPos",returnValue:"bool",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Set the target position for this vehicle. Returns true if it can find a path. If it fails to find a path the vehicle will be stopped.",example:"tank SetVehGoalPos( (0, 0, 0), 1 )",variables:[{name:"goalpos",mandatory:!0,description:"The goal position"},{name:"stopAtGoal",mandatory:!1,description:"Whether the vehicle should slow down to stop at the goal position"},{name:"usepath",mandatory:!1,description:"set to 1 to use pathfinding"}]},{_id:2394,functionName:"SetVehicleAvoidance",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Turns on and off vehicle avoidance",example:"vehicle SetVehicleAvoidance( true, 50 )",variables:[{name:"enabled",mandatory:!0,description:"True to enable avoidance, false otherwise"},{name:"radius",mandatory:!1,description:"The avoidance radius"},{name:"priority",mandatory:!1,description:"Vehicles will avoid everything that is the same priority or higher. Default priority is 1."}]},{_id:2395,functionName:"SetVehicleForDropDeploy",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Set vehicle properties so that it can be dropped into a map.",example:"raps SetVehicleForDropDeploy()",variables:[]},{_id:2396,functionName:"SetVehicleManualControl",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Turns on and off vehicle hkai behavior. Not to be confused with UseVehicle()",example:"vehicle SetVehicleManualControl( true )",variables:[{name:"enabled",mandatory:!0,description:"True to enable vehicle hkai behavior, false otherwise"}]},{_id:2397,functionName:"SetVehicleType",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets the vehicles type.",example:'plane SetVehicleType("f35_vtol")',variables:[{name:"type",mandatory:!0,description:"The type name"}]},{_id:2398,functionName:"SetVehMaxSpeed",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"overrides the max speed for this vehicle.",example:"self SetVehMaxSpeed( 45 )",variables:[{name:"speed",mandatory:!0,description:"The speed to set"}]},{_id:2399,functionName:"SetVehVelocity",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Sets the linear velocity on a vehicle/s.",example:"self SetVehVelocity( (45, 0, 0) )",variables:[{name:"velocity",mandatory:!0,description:"The vehicle velocity"}]},{_id:2400,functionName:"SetVehWeapon",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Set the vehicle's weapon",example:'chopper setVehWeapon( "AGM_114" )',variables:[{name:"weapon name",mandatory:!0,description:"The name of the weapon"}]},{_id:2401,functionName:"SetYawSpeed",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Sets the yaw speed for this vehicle.",example:"self SetYawSpeed( 120, 60 )",variables:[{name:"speed",mandatory:!0,description:"The speed of the vehicle in angles per second"},{name:"acceleration",mandatory:!0,description:"The acceleration of the vehicle in angles per second^2"},{name:"deceleration",mandatory:!1,description:"Deceleration. If not specified, set to be equal to acceleration"}]},{_id:2402,functionName:"StartPath",returnValue:"void",referenceVariable:"<vehicle>",section:"vehicles",access:"Server",description:"Starts the vehicle following this path.",example:"bomber StartPath()",variables:[]},{_id:2403,functionName:"StopFireWeapon",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Stop firing the vehicle's main weapon",example:"nFlak StopFireWeapon()",variables:[]},{_id:2404,functionName:"SwitchStartNode",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Swaps the start node for this vehicle.",example:"tank2 SwitchStartNode( tank2snode1, tank2snode2 )",variables:[{name:"source node",mandatory:!0,description:"The start source node"},{name:"dest node",mandatory:!0,description:"The start destination node."}]},{_id:2405,functionName:"TakePlayerControl",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"You call this function to take control away from a player.",example:"cobra TakePlayerControl()",variables:[]},{_id:2406,functionName:"UseVehicle",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"same as useby except you can specify a seat, 0 driver, 1-4 gunners",example:"lvt usevehicle( player, 2 )",variables:[{name:"user entity",mandatory:!0,description:"The player to use the vehicle"},{name:"seat",mandatory:!0,description:"0 driver, 1-4 gunners, 5-10 passengers"}]},{_id:2407,functionName:"VehDriverAimAtCrosshairs",returnValue:"void",referenceVariable:"<vehicle>",section:"Vehicle",access:"Server",description:"Enables or disables the driver turret aiming at the crosshairs (aiming at the crosshairs overrides all other aim targets and is the default behavior)",example:"vehicle VehDriverAimAtCrosshairs( false )",variables:[{name:"AimAtCrosshairs",mandatory:!0,description:"True to aim the turret at the crosshairs"}]},{_id:2408,functionName:"EnumerateWeapons",returnValue:"void",referenceVariable:"",section:"Weapon",access:"Server",description:"Return an array of weapon names for the weapons of weapon type in fastfile",example:'a_weapons = EnumerateWeapons( "weapon" )',variables:[{name:"weapon type",mandatory:!0,description:"The type of weapon to return(weapon or weaponfull)"}]},{_id:2409,functionName:"Missile_CreateAttractorEnt",returnValue:"int",referenceVariable:"",section:"missile",access:"Server",description:"Creates a missile attractor at the origin of an entity",example:"attractor = Missile_CreateAttractorEnt( enemy_chopper, 10000, 6000 )",variables:[{name:"entity",mandatory:!0,description:"The entity that is to be an attractor"},{name:"strength",mandatory:!0,description:"The strength of the attractor (maximum acceleration it can apply to a missile)"},{name:"affectdist",mandatory:!0,description:"The effective distance at which the missile can be affected. The effect of the attractor falls off from <strength> to zero from the center to this distance away from the center."},{name:"affectAllProjectiles",mandatory:!1,description:"If set it will affect all projectiles inculding grenades and guided missiles."},{name:"alert range",mandatory:!1,description:"If set it send notify when missile breaches range(but will not repulse)."}]},{_id:2410,functionName:"Missile_CreateAttractorOrigin",returnValue:"int",referenceVariable:"",section:"missile",access:"Server",description:"Creates a missile attractor at the given location",example:"attractor = Missile_CreateAttractorOrigin( (100, 350, 10), 10000, 6000 )",variables:[{name:"origin",mandatory:!0,description:"The center of the attractor"},{name:"strength",mandatory:!0,description:"The strength of the attractor (maximum acceleration it can apply to a missile)"},{name:"affectDist",mandatory:!0,description:"The effective distance at which the missile can be affected. The effect of the attractor falls off from <strength> to zero from the center to this distance away from the center."},{name:"affectAllProjectiles",mandatory:!1,description:"If set it will affect all projectiles inculding grenades and guided missiles."},{name:"alert range",mandatory:!1,description:"If set it send notify when missile breaches range(but will not repulse)."}]},{_id:2411,functionName:"Missile_CreateRepulsorEnt",returnValue:"int",referenceVariable:"",section:"missile",access:"Server",description:"Creates a missile repulsor at the origin of an entity",example:"repulsor = Missile_CreateRepulsorEnt( enemy_chopper, 10000, 6000 )",variables:[{name:"entity",mandatory:!0,description:"The entity that is to be a repulsor"},{name:"strength",mandatory:!0,description:"The strength of the repulsor (maximum acceleration it can apply to a missile)"},{name:"affectDist",mandatory:!0,description:"The effective distance at which the missile can be affected. The effect of the attractor falls off from <strength> to zero from the center to this distance away from the center."},{name:"affectAllProjectiles",mandatory:!1,description:"If set it will affect all projectiles inculding grenades and guided missiles."},{name:"alert range",mandatory:!1,description:"If set it send notify when missile breaches range(but will not repulse)."}]},{_id:2412,functionName:"Missile_CreateRepulsorOrigin",returnValue:"int",referenceVariable:"",section:"missile",access:"Server",description:"Creates a missile Repulsor at the given location",example:"repulsor = Missile_CreateRepulsorOrigin( (100, 350, 10), 10000, 6000 )",variables:[{name:"origin",mandatory:!0,description:"The center of the Repulsor"},{name:"strength",mandatory:!0,description:"The strength of the Repulsor (maximum acceleration it can apply to a missile)"},{name:"affectDist",mandatory:!0,description:"The effective distance at which the missile can be affected. The effect of the attractor falls off from <strength> to zero from the center to this distance away from the center."},{name:"affectAllProjectiles",mandatory:!1,description:"If set it will affect all projectiles inculding grenades and guided missiles."},{name:"alert range",mandatory:!1,description:"If set it send notify when missile breaches range(but will not repulse)."}]},{_id:2413,functionName:"Missile_DeleteAttractor",returnValue:"void",referenceVariable:"",section:"missile",access:"Server",description:"Deletes a missile attractor or repulsor",example:"Missile_DeleteAttractor( attractor )",variables:[{name:"attractor",mandatory:!0,description:"The attractor or repulsor"}]}]},{}],3:[function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(a,"__esModule",{value:!0});var r=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),o=n(e("jquery")),s=n(e("./../../data/script_reference")),l=function(){function e(){var t=this;i(this,e),this.codeBoxes=(0,o.default)(".code-box"),this.codeBoxes.length>1?this.codeBoxes.forEach(function(e){t.createCodeBox(e)}):this.createCodeBox(this.codeBoxes)}return r(e,[{key:"createCodeBox",value:function(e){var t=this;""!=e.id&&void 0!=e.id&&o.default.get("data/scripts/"+e.id+".txt",function(a){e.html(a),t.fillCodeBox(e)}),this.setupGscSyntax(e)}},{key:"setupGscSyntax",value:function(e){var t=[];Object.keys(s.default).forEach(function(e){var a=s.default[e].functionName;if(0===a.indexOf("<")){var n=a.indexOf(">"),i=a.substring(0,n+2);a=a.replace(i,"")}t.push(a)}),this.setSyntaxColour(e,t)}},{key:"setSyntaxColour",value:function(e,t){var a=new RegExp("temp","g"),n="",i=[],r=[],o=[],s=0,l=0,c=0,d=0,m=["#using","#namespace","#insert","&function","function","wait","endon","notify","waittill","for","while","if","size","else","return","foreach","in","do","continue","break","switch","case","default","assert","assertmsg","class","var","waittillmatch","waittillframeend","isdefined","constructor","destructor","autoexec","private","const","wait"],p=["false","true","level","self","0","1","2","3","4","5","6","7","8","9"],u=e.html().length;for(s=0,l=0,c=0;-1!=s&&-1!=l&&(s=e.html().indexOf("//",c),l=e.html().indexOf("\n",s+1),-1!=s&&-1!=l)&&(n=e.html().substring(s,l+1),i.push(n),!((c=l+1)>u)););for(u=e.html().length,s=0,l=0,c=0;-1!=s&&-1!=l&&(s=e.html().indexOf("/*",c),l=e.html().indexOf("*/",s+1),-1!=s&&-1!=l)&&(n=e.html().substring(s,l+2),r.push(n),!((c=l+1)>u)););for(u=e.html().length,s=0,l=0,c=0;-1!=s&&-1!=l&&(s=e.html().indexOf('"',c),l=e.html().indexOf('"',s+1),-1!=s&&-1!=l)&&((n=e.html().substring(s,l+1)).includes("color: ")||o.push(n),!((c=l+1)>u)););for(d=0;d<r.length;d++)e.html(e.html().replace(r[d],'<span style="color: DIMGRAY">$&</span>'));for(d=0;d<i.length;d++)e.html(e.html().replace(i[d],'<span style="color: DIMGRAY">$&</span>'));for(d=0;d<o.length;d++)e.html(e.html().replace(o[d],'<span style="color: GOLDENROD">$&</span>'));for(d=0;d<m.length;d++)a=new RegExp("\\s"+m[d]+"\\(|^"+m[d]+"\\(|\\s"+m[d]+"\\s|^"+m[d]+"\\s","gi"),e.html(e.html().replace(a,'<span style="color: INDIANRED">$&</span>'));for(d=0;d<p.length;d++)a=new RegExp(p[d],"gi"),e.html(e.html().replace(a,'<span style="color: MEDIUMPURPLE">$&</span>'));for(d=0;d<t.length;d++)a=new RegExp("\\s"+t[d]+"\\(|^"+t[d]+"\\(|\\s"+t[d]+"\\s\\(|^"+t[d]+"\\s\\(","gi"),e.html(e.html().replace(a,'<span style="color: DEEPSKYBLUE"> '+t[d]+"</span>("));this.removeSpansBetween(e,'<span style="color: GOLDENROD">"','"</span>'),this.removeSpansBetween(e,"//","\n"),this.removeSpansBetween(e,"/*","*/")}},{key:"removeSpansBetween",value:function(e,t,a){for(var n=e.html().length,i=[],r=[],o="",s=0,l=0,c=0,d=0,m=0,p=0,u=0,h=[],f=0;-1!=s&&-1!=l&&e.html().includes(t)&&e.html().includes(a)&&(s=e.html().indexOf(t,c)+t.length,l=e.html().indexOf(a,s),s!=t.length-1&&-1!=l);){if((o=e.html().substring(s,l)).includes("<")){for(i.push(o),f=o.length;-1!=m&&-1!=p&&(m=o.indexOf("<",u),p=o.indexOf(">",m)+1,-1!=m&&0!=p)&&(h.push(o.substring(m,p)),!((u=p)>=f)););for(d=0;d<h.length;d++)o=o.replace(h[d],"");r.push(o)}if((c=l+1)>n)break}for(d=0;d<r.length;d++)e.html(e.html().replace(i[d],r[d]))}}]),e}();a.default=l},{"./../../data/script_reference":2,jquery:1}],4:[function(e,t,a){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.default={returnValue:{void:"No value returned by this function.",bool:"This function returns a boolean value (TRUE|FALSE).",int:"This function returns an integer value.",entity:"This function returns an entity.",string:"This function returns an string value.",istring:"This function returns an string value.",vector:"This function returns an vector value (x, y, z).",float:"This function returns a float value.","vector[]":"This function returns a vector array [(x, y, z), (x, y, z), ...].",anim:"This function returns an animation.",object:"This function returns an object.","entity[]":"This function returns an entity array [entA, entB, ...].","int[]":"This function returns an integer array [0, 1, 2, ...].","pathnode[]":"This function returns a pathnode array.","string[]":'This function returns a string array ["strA", "strB", ...].',"float[]":"This function returns a string array [0.1, 0.2, 0.3, ...]."},referenceVariable:{"<actor>":"Call this function on an actor.","<player>":"Call this function on an player.","<entity>":"Call this function on an entity.","<actor_or_player>":"Call this function on either an actor or a player.","<ai_or_player>":"Call this function on either an AI or a player.","<ball>":"Call this function on a ball.","<turret>":"Call this function on a turret.","<client>":"Call this function on a client.","<vehicle>":"Call this function on a vehicle.","<ai>":"Call this function on an AI.","<light>":"Call this function on a light.","<turret_or_vehicle>":"Call this function on a turret or vehicle.","<pathnode>":"Call this function on a pathnode.","<weapon>":"Call this function on a weapon.","<parententity>":"Call this function on a parent entity.","<grenade>":"Call this function on a grenade.","<player_or_playercorpse>":"Call this function on a player or player corpse.","<attacker>":"Call this function on an attacker.","<non_player_entity>":"Call this function on a non-player entity.","<script_model>":"Call this function on a script model.","<destructible>":"Call this function on a destructible.","<missile>":"Call this function on a missile.","<script_model/script_origin/script_brushmodel>":"Call this function on a script model, script origin, or script brushmodel.","<ent>":"Call this function on an entity.","<linked_player>":"Call this function on a linked player.","<trigger>":"Call this function on a trigger.","<flag>":"Call this function on a flag.","<sentient>":"Call this function on a sentient.","<bot>":"Call this function on a bot.","<hud_element>":"Call this function on a HUD element.","<hud_clock_element>":"Call this function on a HUD clock element.","<hud_timer_element>":"Call this function on a HUD timer element.","<hud_value_element>":"Call this function on a HUD value element.","<plane>":"Call this function on a plane vehicle."}}},{}],5:[function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),o=n(e("jquery")),s=n(e("./components/codeBox")),l=n(e("./../data/script_reference")),c=n(e("./constants/script_reference_constants"));new(function(){function e(){var t=this;i(this,e),this.scriptReferenceEndpoint="index",this.exampleBox=new s.default,this.functionList=(0,o.default)(".side-bar-list"),this.functionHeader=(0,o.default)(".script-reference-header"),this.variablesContainer=(0,o.default)(".variable-container"),this.summary=(0,o.default)(".script-reference-summary"),this.example=(0,o.default)(".script-reference-code-box"),this.reportButton=(0,o.default)(".report-button"),this.scriptDetailsRegion=(0,o.default)(".script-details-region"),this.reportIssueRegion=(0,o.default)(".report-issues-region"),this.searchInput=(0,o.default)(".search-bar"),this.loadingRegion=(0,o.default)(".side-bar-loading"),this.sectionSelect=(0,o.default)(".section-select"),this.clearButton=(0,o.default)(".clear-button"),this.functionClipBoard=(0,o.default)(".script-reference-function"),this.clipBoardButton=(0,o.default)(".copy-to-clipboard"),this.scriptReferenceAccess=(0,o.default)(".script-reference-access"),this.scriptReferenceReturnedValue=(0,o.default)(".script-reference-return-value"),this.scriptReferenceReturnedDetails=(0,o.default)(".script-reference-return-details"),this.scriptReferenceReferenceVariable=(0,o.default)(".script-reference-reference-variable"),this.scriptReferenceReferenceDetails=(0,o.default)(".script-reference-reference-details"),this.referenceVariableRegion=(0,o.default)(".reference-variable-region"),this.clipboardNotification=(0,o.default)(".clipboard-notification"),this.cancelButton=(0,o.default)(".cancel-button"),this.sectionDisplay=(0,o.default)(".script-reference-section"),this.bottomToggle=(0,o.default)(".side-bar-button"),this.toggle=(0,o.default)(".side-bar-toggle"),this.sideBar=(0,o.default)(".side-bar"),this.isLoading=!0,this.isSideBarToggled=!1,this.functionList.removeClass("pointer"),setTimeout(function(){t.loadFunctions(),t.isLoading=!1,t.setEndpointFunction(),t.functionList.addClass("pointer"),t.reportButton.on("click",t.openReportDialogue.bind(t)),t.clearButton.on("click",t.onClearSearch.bind(t)),t.clipBoardButton.on("click",t.copyToClipboard.bind(t)),t.cancelButton.on("click",t.closeReportDisalogue.bind(t)),t.toggle.on("click",t.toggleSideBar.bind(t)),t.bottomToggle.on("click",t.toggleSideBar.bind(t)),t.searchInput.on("keyup",t.onSearchKeyUp.bind(t)),t.sectionSelect.on("change",t.onSectionChange.bind(t)),document.getElementsByTagName("BODY")[0].onresize=function(){window.innerWidth>768&&t.screenToggleSideBar(!1)}},1)}return r(e,[{key:"onSearchKeyUp",value:function(){var e=this;this.timer&&clearTimeout(this.timer),this.timer=setTimeout(function(){e.searchInitiated()},300)}},{key:"onSectionChange",value:function(){this.searchInitiated()}},{key:"screenToggleSideBar",value:function(e){this.isSideBarToggled=e,this.isSideBarToggled?(this.sideBar.addClass("hidden"),this.bottomToggle.removeClass("hidden")):(this.sideBar.removeClass("hidden"),this.bottomToggle.addClass("hidden"))}},{key:"toggleSideBar",value:function(){this.isSideBarToggled?(this.sideBar.removeClass("hidden"),this.bottomToggle.addClass("hidden")):(this.sideBar.addClass("hidden"),this.bottomToggle.removeClass("hidden")),this.isSideBarToggled=!this.isSideBarToggled}},{key:"loadFunctions",value:function(){var e=this;Object.keys(l.default).forEach(function(t){var a=l.default[t];e.createFunction(a,t)}),this.loadingRegion.addClass("hidden")}},{key:"createFunction",value:function(e,t){var a=this,n=(0,o.default)('<li class="side-bar-item '+e.section+'">'+e.functionName+"</li>");n.on("click",function(){a.isLoading||(window.innerWidth<=768&&a.screenToggleSideBar(!0),a.closeReportDisalogue(),a.lastFunctionId=t,window.history.pushState("object or string",e.functionName,a.scriptReferenceEndpoint+".html?functionId("+t+")"),a.onFunctionChange(t))}),this.functionList.append(n)}},{key:"setEndpointFunction",value:function(){var e=this,t=window.location.href;if(-1!==t.indexOf("functionId")){this.loadingRegion.removeClass("hidden");var a=t.match(/\(([^)]+)\)/)[1];setTimeout(function(){e.onFunctionChange(a),e.loadingRegion.addClass("hidden")},1)}else-1!==t.indexOf("report-issue")?setTimeout(function(){e.onFunctionChange("0"),e.loadingRegion.addClass("hidden"),e.openReportDialogue()},1):setTimeout(function(){e.onFunctionChange("0"),e.loadingRegion.addClass("hidden")},1)}},{key:"onFunctionChange",value:function(e){if(parseInt(e)!==this.currentFunctionId){this.setSideBarFunction(e);var t=l.default[e],a="",n="";t.variables.forEach(function(e){a+=(e.mandatory?"&lt;":"[")+e.name+(e.mandatory?"&gt;":"]")+", ",n+=e.name+", "}),a=a.substring(0,a.length-2),n=n.substring(0,n.length-2);var i=(t.returnValue?"&lt;"+t.returnValue+"&gt;":"")+" "+t.referenceVariable+" "+t.functionName+"("+a+")";if(this.variablesContainer.html(""),0===t.variables.length)this.variablesContainer.html((0,o.default)('<span class="script-reference-no-variable">No Parameters</span>'));else for(var r=0;r<t.variables.length;r++){var s=r!==t.variables.length?"script-reference-variable-container":"",d=(0,o.default)('<div class="'+s+'"></div>'),m=(0,o.default)('<span class="script-reference-requirement"></span>'),p=(0,o.default)('<span class="script-reference-variable">'+t.variables[r].name+"</span>"),u=(0,o.default)('<span class="script-reference-description">'+t.variables[r].description+"</span>");t.variables[r].mandatory?m.html("Manditory"):m.html("Optional"),d.append(m),d.append(p),d.append(u),this.variablesContainer.append(d)}this.scriptReferenceAccess.html(t.access),this.summary.html(t.description&&""!==t.description?t.description:"No Summary"),this.scriptReferenceReturnedValue.html(t.returnValue),this.scriptReferenceReturnedDetails.html(c.default.returnValue[t.returnValue]),this.scriptReferenceReferenceVariable.html(t.referenceVariable.replace("<","").replace(">","")),this.scriptReferenceReferenceDetails.html(c.default.referenceVariable[t.referenceVariable]),this.sectionDisplay.html(t.section.toLowerCase().charAt(0).toUpperCase()+t.section.toLowerCase().slice(1)),""===t.referenceVariable?this.referenceVariableRegion.addClass("hidden"):this.referenceVariableRegion.removeClass("hidden"),!t.description||t.description&&""===t.description?this.summary.addClass("script-reference-no-variable"):this.summary.removeClass("script-reference-no-variable"),this.example.html(t.example||t.functionName+"("+n+")"),this.exampleBox.setupGscSyntax(this.example),this.functionHeader.html(i),this.functionClipBoard.value=t.functionName+"("+a+")",this.functionClipBoard.html(""),this.functionClipBoard.append((0,o.default)('<span class="function-style">'+t.functionName+'</span><span class="function-parameters">('+a+")</span>"))}}},{key:"setSideBarFunction",value:function(e){(0,o.default)("li:nth-child("+(parseInt(e)+1)+")").addClass("side-bar-item-selected"),(this.currentFunctionId||0===this.currentFunctionId)&&(0,o.default)("li:nth-child("+(this.currentFunctionId+1)+")").removeClass("side-bar-item-selected"),this.currentFunctionId=parseInt(e)}},{key:"formatVariableName",value:function(e){return e.replace("<","").replace(">","").replace("[","").replace("]","")}},{key:"formatDescription",value:function(e,t){return e.replace("[MANDATORY]  ","").replace("[OPTIONAL]  ","").replace(t,"")}},{key:"formatExample",value:function(e,t){var a=(e=(e=e.replace(/\(\)/g,"@")).replace(/  +/g," ").replace(/\(\ /g,"(").replace(/\ \)/g,")").replace(/\[\ /g,"[").replace(/\ \]/g,"]").replace(/<\ /g,"&lt;").replace(/ \>/g,"&gt;").replace(/\</g,"&lt;").replace(/\>/g,"&gt;").replace(new RegExp(" - "),"-").replace(new RegExp(" + "),"+").replace(new RegExp("&gt;&lt;","g"),"&gt; &lt;")).substring(e.indexOf(t)+t.length+1),n=(a=a.substring(0,a.indexOf(")"))).replace(/ /g,", ");return e.replace(a,n).replace(new RegExp("@","g"),"()")}},{key:"openReportDialogue",value:function(){window.history.pushState("object or string","report-issue",this.scriptReferenceEndpoint+".html?report-issue"),this.scriptDetailsRegion.addClass("hidden"),this.reportIssueRegion.removeClass("hidden")}},{key:"closeReportDisalogue",value:function(){this.lastFunctionId?window.history.pushState("object or string","report-issue",this.scriptReferenceEndpoint+".html?functionId("+this.lastFunctionId+")"):window.history.pushState("object or string","report-issue",this.scriptReferenceEndpoint+".html"),this.scriptDetailsRegion.removeClass("hidden"),this.reportIssueRegion.addClass("hidden")}},{key:"searchInitiated",value:function(){var e=this,t=this.searchInput.val(),a=this.sectionSelect.val();(!this.lastSeachedValue||this.lastSeachedValue&&this.lastSeachedValue!==t||this.lastSectionValue&&this.lastSectionValue!==a)&&(this.isLoading=!0,this.closeReportDisalogue(),this.loadingRegion.removeClass("hidden"),this.functionList.removeClass("pointer"),this.lastSeachedValue=t,this.lastSectionValue=a,setTimeout(function(){e.onSearch(t),e.loadingRegion.addClass("hidden"),setTimeout(function(){e.isLoading=!1,e.functionList.addClass("pointer")},10)},10))}},{key:"onSearch",value:function(e){var t=this.functionList.children(),a=Object.keys(t),n=this.sectionSelect.val();a.forEach(function(t){var a=parseInt(t)+1;if(a){var i=(0,o.default)("li:nth-child("+a+")");("all"===n||i.hasClass(n))&&-1!==i.html().toLowerCase().indexOf(e.toLowerCase())?i.removeClass("hidden"):i.addClass("hidden")}})}},{key:"onClearSearch",value:function(){this.sectionSelect.val("all"),this.searchInput.val(""),this.searchInitiated()}},{key:"copyToClipboard",value:function(){var e=this,t=this.functionClipBoard.value.replace(new RegExp("&gt;","g"),">").replace(new RegExp("&lt;","g"),"<"),a=(0,o.default)('<input value="'+t+'">');(0,o.default)("body").append(a),a.select(),document.execCommand("copy"),a.remove(),this.clipboardNotification.removeClass("hidden"),setTimeout(function(){e.clipboardNotification.addClass("hidden")},1500)}}]),e}())},{"./../data/script_reference":2,"./components/codeBox":3,"./constants/script_reference_constants":4,jquery:1}]},{},[5]);